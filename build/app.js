(()=>{"use strict";var e={517:e=>{e.exports=require("lodash")},711:e=>{e.exports=require("newrelic")}},t={};function i(a){var n=t[a];if(void 0!==n)return n.exports;var o=t[a]={exports:{}};return e[a](o,o.exports,i),o.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},i.d=(e,t)=>{for(var a in t)i.o(t,a)&&!i.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{const e=require("dotenv"),t=require("chalk"),a=require("connect-timeout"),n=require("cors"),o=require("express"),s=require("helmet"),l=require("http"),d=require("morgan"),_=require("xss-clean"),r=require("sequelize-typescript");var c=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},p=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let u=class extends r.Model{};c([(0,r.BelongsTo)((()=>la)),p("design:type",Object)],u.prototype,"insurance",void 0),c([r.PrimaryKey,r.AutoIncrement,r.Column,p("design:type",Number)],u.prototype,"id",void 0),c([r.Column,p("design:type",Number)],u.prototype,"key",void 0),c([(0,r.ForeignKey)((()=>ti)),r.Column,p("design:type",Number)],u.prototype,"case_id",void 0),c([(0,r.ForeignKey)((()=>la)),r.Column,p("design:type",Number)],u.prototype,"insurance_id",void 0),c([r.Column,p("design:type",Number)],u.prototype,"insurance_location_id",void 0),c([r.Column,p("design:type",Number)],u.prototype,"insurance_plan_name_id",void 0),c([r.Column,p("design:type",Number)],u.prototype,"adjustor_id",void 0),c([r.Column,p("design:type",String)],u.prototype,"insured",void 0),c([r.Column,p("design:type",String)],u.prototype,"first_name",void 0),c([r.Column,p("design:type",String)],u.prototype,"middle_name",void 0),c([r.Column,p("design:type",String)],u.prototype,"last_name",void 0),c([r.Column,p("design:type",String)],u.prototype,"gender",void 0),c([r.Column,p("design:type",Date)],u.prototype,"dob",void 0),c([r.Column,p("design:type",String)],u.prototype,"ssn",void 0),c([r.Column,p("design:type",String)],u.prototype,"claim_no",void 0),c([r.Column,p("design:type",String)],u.prototype,"policy_no",void 0),c([r.Column,p("design:type",String)],u.prototype,"wcb_no",void 0),c([r.Column,p("design:type",Number)],u.prototype,"contact_person_relation_id",void 0),c([r.Column,p("design:type",String)],u.prototype,"member_id",void 0),c([r.Column,p("design:type",String)],u.prototype,"group_no",void 0),c([r.Column,p("design:type",String)],u.prototype,"type",void 0),c([r.Column,p("design:type",String)],u.prototype,"other_relation_description",void 0),c([r.Column,p("design:type",String)],u.prototype,"phone_no",void 0),c([r.Column,p("design:type",Boolean)],u.prototype,"confirmed_for_billing",void 0),c([r.Column,p("design:type",String)],u.prototype,"prior_authorization_no",void 0),c([r.Column,p("design:type",Boolean)],u.prototype,"is_policy_holder",void 0),c([r.Column,p("design:type",Date)],u.prototype,"created_at",void 0),c([r.Column,p("design:type",Number)],u.prototype,"created_by",void 0),c([r.Column,p("design:type",Date)],u.prototype,"deleted_at",void 0),c([r.Column,p("design:type",Date)],u.prototype,"updated_at",void 0),c([r.Column,p("design:type",Number)],u.prototype,"updated_by",void 0),u=c([(0,r.Table)({modelName:"kiosk_case_insurances",tableName:"kiosk_case_insurances",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],u);var m=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},y=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let h=class extends r.Model{};m([r.Column,y("design:type",Date)],h.prototype,"created_at",void 0),m([r.Column,y("design:type",Number)],h.prototype,"created_by",void 0),m([r.Column,y("design:type",Date)],h.prototype,"deleted_at",void 0),m([r.Column,y("design:type",Number)],h.prototype,"facility_location_id",void 0),m([r.PrimaryKey,r.AutoIncrement,r.Column,y("design:type",Number)],h.prototype,"id",void 0),m([r.Column,y("design:type",Number)],h.prototype,"supervisor_id",void 0),m([r.Column,y("design:type",Number)],h.prototype,"technician_id",void 0),m([r.Column,y("design:type",Date)],h.prototype,"updated_at",void 0),m([r.Column,y("design:type",Number)],h.prototype,"updated_by",void 0),h=m([(0,r.Table)({modelName:"technician_supervisors",tableName:"technician_supervisors",timestamps:!1})],h);var f=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},v=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let g=class extends r.Model{};f([r.Column,v("design:type",Date)],g.prototype,"created_at",void 0),f([r.Column,v("design:type",Number)],g.prototype,"created_by",void 0),f([r.Column,v("design:type",Date)],g.prototype,"deleted_at",void 0),f([r.PrimaryKey,r.AutoIncrement,r.Column,v("design:type",Number)],g.prototype,"id",void 0),f([r.Column,v("design:type",String)],g.prototype,"name",void 0),f([r.Column,v("design:type",String)],g.prototype,"slug",void 0),f([r.Column,v("design:type",Date)],g.prototype,"updated_at",void 0),f([r.Column,v("design:type",Number)],g.prototype,"updated_by",void 0),g=f([(0,r.Table)({modelName:"sch_appointment_statuses",tableName:"sch_appointment_statuses",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],g);var b,S,I,D,w=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},O=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};!function(e){e[e.male=0]="male",e[e.female=1]="female",e[e.x=2]="x"}(b||(b={})),function(e){e[e.self=0]="self",e[e.other=1]="other",e[e.skip=2]="skip"}(S||(S={})),function(e){e[e.yes=0]="yes",e[e.no=1]="no",e[e.skip=2]="skip"}(I||(I={})),function(e){e[e.yes=0]="yes",e[e.no=1]="no",e[e.skip=2]="skip"}(D||(D={}));let T=class extends r.Model{};w([r.Column,O("design:type",Number)],T.prototype,"age",void 0),w([r.Column,O("design:type",Number)],T.prototype,"case_id",void 0),w([r.Column,O("design:type",String)],T.prototype,"cell_phone",void 0),w([r.Column,O("design:type",Number)],T.prototype,"contact_person_relation_id",void 0),w([r.Column,O("design:type",Number)],T.prototype,"contact_person_type_id",void 0),w([r.Column,O("design:type",Date)],T.prototype,"created_at",void 0),w([r.Column,O("design:type",Number)],T.prototype,"created_by",void 0),w([r.Column,O("design:type",Date)],T.prototype,"deleted_at",void 0),w([r.Column,O("design:type",Date)],T.prototype,"dob",void 0),w([r.Column,O("design:type",String)],T.prototype,"email",void 0),w([r.Column,O("design:type",String)],T.prototype,"ext",void 0),w([r.Column,O("design:type",String)],T.prototype,"fax",void 0),w([r.Column,O("design:type",String)],T.prototype,"first_name",void 0),w([r.Column,O("design:type",Number)],T.prototype,"gender",void 0),w([r.Column,O("design:type",Number)],T.prototype,"height_ft",void 0),w([r.Column,O("design:type",Number)],T.prototype,"height_in",void 0),w([r.Column,O("design:type",String)],T.prototype,"home_phone",void 0),w([r.PrimaryKey,r.AutoIncrement,r.Column,O("design:type",Number)],T.prototype,"id",void 0),w([r.Column,O("design:type",Number)],T.prototype,"is_emergency",void 0),w([r.Column,O("design:type",Number)],T.prototype,"is_form_filler",void 0),w([r.Column,O("design:type",Number)],T.prototype,"is_guarantor",void 0),w([r.Column,O("design:type",Boolean)],T.prototype,"is_resedential_same",void 0),w([r.Column,O("design:type",Number)],T.prototype,"key",void 0),w([r.Column,O("design:type",String)],T.prototype,"last_name",void 0),w([r.Column,O("design:type",String)],T.prototype,"marital_status",void 0),w([r.Column,O("design:type",String)],T.prototype,"middle_name",void 0),w([r.Column,O("design:type",Number)],T.prototype,"object_id",void 0),w([r.Column,O("design:type",String)],T.prototype,"other_relation_description",void 0),w([(0,r.HasMany)((()=>k)),O("design:type",Object)],T.prototype,"patientAddress",void 0),w([r.Column,O("design:type",Number)],T.prototype,"speciality_id",void 0),w([r.Column,O("design:type",String)],T.prototype,"ssn",void 0),w([r.Column,O("design:type",Date)],T.prototype,"updated_at",void 0),w([r.Column,O("design:type",Number)],T.prototype,"updated_by",void 0),w([r.Column,O("design:type",Number)],T.prototype,"weight_kg",void 0),w([r.Column,O("design:type",Number)],T.prototype,"weight_lbs",void 0),w([r.Column,O("design:type",String)],T.prototype,"work_phone",void 0),w([r.Column,O("design:type",String)],T.prototype,"workplace_name",void 0),T=w([(0,r.Table)({modelName:"kiosk_contact_person",tableName:"kiosk_contact_person",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],T);var A=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},N=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let C=class extends r.Model{};A([r.Column,N("design:type",Date)],C.prototype,"created_at",void 0),A([r.Column,N("design:type",Number)],C.prototype,"created_by",void 0),A([r.Column,N("design:type",Date)],C.prototype,"deleted_at",void 0),A([r.PrimaryKey,r.AutoIncrement,r.Column,N("design:type",Number)],C.prototype,"id",void 0),A([r.Column,N("design:type",Number)],C.prototype,"key",void 0),A([r.Column,N("design:type",String)],C.prototype,"name",void 0),A([r.Column,N("design:type",String)],C.prototype,"slug",void 0),A([r.Column,N("design:type",Date)],C.prototype,"updated_at",void 0),A([r.Column,N("design:type",Number)],C.prototype,"updated_by",void 0),C=A([(0,r.Table)({modelName:"kiosk_contact_person_types",tableName:"kiosk_contact_person_types",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],C);var R,E=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},L=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};!function(e){e[e.mailing=0]="mailing",e[e.residential=1]="residential"}(R||(R={}));let k=class extends r.Model{};E([r.Column,L("design:type",String)],k.prototype,"apartment",void 0),E([r.Column,L("design:type",String)],k.prototype,"city",void 0),E([(0,r.ForeignKey)((()=>T)),r.Column,L("design:type",Number)],k.prototype,"contact_person_id",void 0),E([r.Column,L("design:type",String)],k.prototype,"country",void 0),E([r.Column,L("design:type",Date)],k.prototype,"created_at",void 0),E([r.Column,L("design:type",Number)],k.prototype,"created_by",void 0),E([r.Column,L("design:type",Date)],k.prototype,"deleted_at",void 0),E([r.AutoIncrement,r.PrimaryKey,r.Column,L("design:type",Number)],k.prototype,"id",void 0),E([r.Column,L("design:type",Number)],k.prototype,"key",void 0),E([r.Column,L("design:type",Number)],k.prototype,"latitude",void 0),E([r.Column,L("design:type",Number)],k.prototype,"longitude",void 0),E([r.Column,L("design:type",String)],k.prototype,"state",void 0),E([r.Column,L("design:type",String)],k.prototype,"street",void 0),E([r.Column,L("design:type",Number)],k.prototype,"type",void 0),E([r.Column,L("design:type",Date)],k.prototype,"updated_at",void 0),E([r.Column,L("design:type",Number)],k.prototype,"updated_by",void 0),E([r.Column,L("design:type",String)],k.prototype,"zip",void 0),k=E([(0,r.Table)({modelName:"kiosk_contact_person_address",tableName:"kiosk_contact_person_address",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],k);var P=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},j=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let B=class extends r.Model{};P([(0,r.ForeignKey)((()=>He)),r.Column,j("design:type",Number)],B.prototype,"appointment_id",void 0),P([(0,r.ForeignKey)((()=>ti)),r.Column,j("design:type",Number)],B.prototype,"case_id",void 0),P([r.Column,j("design:type",Date)],B.prototype,"created_at",void 0),P([r.Column,j("design:type",Number)],B.prototype,"created_by",void 0),P([r.Column,j("design:type",String)],B.prototype,"date_of_check_in",void 0),P([r.Column,j("design:type",String)],B.prototype,"date_of_check_out",void 0),P([r.Column,j("design:type",Date)],B.prototype,"deleted_at",void 0),P([r.PrimaryKey,r.AutoIncrement,r.Column,j("design:type",Number)],B.prototype,"id",void 0),P([r.Column,j("design:type",Number)],B.prototype,"key",void 0),P([(0,r.ForeignKey)((()=>Pt)),r.Column,j("design:type",Number)],B.prototype,"status_id",void 0),P([r.Column,j("design:type",Date)],B.prototype,"time_of_check_in",void 0),P([r.Column,j("design:type",Date)],B.prototype,"time_of_check_out",void 0),P([r.Column,j("design:type",Date)],B.prototype,"updated_at",void 0),P([r.Column,j("design:type",Number)],B.prototype,"updated_by",void 0),P([(0,r.BelongsTo)((()=>Pt)),j("design:type",Object)],B.prototype,"visitStatus",void 0),P([(0,r.BelongsTo)((()=>ti)),j("design:type",Object)],B.prototype,"case",void 0),P([(0,r.HasOne)((()=>hi)),j("design:type",Object)],B.prototype,"sessionPatientNotSeenReason",void 0),B=P([(0,r.Table)({modelName:"kiosk_case_patient_session",tableName:"kiosk_case_patient_session",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],B);var U=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},q=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let F=class extends r.Model{};U([r.Column,q("design:type",Date)],F.prototype,"created_at",void 0),U([r.Column,q("design:type",Number)],F.prototype,"created_by",void 0),U([r.Column,q("design:type",Date)],F.prototype,"deleted_at",void 0),U([r.Column,q("design:type",String)],F.prototype,"details",void 0),U([(0,r.BelongsTo)((()=>le)),q("design:type",Object)],F.prototype,"doctor",void 0),U([(0,r.ForeignKey)((()=>le)),r.Column,q("design:type",Number)],F.prototype,"doctor_id",void 0),U([r.AutoIncrement,r.PrimaryKey,r.Column,q("design:type",Number)],F.prototype,"id",void 0),U([r.Column,q("design:type",Number)],F.prototype,"key",void 0),U([(0,r.ForeignKey)((()=>ft)),r.Column,q("design:type",Number)],F.prototype,"unavailable_doctor_id",void 0),U([(0,r.BelongsTo)((()=>ft)),q("design:type",Object)],F.prototype,"unavailableDoctor",void 0),U([r.Column,q("design:type",Date)],F.prototype,"updated_at",void 0),U([r.Column,q("design:type",Number)],F.prototype,"updated_by",void 0),U([(0,r.BelongsTo)((()=>le)),q("design:type",Object)],F.prototype,"user",void 0),U([(0,r.ForeignKey)((()=>le)),r.Column,q("design:type",Number)],F.prototype,"user_id",void 0),F=U([(0,r.Table)({modelName:"sch_unavailable_doctor_notications",tableName:"sch_unavailable_doctor_notications",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],F);var M=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},$=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let V=class extends r.Model{};M([(0,r.HasMany)((()=>Dt)),$("design:type",Object)],V.prototype,"actionPreferencesFacilityLocations",void 0),M([(0,r.BelongsTo)((()=>z)),$("design:type",Object)],V.prototype,"actionPreferencesType",void 0),M([r.Column,$("design:type",Date)],V.prototype,"created_at",void 0),M([r.Column,$("design:type",Number)],V.prototype,"created_by",void 0),M([r.Column,$("design:type",Date)],V.prototype,"deleted_at",void 0),M([r.Column,$("design:type",Number)],V.prototype,"facility_location_type",void 0),M([r.PrimaryKey,r.AutoIncrement,r.Column,$("design:type",Number)],V.prototype,"id",void 0),M([r.Column,$("design:type",Number)],V.prototype,"key",void 0),M([(0,r.ForeignKey)((()=>z)),r.Column,$("design:type",Number)],V.prototype,"type_id",void 0),M([r.Column,$("design:type",Date)],V.prototype,"updated_at",void 0),M([r.Column,$("design:type",Number)],V.prototype,"updated_by",void 0),M([r.Column,$("design:type",Number)],V.prototype,"user_id",void 0),V=M([(0,r.Table)({modelName:"sch_action_preferences",tableName:"sch_action_preferences",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],V);var x=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},K=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let z=class extends r.Model{};x([r.Column,K("design:type",Date)],z.prototype,"created_at",void 0),x([r.Column,K("design:type",Number)],z.prototype,"created_by",void 0),x([r.Column,K("design:type",Date)],z.prototype,"deleted_at",void 0),x([r.PrimaryKey,r.AutoIncrement,r.Column,K("design:type",Number)],z.prototype,"id",void 0),x([r.Column,K("design:type",String)],z.prototype,"name",void 0),x([r.Column,K("design:type",String)],z.prototype,"slug",void 0),x([r.Column,K("design:type",Date)],z.prototype,"updated_at",void 0),x([r.Column,K("design:type",Number)],z.prototype,"updated_by",void 0),z=x([(0,r.Table)({modelName:"sch_action_preferences_types",tableName:"sch_action_preferences_types",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],z);var G=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},H=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Y=class extends r.Model{};G([r.PrimaryKey,r.AutoIncrement,r.Column,H("design:type",Number)],Y.prototype,"id",void 0),G([(0,r.BelongsTo)((()=>J)),H("design:type",Object)],Y.prototype,"schAppointmentTypes",void 0),G([(0,r.ForeignKey)((()=>J)),r.Column,H("design:type",Number)],Y.prototype,"appointment_type_id",void 0),G([r.Column,H("design:type",Date)],Y.prototype,"created_at",void 0),G([r.Column,H("design:type",Number)],Y.prototype,"created_by",void 0),G([r.Column,H("design:type",Date)],Y.prototype,"deleted_at",void 0),G([(0,r.BelongsTo)((()=>ue)),H("design:type",Object)],Y.prototype,"speciality",void 0),G([(0,r.ForeignKey)((()=>ue)),r.Column,H("design:type",Number)],Y.prototype,"speciality_id",void 0),G([r.Column,H("design:type",Date)],Y.prototype,"updated_at",void 0),G([r.Column,H("design:type",Number)],Y.prototype,"updated_by",void 0),G([r.Column,H("design:type",Number)],Y.prototype,"position",void 0),G([r.Column,H("design:type",Boolean)],Y.prototype,"is_required",void 0),G([r.Column,H("design:type",Boolean)],Y.prototype,"is_multiple",void 0),G([r.Column,H("design:type",Boolean)],Y.prototype,"is_editable",void 0),G([r.Column,H("design:type",Boolean)],Y.prototype,"is_multiple_same_day",void 0),G([r.Column,H("design:type",Boolean)],Y.prototype,"allow_multiple_cpt_codes",void 0),Y=G([(0,r.Table)({modelName:"speciality_visit_types",tableName:"speciality_visit_types",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],Y);var W=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Q=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let J=class extends r.Model{};W([r.Column,Q("design:type",Boolean)],J.prototype,"avoid_checkedin",void 0),W([r.Column,Q("design:type",Date)],J.prototype,"created_at",void 0),W([r.Column,Q("design:type",String)],J.prototype,"qualifier",void 0),W([r.Column,Q("design:type",Number)],J.prototype,"created_by",void 0),W([r.Column,Q("design:type",Date)],J.prototype,"deleted_at",void 0),W([r.Column,Q("design:type",String)],J.prototype,"description",void 0),W([r.Column,Q("design:type",Boolean)],J.prototype,"enable_cpt_codes",void 0),W([r.PrimaryKey,r.AutoIncrement,r.Column,Q("design:type",Number)],J.prototype,"id",void 0),W([r.Column,Q("design:type",Boolean)],J.prototype,"is_all_cpt_codes",void 0),W([r.Column,Q("design:type",String)],J.prototype,"name",void 0),W([r.Column,Q("design:type",String)],J.prototype,"slug",void 0),W([r.Column,Q("design:type",Date)],J.prototype,"updated_at",void 0),W([r.Column,Q("design:type",Number)],J.prototype,"updated_by",void 0),W([(0,r.HasMany)((()=>Y)),Q("design:type",Object)],J.prototype,"specialityVisitType",void 0),J=W([(0,r.Table)({modelName:"sch_appointment_types",tableName:"sch_appointment_types",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],J);var X=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Z=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let ee=class extends r.Model{};X([r.Column,Z("design:type",Date)],ee.prototype,"created_at",void 0),X([r.Column,Z("design:type",Number)],ee.prototype,"created_by",void 0),X([r.Column,Z("design:type",Date)],ee.prototype,"deleted_at",void 0),X([r.PrimaryKey,r.AutoIncrement,r.Column,Z("design:type",Number)],ee.prototype,"id",void 0),X([r.Column,Z("design:type",String)],ee.prototype,"name",void 0),X([r.Column,Z("design:type",String)],ee.prototype,"slug",void 0),X([r.Column,Z("design:type",Date)],ee.prototype,"updated_at",void 0),X([r.Column,Z("design:type",Number)],ee.prototype,"updated_by",void 0),ee=X([(0,r.Table)({modelName:"sch_appointment_priorities",tableName:"sch_appointment_priorities",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],ee);var te=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},ie=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let ae=class extends r.Model{};te([r.Column,ie("design:type",Date)],ae.prototype,"created_at",void 0),te([r.Column,ie("design:type",Number)],ae.prototype,"created_by",void 0),te([r.Column,ie("design:type",Date)],ae.prototype,"deleted_at",void 0),te([r.PrimaryKey,r.AutoIncrement,r.Column,ie("design:type",Number)],ae.prototype,"id",void 0),te([r.Column,ie("design:type",String)],ae.prototype,"name",void 0),te([r.Column,ie("design:type",String)],ae.prototype,"slug",void 0),te([r.Column,ie("design:type",Number)],ae.prototype,"type_id",void 0),te([r.Column,ie("design:type",Date)],ae.prototype,"updated_at",void 0),te([r.Column,ie("design:type",Number)],ae.prototype,"updated_by",void 0),ae=te([(0,r.Table)({modelName:"sch_appointment_cancellation_comments",tableName:"sch_appointment_cancellation_comments",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],ae);var ne,oe=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},se=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let le=ne=class extends r.Model{};oe([r.Column,se("design:type",Boolean)],le.prototype,"allow_multiple_assignment",void 0),oe([(0,r.HasMany)((()=>Ze)),se("design:type",Object)],le.prototype,"colorCodes",void 0),oe([r.Column,se("design:type",Date)],le.prototype,"created_at",void 0),oe([(0,r.ForeignKey)((()=>ne)),r.Column,se("design:type",Number)],le.prototype,"created_by",void 0),oe([r.Column,se("design:type",Date)],le.prototype,"deleted_at",void 0),oe([r.Column,se("design:type",String)],le.prototype,"email",void 0),oe([r.PrimaryKey,r.AutoIncrement,r.Column,se("design:type",Number)],le.prototype,"id",void 0),oe([r.Column,se("design:type",Number)],le.prototype,"is_loggedIn",void 0),oe([(0,r.HasOne)((()=>Mt)),se("design:type",Object)],le.prototype,"medicalIdentifiers",void 0),oe([r.Column,se("design:type",String)],le.prototype,"password",void 0),oe([r.Column,se("design:type",String)],le.prototype,"remember_token",void 0),oe([r.Column,se("design:type",String)],le.prototype,"reset_key",void 0),oe([r.Column,se("design:type",Number)],le.prototype,"status",void 0),oe([r.Column,se("design:type",Date)],le.prototype,"updated_at",void 0),oe([(0,r.ForeignKey)((()=>ne)),r.Column,se("design:type",Number)],le.prototype,"updated_by",void 0),oe([(0,r.HasOne)((()=>Ce)),se("design:type",Object)],le.prototype,"userBasicInfo",void 0),oe([(0,r.HasMany)((()=>Ie)),se("design:type",Object)],le.prototype,"userFacilities",void 0),oe([(0,r.HasOne)((()=>re)),se("design:type",Object)],le.prototype,"userPrefrences",void 0),oe([(0,r.HasOne)((()=>je)),se("design:type",Object)],le.prototype,"userRole",void 0),oe([(0,r.HasMany)((()=>Le)),se("design:type",Object)],le.prototype,"userTimings",void 0),le=ne=oe([(0,r.Table)({modelName:"users",tableName:"users",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],le);var de=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},_e=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let re=class extends r.Model{};de([r.Column,_e("design:type",String)],re.prototype,"colorCode",void 0),de([r.Column,_e("design:type",Date)],re.prototype,"created_at",void 0),de([r.Column,_e("design:type",Number)],re.prototype,"created_by",void 0),de([r.Column,_e("design:type",Date)],re.prototype,"deleted_at",void 0),de([r.PrimaryKey,r.AutoIncrement,r.Column,_e("design:type",Number)],re.prototype,"id",void 0),de([r.Column,_e("design:type",String)],re.prototype,"preferences",void 0),de([r.Column,_e("design:type",Date)],re.prototype,"updated_at",void 0),de([r.Column,_e("design:type",Number)],re.prototype,"updated_by",void 0),de([(0,r.ForeignKey)((()=>le)),r.Column,_e("design:type",Number)],re.prototype,"user_id",void 0),re=de([(0,r.Table)({modelName:"user_prefrences",tableName:"user_prefrences",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],re);var ce=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},pe=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let ue=class extends r.Model{};ce([r.Column,pe("design:type",String)],ue.prototype,"comments",void 0),ce([r.Column,pe("design:type",Date)],ue.prototype,"created_at",void 0),ce([(0,r.ForeignKey)((()=>le)),r.Column,pe("design:type",Number)],ue.prototype,"created_by",void 0),ce([r.Column,pe("design:type",String)],ue.prototype,"default_name",void 0),ce([r.Column,pe("design:type",Date)],ue.prototype,"deleted_at",void 0),ce([r.Column,pe("design:type",String)],ue.prototype,"description",void 0),ce([r.Column,pe("design:type",Number)],ue.prototype,"has_app",void 0),ce([r.PrimaryKey,r.AutoIncrement,r.Column,pe("design:type",Number)],ue.prototype,"id",void 0),ce([r.Column,pe("design:type",Number)],ue.prototype,"is_available",void 0),ce([r.Column,pe("design:type",Number)],ue.prototype,"is_create_appointment",void 0),ce([r.Column,pe("design:type",Number)],ue.prototype,"is_defualt",void 0),ce([r.Column,pe("design:type",String)],ue.prototype,"name",void 0),ce([r.Column,pe("design:type",String)],ue.prototype,"qualifier",void 0),ce([r.Column,pe("design:type",Number)],ue.prototype,"over_booking",void 0),ce([r.Column,pe("design:type",String)],ue.prototype,"speciality_key",void 0),ce([r.Column,pe("design:type",Number)],ue.prototype,"time_slot",void 0),ce([r.Column,pe("design:type",Date)],ue.prototype,"updated_at",void 0),ce([(0,r.ForeignKey)((()=>le)),r.Column,pe("design:type",Number)],ue.prototype,"updated_by",void 0),ce([r.Column,pe("design:type",Number)],ue.prototype,"is_multiple_visit",void 0),ce([(0,r.HasMany)((()=>Ie)),pe("design:type",Object)],ue.prototype,"userFacilty",void 0),ce([(0,r.BelongsTo)((()=>le),"created_by"),pe("design:type",Object)],ue.prototype,"created_by_user",void 0),ce([(0,r.BelongsTo)((()=>le),"updated_by"),pe("design:type",Object)],ue.prototype,"updated_by_user",void 0),ce([(0,r.HasOne)((()=>Ke)),pe("design:type",Object)],ue.prototype,"visitSessions",void 0),ce([(0,r.HasMany)((()=>Y)),pe("design:type",Object)],ue.prototype,"specialityVisitType",void 0),ue=ce([(0,r.Table)({modelName:"specialities",tableName:"specialities",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],ue);var me=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},ye=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let he=class extends r.Model{};me([r.Column,ye("design:type",String)],he.prototype,"comment",void 0),me([r.Column,ye("design:type",Date)],he.prototype,"created_at",void 0),me([(0,r.ForeignKey)((()=>le)),r.Column,ye("design:type",Number)],he.prototype,"created_by",void 0),me([r.Column,ye("design:type",Number)],he.prototype,"default",void 0),me([r.Column,ye("design:type",Date)],he.prototype,"deleted_at",void 0),me([r.Column,ye("design:type",String)],he.prototype,"guard_name",void 0),me([r.PrimaryKey,r.AutoIncrement,r.Column,ye("design:type",Number)],he.prototype,"id",void 0),me([r.Column,ye("design:type",Number)],he.prototype,"medical_identifier",void 0),me([(0,r.HasMany)((()=>je)),ye("design:type",Object)],he.prototype,"modelRoles",void 0),me([r.Column,ye("design:type",String)],he.prototype,"name",void 0),me([r.Column,ye("design:type",String)],he.prototype,"qualifier",void 0),me([r.Column,ye("design:type",String)],he.prototype,"slug",void 0),me([r.Column,ye("design:type",Date)],he.prototype,"updated_at",void 0),me([r.Column,ye("design:type",Boolean)],he.prototype,"has_supervisor",void 0),me([r.Column,ye("design:type",Number)],he.prototype,"updated_by",void 0),he=me([(0,r.Table)({modelName:"roles",tableName:"roles",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],he);var fe=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},ve=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let ge=class extends r.Model{};fe([r.Column,ve("design:type",Date)],ge.prototype,"created_at",void 0),fe([r.Column,ve("design:type",Number)],ge.prototype,"created_by",void 0),fe([r.Column,ve("design:type",Number)],ge.prototype,"day_id",void 0),fe([r.Column,ve("design:type",Date)],ge.prototype,"deleted_at",void 0),fe([r.Column,ve("design:type",Date)],ge.prototype,"end_time",void 0),fe([r.Column,ve("design:type",Date)],ge.prototype,"end_time_isb",void 0),fe([(0,r.ForeignKey)((()=>Oe)),r.Column,ve("design:type",Number)],ge.prototype,"facility_location_id",void 0),fe([r.PrimaryKey,r.AutoIncrement,r.Column,ve("design:type",Number)],ge.prototype,"id",void 0),fe([r.Column,ve("design:type",Date)],ge.prototype,"start_time",void 0),fe([r.Column,ve("design:type",Date)],ge.prototype,"start_time_isb",void 0),fe([r.Column,ve("design:type",Number)],ge.prototype,"time_zone",void 0),fe([r.Column,ve("design:type",String)],ge.prototype,"time_zone_string",void 0),fe([r.Column,ve("design:type",Date)],ge.prototype,"updated_at",void 0),fe([r.Column,ve("design:type",Number)],ge.prototype,"updated_by",void 0),ge=fe([(0,r.Table)({modelName:"facility_timings",tableName:"facility_timings",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],ge);var be=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Se=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Ie=class extends r.Model{};be([r.Column,Se("design:type",Date)],Ie.prototype,"created_at",void 0),be([r.Column,Se("design:type",Number)],Ie.prototype,"created_by",void 0),be([r.Column,Se("design:type",Date)],Ie.prototype,"deleted_at",void 0),be([(0,r.ForeignKey)((()=>Oe)),r.Column,Se("design:type",Number)],Ie.prototype,"facility_location_id",void 0),be([(0,r.BelongsTo)((()=>Oe)),Se("design:type",Object)],Ie.prototype,"facilityLocation",void 0),be([r.PrimaryKey,r.AutoIncrement,r.Column,Se("design:type",Number)],Ie.prototype,"id",void 0),be([r.Column,Se("design:type",Number)],Ie.prototype,"is_manual_specialty",void 0),be([r.Column,Se("design:type",Number)],Ie.prototype,"is_primary",void 0),be([(0,r.BelongsTo)((()=>ue)),Se("design:type",Object)],Ie.prototype,"speciality",void 0),be([(0,r.ForeignKey)((()=>ue)),r.Column,Se("design:type",Number)],Ie.prototype,"speciality_id",void 0),be([r.Column,Se("design:type",Date)],Ie.prototype,"updated_at",void 0),be([r.Column,Se("design:type",Number)],Ie.prototype,"updated_by",void 0),be([(0,r.ForeignKey)((()=>le)),r.Column,Se("design:type",Number)],Ie.prototype,"user_id",void 0),be([(0,r.BelongsTo)((()=>le)),Se("design:type",Object)],Ie.prototype,"users",void 0),Ie=be([(0,r.Table)({modelName:"user_facility",tableName:"user_facility",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],Ie);var De=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},we=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Oe=class extends r.Model{};De([r.Column,we("design:type",String)],Oe.prototype,"address",void 0),De([r.Column,we("design:type",String)],Oe.prototype,"cell_no",void 0),De([r.Column,we("design:type",String)],Oe.prototype,"city",void 0),De([r.Column,we("design:type",Date)],Oe.prototype,"created_at",void 0),De([(0,r.ForeignKey)((()=>le)),r.Column,we("design:type",Number)],Oe.prototype,"created_by",void 0),De([r.Column,we("design:type",String)],Oe.prototype,"day_list",void 0),De([r.Column,we("design:type",Date)],Oe.prototype,"deleted_at",void 0),De([r.Column,we("design:type",String)],Oe.prototype,"email",void 0),De([r.Column,we("design:type",String)],Oe.prototype,"ext_no",void 0),De([r.Column,we("design:type",String)],Oe.prototype,"qualifier",void 0),De([(0,r.BelongsTo)((()=>Ut)),we("design:type",Object)],Oe.prototype,"facility",void 0),De([(0,r.ForeignKey)((()=>Ut)),r.Column,we("design:type",Number)],Oe.prototype,"facility_id",void 0),De([(0,r.HasMany)((()=>ge)),we("design:type",Object)],Oe.prototype,"faciltyTiming",void 0),De([r.Column,we("design:type",String)],Oe.prototype,"fax",void 0),De([r.Column,we("design:type",String)],Oe.prototype,"floor",void 0),De([r.PrimaryKey,r.AutoIncrement,r.Column,we("design:type",Number)],Oe.prototype,"id",void 0),De([r.Column,we("design:type",Number)],Oe.prototype,"is_main",void 0),De([r.Column,we("design:type",Number)],Oe.prototype,"lat",void 0),De([r.Column,we("design:type",Number)],Oe.prototype,"long",void 0),De([r.Column,we("design:type",String)],Oe.prototype,"name",void 0),De([r.Column,we("design:type",Date)],Oe.prototype,"office_hours_end",void 0),De([r.Column,we("design:type",Date)],Oe.prototype,"office_hours_start",void 0),De([r.Column,we("design:type",String)],Oe.prototype,"phone",void 0),De([r.Column,we("design:type",Number)],Oe.prototype,"place_of_service_id",void 0),De([r.Column,we("design:type",String)],Oe.prototype,"region_id",void 0),De([r.Column,we("design:type",Number)],Oe.prototype,"same_as_provider",void 0),De([r.Column,we("design:type",String)],Oe.prototype,"state",void 0),De([r.Column,we("design:type",Date)],Oe.prototype,"updated_at",void 0),De([(0,r.ForeignKey)((()=>le)),r.Column,we("design:type",Number)],Oe.prototype,"updated_by",void 0),De([(0,r.BelongsTo)((()=>le),"created_by"),we("design:type",Object)],Oe.prototype,"created_by_user",void 0),De([(0,r.BelongsTo)((()=>le),"updated_by"),we("design:type",Object)],Oe.prototype,"updated_by_user",void 0),De([(0,r.HasMany)((()=>Ie)),we("design:type",Object)],Oe.prototype,"userFacilities",void 0),De([r.Column,we("design:type",String)],Oe.prototype,"zip",void 0),Oe=De([(0,r.Table)({modelName:"facility_locations",tableName:"facility_locations",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],Oe);var Te,Ae=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Ne=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};!function(e){e[e.M=0]="M",e[e.F=1]="F",e[e.X=2]="X"}(Te||(Te={}));let Ce=class extends r.Model{};Ae([r.Column,Ne("design:type",String)],Ce.prototype,"address",void 0),Ae([r.Column,Ne("design:type",String)],Ce.prototype,"apartment_suite",void 0),Ae([r.Column,Ne("design:type",Number)],Ce.prototype,"area_id",void 0),Ae([r.Column,Ne("design:type",String)],Ce.prototype,"biography",void 0),Ae([r.Column,Ne("design:type",String)],Ce.prototype,"cell_no",void 0),Ae([r.Column,Ne("design:type",String)],Ce.prototype,"city",void 0),Ae([r.Column,Ne("design:type",Date)],Ce.prototype,"created_at",void 0),Ae([r.Column,Ne("design:type",Number)],Ce.prototype,"created_by",void 0),Ae([r.Column,Ne("design:type",String)],Ce.prototype,"date_of_birth",void 0),Ae([r.Column,Ne("design:type",Date)],Ce.prototype,"deleted_at",void 0),Ae([r.Column,Ne("design:type",Number)],Ce.prototype,"department_id",void 0),Ae([r.Column,Ne("design:type",Number)],Ce.prototype,"designation_id",void 0),Ae([r.Column,Ne("design:type",String)],Ce.prototype,"emergency_phone",void 0),Ae([r.Column,Ne("design:type",Number)],Ce.prototype,"employed_by_id",void 0),Ae([r.Column,Ne("design:type",Number)],Ce.prototype,"employment_type_id",void 0),Ae([r.Column,Ne("design:type",String)],Ce.prototype,"extension",void 0),Ae([r.Column,Ne("design:type",String)],Ce.prototype,"fax",void 0),Ae([r.Column,Ne("design:type",Number)],Ce.prototype,"file_id",void 0),Ae([r.Column,Ne("design:type",String)],Ce.prototype,"first_name",void 0),Ae([r.Column,Ne("design:type",Date)],Ce.prototype,"from",void 0),Ae([r.Column,Ne("design:type",Number)],Ce.prototype,"gender",void 0),Ae([r.Column,Ne("design:type",Date)],Ce.prototype,"hiring_date",void 0),Ae([r.PrimaryKey,r.AutoIncrement,r.Column,Ne("design:type",Number)],Ce.prototype,"id",void 0),Ae([r.Column,Ne("design:type",String)],Ce.prototype,"last_name",void 0),Ae([r.Column,Ne("design:type",String)],Ce.prototype,"middle_name",void 0),Ae([r.Column,Ne("design:type",String)],Ce.prototype,"profile_pic",void 0),Ae([r.Column,Ne("design:type",String)],Ce.prototype,"profile_pic_url",void 0),Ae([r.Column,Ne("design:type",String)],Ce.prototype,"social_security",void 0),Ae([r.Column,Ne("design:type",String)],Ce.prototype,"state",void 0),Ae([r.Column,Ne("design:type",String)],Ce.prototype,"title",void 0),Ae([r.Column,Ne("design:type",Date)],Ce.prototype,"to",void 0),Ae([r.Column,Ne("design:type",Date)],Ce.prototype,"updated_at",void 0),Ae([r.Column,Ne("design:type",Number)],Ce.prototype,"updated_by",void 0),Ae([(0,r.ForeignKey)((()=>le)),r.Column,Ne("design:type",Number)],Ce.prototype,"user_id",void 0),Ae([r.Column,Ne("design:type",String)],Ce.prototype,"work_phone",void 0),Ae([r.Column,Ne("design:type",String)],Ce.prototype,"zip",void 0),Ce=Ae([(0,r.Table)({modelName:"user_basic_info",tableName:"user_basic_info",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],Ce);var Re=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Ee=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Le=class extends r.Model{};Re([r.Column,Ee("design:type",Date)],Le.prototype,"created_at",void 0),Re([r.Column,Ee("design:type",Number)],Le.prototype,"created_by",void 0),Re([r.Column,Ee("design:type",Number)],Le.prototype,"day_id",void 0),Re([r.Column,Ee("design:type",Date)],Le.prototype,"deleted_at",void 0),Re([r.Column,Ee("design:type",Date)],Le.prototype,"end_time",void 0),Re([r.Column,Ee("design:type",Date)],Le.prototype,"end_time_isb",void 0),Re([(0,r.ForeignKey)((()=>Oe)),r.Column,Ee("design:type",Number)],Le.prototype,"facility_location_id",void 0),Re([r.PrimaryKey,r.AutoIncrement,r.Column,Ee("design:type",Number)],Le.prototype,"id",void 0),Re([r.Column,Ee("design:type",Number)],Le.prototype,"specialty_id",void 0),Re([r.Column,Ee("design:type",Date)],Le.prototype,"start_time",void 0),Re([r.Column,Ee("design:type",Date)],Le.prototype,"start_time_isb",void 0),Re([r.Column,Ee("design:type",Number)],Le.prototype,"time_zone",void 0),Re([r.Column,Ee("design:type",String)],Le.prototype,"time_zone_string",void 0),Re([r.Column,Ee("design:type",Date)],Le.prototype,"updated_at",void 0),Re([r.Column,Ee("design:type",Number)],Le.prototype,"updated_by",void 0),Re([(0,r.ForeignKey)((()=>le)),r.Column,Ee("design:type",Number)],Le.prototype,"user_id",void 0),Le=Re([(0,r.Table)({modelName:"user_timings",tableName:"user_timings",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],Le);var ke=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Pe=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let je=class extends r.Model{};ke([r.PrimaryKey,(0,r.ForeignKey)((()=>le)),r.Column,Pe("design:type",Number)],je.prototype,"model_id",void 0),ke([r.Column,Pe("design:type",String)],je.prototype,"model_type",void 0),ke([(0,r.BelongsTo)((()=>he)),Pe("design:type",Object)],je.prototype,"role",void 0),ke([r.PrimaryKey,(0,r.ForeignKey)((()=>he)),r.Column,Pe("design:type",Number)],je.prototype,"role_id",void 0),ke([(0,r.BelongsTo)((()=>le)),Pe("design:type",Object)],je.prototype,"user",void 0),je=ke([(0,r.Table)({modelName:"model_has_roles",tableName:"model_has_roles",timestamps:!1})],je);var Be=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Ue=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let qe=class extends r.Model{};Be([(0,r.HasMany)((()=>He)),Ue("design:type",Object)],qe.prototype,"appointments",void 0),Be([(0,r.ForeignKey)((()=>ot)),r.Column,Ue("design:type",Number)],qe.prototype,"available_doctor_id",void 0),Be([(0,r.ForeignKey)((()=>it)),r.Column,Ue("design:type",Number)],qe.prototype,"available_speciality_id",void 0),Be([(0,r.BelongsTo)((()=>ot)),Ue("design:type",Object)],qe.prototype,"availableDoctor",void 0),Be([(0,r.BelongsTo)((()=>it)),Ue("design:type",Object)],qe.prototype,"availableSpeciality",void 0),Be([r.Column,Ue("design:type",Date)],qe.prototype,"created_at",void 0),Be([r.Column,Ue("design:type",Number)],qe.prototype,"created_by",void 0),Be([r.Column,Ue("design:type",Date)],qe.prototype,"deleted_at",void 0),Be([(0,r.ForeignKey)((()=>Xt)),r.Column,Ue("design:type",Number)],qe.prototype,"doctor_method_id",void 0),Be([r.Column,Ue("design:type",Date)],qe.prototype,"end_date",void 0),Be([r.PrimaryKey,r.AutoIncrement,r.Column,Ue("design:type",Number)],qe.prototype,"id",void 0),Be([r.Column,Ue("design:type",Number)],qe.prototype,"key",void 0),Be([r.Column,Ue("design:type",Number)],qe.prototype,"no_of_doctors",void 0),Be([r.Column,Ue("design:type",Number)],qe.prototype,"no_of_slots",void 0),Be([r.Column,Ue("design:type",Date)],qe.prototype,"start_date",void 0),Be([r.Column,Ue("design:type",Date)],qe.prototype,"updated_at",void 0),Be([r.Column,Ue("design:type",Number)],qe.prototype,"updated_by",void 0),qe=Be([(0,r.Table)({modelName:"sch_recurrence_date_lists",tableName:"sch_recurrence_date_lists",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],qe);var Fe=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Me=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let $e=class extends r.Model{};Fe([r.Column,Me("design:type",String)],$e.prototype,"comments",void 0),Fe([r.Column,Me("design:type",Date)],$e.prototype,"created_at",void 0),Fe([r.Column,Me("design:type",Date)],$e.prototype,"deleted_at",void 0),Fe([r.Column,Me("design:type",String)],$e.prototype,"description",void 0),Fe([r.PrimaryKey,r.AutoIncrement,r.Column,Me("design:type",Number)],$e.prototype,"id",void 0),Fe([r.Column,Me("design:type",String)],$e.prototype,"name",void 0),Fe([r.Column,Me("design:type",String)],$e.prototype,"slug",void 0),Fe([r.Column,Me("design:type",Date)],$e.prototype,"updated_at",void 0),Fe([r.Column,Me("design:type",Number)],$e.prototype,"updated_by",void 0),$e=Fe([(0,r.Table)({modelName:"visit_session_states",tableName:"visit_session_states",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],$e);var Ve=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},xe=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Ke=class extends r.Model{};Ve([(0,r.ForeignKey)((()=>He)),r.Column,xe("design:type",Number)],Ke.prototype,"appointment_id",void 0),Ve([r.Column,xe("design:type",Number)],Ke.prototype,"appointment_type_id",void 0),Ve([r.Column,xe("design:type",Number)],Ke.prototype,"case_id",void 0),Ve([r.Column,xe("design:type",String)],Ke.prototype,"cpt_codes_comment",void 0),Ve([r.Column,xe("design:type",Date)],Ke.prototype,"created_at",void 0),Ve([r.Column,xe("design:type",Number)],Ke.prototype,"created_by",void 0),Ve([r.Column,xe("design:type",Date)],Ke.prototype,"deleted_at",void 0),Ve([r.Column,xe("design:type",Number)],Ke.prototype,"doctor_id",void 0),Ve([r.Column,xe("design:type",Number)],Ke.prototype,"doctor_signature_id",void 0),Ve([r.Column,xe("design:type",Boolean)],Ke.prototype,"document_uploaded",void 0),Ve([r.Column,xe("design:type",Number)],Ke.prototype,"facility_location_id",void 0),Ve([r.Column,xe("design:type",String)],Ke.prototype,"icd_codes_comment",void 0),Ve([r.PrimaryKey,r.AutoIncrement,r.Column,xe("design:type",Number)],Ke.prototype,"id",void 0),Ve([r.Column,xe("design:type",Boolean)],Ke.prototype,"is_amended",void 0),Ve([r.Column,xe("design:type",Date)],Ke.prototype,"last_uploaded_document_date",void 0),Ve([r.Column,xe("design:type",Number)],Ke.prototype,"patient_id",void 0),Ve([r.Column,xe("design:type",Number)],Ke.prototype,"patient_signature_id",void 0),Ve([(0,r.BelongsTo)((()=>ue)),xe("design:type",Object)],Ke.prototype,"speciality",void 0),Ve([(0,r.ForeignKey)((()=>ue)),r.Column,xe("design:type",Number)],Ke.prototype,"speciality_id",void 0),Ve([r.Column,xe("design:type",Number)],Ke.prototype,"template_id",void 0),Ve([r.Column,xe("design:type",String)],Ke.prototype,"template_type",void 0),Ve([r.Column,xe("design:type",Date)],Ke.prototype,"updated_at",void 0),Ve([r.Column,xe("design:type",Number)],Ke.prototype,"updated_by",void 0),Ve([r.Column,xe("design:type",Date)],Ke.prototype,"visit_date",void 0),Ve([(0,r.ForeignKey)((()=>$e)),r.Column,xe("design:type",Number)],Ke.prototype,"visit_session_state_id",void 0),Ve([(0,r.BelongsTo)((()=>$e)),xe("design:type",Object)],Ke.prototype,"visitState",void 0),Ke=Ve([(0,r.Table)({modelName:"visit_sessions",tableName:"visit_sessions",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],Ke);var ze=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Ge=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let He=class extends r.Model{};ze([r.Column,Ge("design:type",String)],He.prototype,"action_performed",void 0),ze([r.Column,Ge("design:type",String)],He.prototype,"appointment_title",void 0),ze([(0,r.HasMany)((()=>Ni)),Ge("design:type",Object)],He.prototype,"appointmentCptCodes",void 0),ze([(0,r.BelongsTo)((()=>g)),Ge("design:type",Object)],He.prototype,"appointmentStatus",void 0),ze([(0,r.BelongsTo)((()=>J)),Ge("design:type",Object)],He.prototype,"appointmentType",void 0),ze([(0,r.HasOne)((()=>Ke)),Ge("design:type",Object)],He.prototype,"appointmentVisit",void 0),ze([(0,r.HasMany)((()=>Ke)),Ge("design:type",Object)],He.prototype,"appointmentVisitSession",void 0),ze([(0,r.ForeignKey)((()=>ot)),r.Column,Ge("design:type",Number)],He.prototype,"available_doctor_id",void 0),ze([(0,r.ForeignKey)((()=>it)),r.Column,Ge("design:type",Number)],He.prototype,"available_speciality_id",void 0),ze([(0,r.BelongsTo)((()=>ot)),Ge("design:type",Object)],He.prototype,"availableDoctor",void 0),ze([(0,r.BelongsTo)((()=>it)),Ge("design:type",Object)],He.prototype,"availableSpeciality",void 0),ze([r.Column,Ge("design:type",Boolean)],He.prototype,"billable",void 0),ze([r.Column,Ge("design:type",Boolean)],He.prototype,"by_health_app",void 0),ze([r.Column,Ge("design:type",Boolean)],He.prototype,"cancelled",void 0),ze([r.Column,Ge("design:type",String)],He.prototype,"cancelled_comments",void 0),ze([(0,r.BelongsTo)((()=>ti)),Ge("design:type",Object)],He.prototype,"case",void 0),ze([(0,r.ForeignKey)((()=>ti)),r.Column,Ge("design:type",Number)],He.prototype,"case_id",void 0),ze([(0,r.ForeignKey)((()=>Wt)),r.Column,Ge("design:type",Number)],He.prototype,"case_type_id",void 0),ze([(0,r.BelongsTo)((()=>Wt)),Ge("design:type",Object)],He.prototype,"caseType",void 0),ze([r.Column,Ge("design:type",Boolean)],He.prototype,"cd_image",void 0),ze([r.Column,Ge("design:type",String)],He.prototype,"comments",void 0),ze([r.Column,Ge("design:type",Number)],He.prototype,"confirmation_status",void 0),ze([r.Column,Ge("design:type",Date)],He.prototype,"created_at",void 0),ze([r.Column,Ge("design:type",Number)],He.prototype,"created_by",void 0),ze([(0,r.ForeignKey)((()=>qe)),r.Column,Ge("design:type",Number)],He.prototype,"date_list_id",void 0),ze([(0,r.BelongsTo)((()=>qe)),Ge("design:type",Object)],He.prototype,"dateList",void 0),ze([r.Column,Ge("design:type",Date)],He.prototype,"deleted_at",void 0),ze([r.Column,Ge("design:type",Date)],He.prototype,"evaluation_date_time",void 0),ze([r.PrimaryKey,r.AutoIncrement,r.Column,Ge("design:type",Number)],He.prototype,"id",void 0),ze([r.Column,Ge("design:type",Boolean)],He.prototype,"is_active",void 0),ze([r.Column,Ge("design:type",Boolean)],He.prototype,"is_redo",void 0),ze([r.Column,Ge("design:type",Boolean)],He.prototype,"is_soft_registered",void 0),ze([r.Column,Ge("design:type",Boolean)],He.prototype,"is_speciality_base",void 0),ze([r.Column,Ge("design:type",Boolean)],He.prototype,"is_transportation",void 0),ze([r.Column,Ge("design:type",Number)],He.prototype,"key",void 0),ze([(0,r.HasMany)((()=>B)),Ge("design:type",Object)],He.prototype,"kioskCasePatientSessions",void 0),ze([(0,r.ForeignKey)((()=>Oe)),r.Column,Ge("design:type",Number)],He.prototype,"origin_facility_id",void 0),ze([(0,r.BelongsTo)((()=>Oe),"origin_facility_id"),Ge("design:type",Object)],He.prototype,"originFacility",void 0),ze([(0,r.BelongsTo)((()=>Et)),Ge("design:type",Object)],He.prototype,"patient",void 0),ze([(0,r.ForeignKey)((()=>Et)),r.Column,Ge("design:type",Number)],He.prototype,"patient_id",void 0),ze([(0,r.HasOne)((()=>B)),Ge("design:type",Object)],He.prototype,"patientSessions",void 0),ze([(0,r.BelongsTo)((()=>Ui)),Ge("design:type",Object)],He.prototype,"physicianClinic",void 0),ze([(0,r.ForeignKey)((()=>Ui)),r.Column,Ge("design:type",Number)],He.prototype,"physician_id",void 0),ze([(0,r.BelongsTo)((()=>ee)),Ge("design:type",Object)],He.prototype,"priority",void 0),ze([(0,r.ForeignKey)((()=>ee)),r.Column,Ge("design:type",Number)],He.prototype,"priority_id",void 0),ze([r.Column,Ge("design:type",Boolean)],He.prototype,"pushed_to_front_desk",void 0),ze([r.Column,Ge("design:type",Boolean)],He.prototype,"pushed_to_front_desk_comments",void 0),ze([(0,r.ForeignKey)((()=>le)),r.Column,Ge("design:type",Number)],He.prototype,"reading_provider_id",void 0),ze([(0,r.BelongsTo)((()=>le)),Ge("design:type",Object)],He.prototype,"readingProvider",void 0),ze([r.Column,Ge("design:type",Date)],He.prototype,"scheduled_date_time",void 0),ze([(0,r.ForeignKey)((()=>g)),r.Column,Ge("design:type",Number)],He.prototype,"status_id",void 0),ze([(0,r.ForeignKey)((()=>Oe)),r.Column,Ge("design:type",Number)],He.prototype,"target_facility_id",void 0),ze([(0,r.BelongsTo)((()=>Oe),"target_facility_id"),Ge("design:type",Object)],He.prototype,"targetFacility",void 0),ze([(0,r.BelongsTo)((()=>le)),Ge("design:type",Object)],He.prototype,"technician",void 0),ze([(0,r.ForeignKey)((()=>le)),r.Column,Ge("design:type",Number)],He.prototype,"technician_id",void 0),ze([r.Column,Ge("design:type",Number)],He.prototype,"time_slots",void 0),ze([(0,r.HasMany)((()=>gi)),Ge("design:type",Object)],He.prototype,"transportations",void 0),ze([(0,r.ForeignKey)((()=>J)),r.Column,Ge("design:type",Number)],He.prototype,"type_id",void 0),ze([r.Column,Ge("design:type",Date)],He.prototype,"updated_at",void 0),ze([(0,r.ForeignKey)((()=>le)),r.Column,Ge("design:type",Number)],He.prototype,"updated_by",void 0),ze([(0,r.BelongsTo)((()=>le),"updated_by"),Ge("design:type",Object)],He.prototype,"updatedBy",void 0),ze([(0,r.HasOne)((()=>Ke)),Ge("design:type",Object)],He.prototype,"visitSessions",void 0),He=ze([(0,r.Table)({modelName:"sch_appointments",tableName:"sch_appointments",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],He);var Ye=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},We=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Qe=class extends r.Model{};Ye([r.Column,We("design:type",Date)],Qe.prototype,"created_at",void 0),Ye([r.Column,We("design:type",Number)],Qe.prototype,"created_by",void 0),Ye([r.Column,We("design:type",Date)],Qe.prototype,"deleted_at",void 0),Ye([r.PrimaryKey,r.AutoIncrement,r.Column,We("design:type",Number)],Qe.prototype,"id",void 0),Ye([r.Column,We("design:type",String)],Qe.prototype,"name",void 0),Ye([r.Column,We("design:type",String)],Qe.prototype,"slug",void 0),Ye([r.Column,We("design:type",Date)],Qe.prototype,"updated_at",void 0),Ye([r.Column,We("design:type",Number)],Qe.prototype,"updated_by",void 0),Qe=Ye([(0,r.Table)({modelName:"sch_color_code_types",tableName:"sch_color_code_types",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],Qe);var Je=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Xe=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Ze=class extends r.Model{};Je([r.Column,Xe("design:type",String)],Ze.prototype,"code",void 0),Je([r.Column,Xe("design:type",Date)],Ze.prototype,"created_at",void 0),Je([r.Column,Xe("design:type",Number)],Ze.prototype,"created_by",void 0),Je([r.Column,Xe("design:type",Date)],Ze.prototype,"deleted_at",void 0),Je([r.PrimaryKey,r.AutoIncrement,r.Column,Xe("design:type",Number)],Ze.prototype,"id",void 0),Je([r.Column,Xe("design:type",Number)],Ze.prototype,"key",void 0),Je([r.Column,Xe("design:type",Number)],Ze.prototype,"object_id",void 0),Je([(0,r.BelongsTo)((()=>Qe)),Xe("design:type",Object)],Ze.prototype,"type",void 0),Je([(0,r.ForeignKey)((()=>Qe)),r.Column,Xe("design:type",Number)],Ze.prototype,"type_id",void 0),Je([r.Column,Xe("design:type",Date)],Ze.prototype,"updated_at",void 0),Je([r.Column,Xe("design:type",Number)],Ze.prototype,"updated_by",void 0),Je([(0,r.BelongsTo)((()=>le)),Xe("design:type",Object)],Ze.prototype,"user",void 0),Je([(0,r.ForeignKey)((()=>le)),r.Column,Xe("design:type",Number)],Ze.prototype,"user_id",void 0),Ze=Je([(0,r.Table)({modelName:"sch_color_codes",tableName:"sch_color_codes",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],Ze);var et=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},tt=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let it=class extends r.Model{};et([(0,r.HasMany)((()=>He)),tt("design:type",Object)],it.prototype,"appointments",void 0),et([(0,r.HasMany)((()=>ot)),tt("design:type",Object)],it.prototype,"availableDoctors",void 0),et([(0,r.HasOne)((()=>ot)),tt("design:type",Object)],it.prototype,"availableSpecialityDoctor",void 0),et([r.Column,tt("design:type",Date)],it.prototype,"created_at",void 0),et([r.Column,tt("design:type",Number)],it.prototype,"created_by",void 0),et([(0,r.HasMany)((()=>qe)),tt("design:type",Object)],it.prototype,"dateList",void 0),et([(0,r.HasMany)((()=>mt)),tt("design:type",Object)],it.prototype,"dayList",void 0),et([r.Column,tt("design:type",Date)],it.prototype,"deleted_at",void 0),et([r.Column,tt("design:type",Number)],it.prototype,"end_after_occurences",void 0),et([r.Column,tt("design:type",Date)],it.prototype,"end_date",void 0),et([r.Column,tt("design:type",String)],it.prototype,"end_date_for_recurrence",void 0),et([(0,r.ForeignKey)((()=>Oe)),r.Column,tt("design:type",Number)],it.prototype,"facility_location_id",void 0),et([(0,r.BelongsTo)((()=>Oe)),tt("design:type",Object)],it.prototype,"facilityLocation",void 0),et([r.PrimaryKey,r.AutoIncrement,r.Column,tt("design:type",Number)],it.prototype,"id",void 0),et([r.Column,tt("design:type",Number)],it.prototype,"key",void 0),et([r.Column,tt("design:type",Number)],it.prototype,"no_of_doctors",void 0),et([r.Column,tt("design:type",Number)],it.prototype,"no_of_slots",void 0),et([r.Column,tt("design:type",Number)],it.prototype,"number_of_entries",void 0),et([(0,r.ForeignKey)((()=>dt)),r.Column,tt("design:type",Number)],it.prototype,"recurrence_ending_criteria_id",void 0),et([(0,r.BelongsTo)((()=>ue)),tt("design:type",Object)],it.prototype,"speciality",void 0),et([(0,r.ForeignKey)((()=>ue)),r.Column,tt("design:type",Number)],it.prototype,"speciality_id",void 0),et([r.Column,tt("design:type",Date)],it.prototype,"start_date",void 0),et([r.Column,tt("design:type",Date)],it.prototype,"updated_at",void 0),et([r.Column,tt("design:type",Number)],it.prototype,"updated_by",void 0),it=et([(0,r.Table)({modelName:"sch_available_specialities",tableName:"sch_available_specialities",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],it);var at=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},nt=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let ot=class extends r.Model{};at([(0,r.HasMany)((()=>He)),nt("design:type",Object)],ot.prototype,"appointments",void 0),at([(0,r.ForeignKey)((()=>it)),r.Column,nt("design:type",Number)],ot.prototype,"available_speciality_id",void 0),at([(0,r.BelongsTo)((()=>it)),nt("design:type",Object)],ot.prototype,"availableSpeciality",void 0),at([r.Column,nt("design:type",Date)],ot.prototype,"created_at",void 0),at([r.Column,nt("design:type",Number)],ot.prototype,"created_by",void 0),at([(0,r.HasMany)((()=>qe)),nt("design:type",Object)],ot.prototype,"dateList",void 0),at([(0,r.HasMany)((()=>mt)),nt("design:type",Object)],ot.prototype,"dayList",void 0),at([r.Column,nt("design:type",Date)],ot.prototype,"deleted_at",void 0),at([(0,r.BelongsTo)((()=>le)),nt("design:type",Object)],ot.prototype,"doctor",void 0),at([(0,r.ForeignKey)((()=>le)),r.Column,nt("design:type",Number)],ot.prototype,"doctor_id",void 0),at([r.Column,nt("design:type",Date)],ot.prototype,"end_date",void 0),at([(0,r.ForeignKey)((()=>Oe)),r.Column,nt("design:type",Number)],ot.prototype,"facility_location_id",void 0),at([(0,r.BelongsTo)((()=>Oe)),nt("design:type",Object)],ot.prototype,"facilityLocations",void 0),at([r.PrimaryKey,r.AutoIncrement,r.Column,nt("design:type",Number)],ot.prototype,"id",void 0),at([r.Column,nt("design:type",Boolean)],ot.prototype,"is_provider_assignment",void 0),at([r.Column,nt("design:type",Number)],ot.prototype,"key",void 0),at([r.Column,nt("design:type",Number)],ot.prototype,"no_of_slots",void 0),at([r.Column,nt("design:type",Date)],ot.prototype,"start_date",void 0),at([(0,r.ForeignKey)((()=>le)),r.Column,nt("design:type",Number)],ot.prototype,"supervisor_id",void 0),at([r.Column,nt("design:type",Date)],ot.prototype,"updated_at",void 0),at([r.Column,nt("design:type",Number)],ot.prototype,"updated_by",void 0),ot=at([(0,r.Table)({modelName:"sch_available_doctors",tableName:"sch_available_doctors",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],ot);var st=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},lt=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let dt=class extends r.Model{};st([r.Column,lt("design:type",Date)],dt.prototype,"created_at",void 0),st([r.Column,lt("design:type",Number)],dt.prototype,"created_by",void 0),st([r.Column,lt("design:type",Date)],dt.prototype,"deleted_at",void 0),st([r.PrimaryKey,r.AutoIncrement,r.Column,lt("design:type",Number)],dt.prototype,"id",void 0),st([r.Column,lt("design:type",String)],dt.prototype,"name",void 0),st([r.Column,lt("design:type",String)],dt.prototype,"slug",void 0),st([r.Column,lt("design:type",Date)],dt.prototype,"updated_at",void 0),st([r.Column,lt("design:type",Number)],dt.prototype,"updated_by",void 0),dt=st([(0,r.Table)({modelName:"sch_recurrence_ending_criterias",tableName:"sch_recurrence_ending_criterias",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],dt);var _t=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},rt=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let ct=class extends r.Model{};_t([r.Column,rt("design:type",Date)],ct.prototype,"created_at",void 0),_t([r.Column,rt("design:type",Number)],ct.prototype,"created_by",void 0),_t([r.Column,rt("design:type",Date)],ct.prototype,"deleted_at",void 0),_t([r.PrimaryKey,r.AutoIncrement,r.Column,rt("design:type",Number)],ct.prototype,"id",void 0),_t([r.Column,rt("design:type",String)],ct.prototype,"slug",void 0),_t([r.Column,rt("design:type",String)],ct.prototype,"unit",void 0),_t([r.Column,rt("design:type",Date)],ct.prototype,"updated_at",void 0),_t([r.Column,rt("design:type",Number)],ct.prototype,"updated_by",void 0),ct=_t([(0,r.Table)({modelName:"sch_day_lists",tableName:"sch_day_lists",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],ct);var pt=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},ut=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let mt=class extends r.Model{};pt([(0,r.ForeignKey)((()=>ot)),r.Column,ut("design:type",Number)],mt.prototype,"available_doctor_id",void 0),pt([(0,r.ForeignKey)((()=>it)),r.Column,ut("design:type",Number)],mt.prototype,"available_speciality_id",void 0),pt([r.Column,ut("design:type",Date)],mt.prototype,"created_at",void 0),pt([r.Column,ut("design:type",Number)],mt.prototype,"created_by",void 0),pt([(0,r.ForeignKey)((()=>ct)),r.Column,ut("design:type",Number)],mt.prototype,"day_id",void 0),pt([r.Column,ut("design:type",Date)],mt.prototype,"deleted_at",void 0),pt([r.PrimaryKey,r.AutoIncrement,r.Column,ut("design:type",Number)],mt.prototype,"id",void 0),pt([r.Column,ut("design:type",Number)],mt.prototype,"key",void 0),pt([r.Column,ut("design:type",Date)],mt.prototype,"updated_at",void 0),pt([r.Column,ut("design:type",Number)],mt.prototype,"updated_by",void 0),mt=pt([(0,r.Table)({modelName:"sch_recurrence_day_lists",tableName:"sch_recurrence_day_lists",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],mt);var yt=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},ht=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let ft=class extends r.Model{};yt([r.Column,ht("design:type",Number)],ft.prototype,"approval_status",void 0),yt([(0,r.ForeignKey)((()=>le)),r.Column,ht("design:type",Number)],ft.prototype,"approved_by",void 0),yt([(0,r.BelongsTo)((()=>le),"approved_by"),ht("design:type",Object)],ft.prototype,"approvedBy",void 0),yt([r.Column,ht("design:type",String)],ft.prototype,"comments",void 0),yt([r.Column,ht("design:type",Date)],ft.prototype,"created_at",void 0),yt([(0,r.ForeignKey)((()=>le)),r.Column,ht("design:type",Number)],ft.prototype,"created_by",void 0),yt([(0,r.BelongsTo)((()=>le),"created_by"),ht("design:type",Object)],ft.prototype,"createdBy",void 0),yt([r.Column,ht("design:type",Date)],ft.prototype,"deleted_at",void 0),yt([r.Column,ht("design:type",String)],ft.prototype,"description",void 0),yt([(0,r.BelongsTo)((()=>le),"doctor_id"),ht("design:type",Object)],ft.prototype,"doctor",void 0),yt([(0,r.ForeignKey)((()=>le)),r.Column,ht("design:type",Number)],ft.prototype,"doctor_id",void 0),yt([r.Column,ht("design:type",Date)],ft.prototype,"end_date",void 0),yt([r.PrimaryKey,r.AutoIncrement,r.Column,ht("design:type",Number)],ft.prototype,"id",void 0),yt([r.Column,ht("design:type",Number)],ft.prototype,"key",void 0),yt([r.Column,ht("design:type",Date)],ft.prototype,"start_date",void 0),yt([r.Column,ht("design:type",String)],ft.prototype,"subject",void 0),yt([r.Column,ht("design:type",Date)],ft.prototype,"updated_at",void 0),yt([r.Column,ht("design:type",Number)],ft.prototype,"updated_by",void 0),yt([(0,r.BelongsTo)((()=>le),"updated_by"),ht("design:type",Object)],ft.prototype,"updatedBy",void 0),ft=yt([(0,r.Table)({modelName:"sch_unavailable_doctors",tableName:"sch_unavailable_doctors",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],ft);var vt=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},gt=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let bt=class extends r.Model{};vt([(0,r.ForeignKey)((()=>ot)),r.Column,gt("design:type",Number)],bt.prototype,"available_doctor_id",void 0),vt([r.Column,gt("design:type",Date)],bt.prototype,"created_at",void 0),vt([r.Column,gt("design:type",Number)],bt.prototype,"created_by",void 0),vt([r.Column,gt("design:type",Date)],bt.prototype,"deleted_at",void 0),vt([(0,r.ForeignKey)((()=>le)),r.Column,gt("design:type",Number)],bt.prototype,"doctor_id",void 0),vt([r.PrimaryKey,r.AutoIncrement,r.Column,gt("design:type",Number)],bt.prototype,"id",void 0),vt([r.Column,gt("design:type",Number)],bt.prototype,"key",void 0),vt([r.Column,gt("design:type",Date)],bt.prototype,"updated_at",void 0),vt([r.Column,gt("design:type",Number)],bt.prototype,"updated_by",void 0),bt=vt([(0,r.Table)({modelName:"sch_available_doctor_notifications",tableName:"sch_available_doctor_notifications",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],bt);var St=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},It=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Dt=class extends r.Model{};St([(0,r.ForeignKey)((()=>V)),r.Column,It("design:type",Number)],Dt.prototype,"action_preference_id",void 0),St([r.Column,It("design:type",Date)],Dt.prototype,"created_at",void 0),St([r.Column,It("design:type",Number)],Dt.prototype,"created_by",void 0),St([r.Column,It("design:type",Date)],Dt.prototype,"deleted_at",void 0),St([r.PrimaryKey,r.AutoIncrement,r.Column,It("design:type",Number)],Dt.prototype,"id",void 0),St([r.Column,It("design:type",Number)],Dt.prototype,"origin_id",void 0),St([r.Column,It("design:type",Number)],Dt.prototype,"target_id",void 0),St([r.Column,It("design:type",Date)],Dt.prototype,"updated_at",void 0),St([r.Column,It("design:type",Number)],Dt.prototype,"updated_by",void 0),Dt=St([(0,r.Table)({modelName:"sch_action_preference_forward_facility_location",tableName:"sch_action_preference_forward_facility_location",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],Dt);var wt,Ot,Tt,At,Nt,Ct=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Rt=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};!function(e){e[e.male=0]="male",e[e.female=1]="female",e[e.X=2]="X"}(wt||(wt={})),function(e){e[e.single=0]="single",e[e.married=1]="married",e[e.widowed=2]="widowed"}(Ot||(Ot={})),function(e){e[e.yes=0]="yes",e[e.no=1]="no",e[e.not_sure=2]="not_sure"}(Tt||(Tt={})),function(e){e[e.yes=0]="yes",e[e.no=1]="no",e[e.skip=2]="skip"}(At||(At={})),function(e){e[e.open=0]="open",e[e.closed=1]="closed"}(Nt||(Nt={}));let Et=class extends r.Model{};Ct([r.Column,Rt("design:type",Number)],Et.prototype,"age",void 0),Ct([r.Column,Rt("design:type",String)],Et.prototype,"cell_phone",void 0),Ct([r.Column,Rt("design:type",Date)],Et.prototype,"created_at",void 0),Ct([r.Column,Rt("design:type",Number)],Et.prototype,"created_by",void 0),Ct([r.Column,Rt("design:type",Date)],Et.prototype,"deleted_at",void 0),Ct([r.Column,Rt("design:type",Date)],Et.prototype,"dob",void 0),Ct([r.Column,Rt("design:type",String)],Et.prototype,"first_name",void 0),Ct([r.Column,Rt("design:type",Number)],Et.prototype,"gender",void 0),Ct([r.Column,Rt("design:type",Number)],Et.prototype,"height_ft",void 0),Ct([r.Column,Rt("design:type",Number)],Et.prototype,"height_in",void 0),Ct([r.Column,Rt("design:type",String)],Et.prototype,"home_phone",void 0),Ct([r.PrimaryKey,r.AutoIncrement,r.Column,Rt("design:type",Number)],Et.prototype,"id",void 0),Ct([r.Column,Rt("design:type",Number)],Et.prototype,"is_law_enforcement_agent",void 0),Ct([r.Column,Rt("design:type",Number)],Et.prototype,"is_pregnant",void 0),Ct([r.Column,Rt("design:type",Number)],Et.prototype,"key",void 0),Ct([r.Column,Rt("design:type",String)],Et.prototype,"language",void 0),Ct([r.Column,Rt("design:type",String)],Et.prototype,"last_name",void 0),Ct([r.Column,Rt("design:type",Number)],Et.prototype,"meritial_status",void 0),Ct([r.Column,Rt("design:type",String)],Et.prototype,"middle_name",void 0),Ct([r.Column,Rt("design:type",Number)],Et.prototype,"need_translator",void 0),Ct([r.Column,Rt("design:type",String)],Et.prototype,"notes",void 0),Ct([r.Column,Rt("design:type",String)],Et.prototype,"profile_avatar",void 0),Ct([r.Column,Rt("design:type",String)],Et.prototype,"ssn",void 0),Ct([r.Column,Rt("design:type",Number)],Et.prototype,"status",void 0),Ct([r.Column,Rt("design:type",Date)],Et.prototype,"updated_at",void 0),Ct([r.Column,Rt("design:type",Number)],Et.prototype,"updated_by",void 0),Ct([r.Column,Rt("design:type",Number)],Et.prototype,"weight_kg",void 0),Ct([r.Column,Rt("design:type",Number)],Et.prototype,"weight_lbs",void 0),Ct([r.Column,Rt("design:type",String)],Et.prototype,"work_phone",void 0),Et=Ct([(0,r.Table)({modelName:"kiosk_patient",tableName:"kiosk_patient",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],Et);var Lt=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},kt=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Pt=class extends r.Model{};Lt([r.Column,kt("design:type",Date)],Pt.prototype,"created_at",void 0),Lt([r.Column,kt("design:type",Number)],Pt.prototype,"created_by",void 0),Lt([r.Column,kt("design:type",Date)],Pt.prototype,"deleted_at",void 0),Lt([r.PrimaryKey,r.AutoIncrement,r.Column,kt("design:type",Number)],Pt.prototype,"id",void 0),Lt([r.Column,kt("design:type",Number)],Pt.prototype,"key",void 0),Lt([r.Column,kt("design:type",String)],Pt.prototype,"name",void 0),Lt([r.Column,kt("design:type",String)],Pt.prototype,"slug",void 0),Lt([r.Column,kt("design:type",Date)],Pt.prototype,"updated_at",void 0),Lt([r.Column,kt("design:type",Number)],Pt.prototype,"updated_by",void 0),Pt=Lt([(0,r.Table)({modelName:"kiosk_case_patient_session_statuses",tableName:"kiosk_case_patient_session_statuses",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],Pt);var jt=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Bt=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Ut=class extends r.Model{};jt([r.Column,Bt("design:type",Date)],Ut.prototype,"created_at",void 0),jt([r.Column,Bt("design:type",Number)],Ut.prototype,"created_by",void 0),jt([r.Column,Bt("design:type",Date)],Ut.prototype,"deleted_at",void 0),jt([r.PrimaryKey,r.AutoIncrement,r.Column,Bt("design:type",Number)],Ut.prototype,"id",void 0),jt([r.Column,Bt("design:type",String)],Ut.prototype,"name",void 0),jt([r.Column,Bt("design:type",String)],Ut.prototype,"slug",void 0),jt([r.Column,Bt("design:type",String)],Ut.prototype,"qualifier",void 0),jt([r.Column,Bt("design:type",Date)],Ut.prototype,"updated_at",void 0),jt([r.Column,Bt("design:type",Number)],Ut.prototype,"updated_by",void 0),Ut=jt([(0,r.Table)({modelName:"facilities",tableName:"facilities",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],Ut);var qt=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Ft=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Mt=class extends r.Model{};qt([r.Column,Ft("design:type",Number)],Mt.prototype,"billing_employment_type_id",void 0),qt([(0,r.ForeignKey)((()=>xt)),r.Column,Ft("design:type",Number)],Mt.prototype,"billing_title_id",void 0),qt([r.Column,Ft("design:type",String)],Mt.prototype,"clinic_name",void 0),qt([r.Column,Ft("design:type",Date)],Mt.prototype,"created_at",void 0),qt([r.Column,Ft("design:type",Number)],Mt.prototype,"created_by",void 0),qt([r.Column,Ft("design:type",Date)],Mt.prototype,"dea_expiration_date",void 0),qt([r.Column,Ft("design:type",Date)],Mt.prototype,"dea_issue_date",void 0),qt([r.Column,Ft("design:type",String)],Mt.prototype,"dea_number",void 0),qt([r.Column,Ft("design:type",Date)],Mt.prototype,"deleted_at",void 0),qt([r.Column,Ft("design:type",Number)],Mt.prototype,"doctor_id",void 0),qt([r.Column,Ft("design:type",String)],Mt.prototype,"hospital_privileges",void 0),qt([r.PrimaryKey,r.AutoIncrement,r.Column,Ft("design:type",Number)],Mt.prototype,"id",void 0),qt([r.Column,Ft("design:type",Number)],Mt.prototype,"is_self",void 0),qt([r.Column,Ft("design:type",Number)],Mt.prototype,"medical_credentials",void 0),qt([r.Column,Ft("design:type",String)],Mt.prototype,"nadean_number",void 0),qt([r.Column,Ft("design:type",String)],Mt.prototype,"npi",void 0),qt([r.Column,Ft("design:type",String)],Mt.prototype,"other_employment_type",void 0),qt([r.Column,Ft("design:type",String)],Mt.prototype,"rating",void 0),qt([r.Column,Ft("design:type",Date)],Mt.prototype,"registration_expiration_date",void 0),qt([r.Column,Ft("design:type",String)],Mt.prototype,"registration_number",void 0),qt([r.Column,Ft("design:type",Date)],Mt.prototype,"updated_at",void 0),qt([r.Column,Ft("design:type",Number)],Mt.prototype,"updated_by",void 0),qt([r.Column,Ft("design:type",String)],Mt.prototype,"upin",void 0),qt([(0,r.BelongsTo)((()=>le)),Ft("design:type",Object)],Mt.prototype,"user",void 0),qt([(0,r.ForeignKey)((()=>le)),r.Column,Ft("design:type",Number)],Mt.prototype,"user_id",void 0),qt([r.Column,Ft("design:type",Number)],Mt.prototype,"wcb_auth",void 0),qt([r.Column,Ft("design:type",String)],Mt.prototype,"wcb_authorization",void 0),qt([r.Column,Ft("design:type",Date)],Mt.prototype,"wcb_date_of_issue",void 0),qt([r.Column,Ft("design:type",String)],Mt.prototype,"wcb_rating_code",void 0),qt([(0,r.BelongsTo)((()=>xt)),Ft("design:type",Object)],Mt.prototype,"billingTitle",void 0),Mt=qt([(0,r.Table)({modelName:"medical_identifiers",tableName:"medical_identifiers",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],Mt);var $t=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Vt=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let xt=class extends r.Model{};$t([r.Column,Vt("design:type",Date)],xt.prototype,"created_at",void 0),$t([(0,r.ForeignKey)((()=>le)),r.Column,Vt("design:type",Number)],xt.prototype,"created_by",void 0),$t([r.Column,Vt("design:type",Date)],xt.prototype,"deleted_at",void 0),$t([r.PrimaryKey,r.AutoIncrement,r.Column,Vt("design:type",Number)],xt.prototype,"id",void 0),$t([r.Column,Vt("design:type",String)],xt.prototype,"name",void 0),$t([r.Column,Vt("design:type",String)],xt.prototype,"description",void 0),$t([r.Column,Vt("design:type",Date)],xt.prototype,"updated_at",void 0),$t([(0,r.ForeignKey)((()=>le)),r.Column,Vt("design:type",Number)],xt.prototype,"updated_by",void 0),$t([(0,r.HasOne)((()=>Mt)),Vt("design:type",Object)],xt.prototype,"medicalIdentifiers",void 0),xt=$t([(0,r.Table)({modelName:"billing_titles",tableName:"billing_titles",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],xt);var Kt=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},zt=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Gt=class extends r.Model{};Kt([r.Column,zt("design:type",Date)],Gt.prototype,"created_at",void 0),Kt([r.Column,zt("design:type",Number)],Gt.prototype,"created_by",void 0),Kt([r.Column,zt("design:type",Date)],Gt.prototype,"date",void 0),Kt([r.Column,zt("design:type",Date)],Gt.prototype,"deleted_at",void 0),Kt([(0,r.BelongsTo)((()=>le)),zt("design:type",Object)],Gt.prototype,"doctor",void 0),Kt([(0,r.ForeignKey)((()=>le)),r.Column,zt("design:type",Number)],Gt.prototype,"doctor_id",void 0),Kt([r.Column,zt("design:type",Number)],Gt.prototype,"facility_location_id",void 0),Kt([r.PrimaryKey,r.AutoIncrement,r.Column,zt("design:type",Number)],Gt.prototype,"id",void 0),Kt([r.Column,zt("design:type",String)],Gt.prototype,"instruction",void 0),Kt([r.Column,zt("design:type",Number)],Gt.prototype,"key",void 0),Kt([r.Column,zt("design:type",Date)],Gt.prototype,"updated_at",void 0),Kt([r.Column,zt("design:type",Number)],Gt.prototype,"updated_by",void 0),Gt=Kt([(0,r.Table)({modelName:"sch_doctor_instruction_for_facility_locations",tableName:"sch_doctor_instruction_for_facility_locations",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],Gt);var Ht=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Yt=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Wt=class extends r.Model{};Ht([r.Column,Yt("design:type",Date)],Wt.prototype,"created_at",void 0),Ht([r.Column,Yt("design:type",Number)],Wt.prototype,"created_by",void 0),Ht([r.Column,Yt("design:type",Date)],Wt.prototype,"deleted_at",void 0),Ht([r.Column,Yt("design:type",String)],Wt.prototype,"description",void 0),Ht([r.PrimaryKey,r.AutoIncrement,r.Column,Yt("design:type",Number)],Wt.prototype,"id",void 0),Ht([r.Column,Yt("design:type",Number)],Wt.prototype,"key",void 0),Ht([r.Column,Yt("design:type",String)],Wt.prototype,"name",void 0),Ht([r.Column,Yt("design:type",String)],Wt.prototype,"slug",void 0),Ht([r.Column,Yt("design:type",Date)],Wt.prototype,"updated_at",void 0),Ht([r.Column,Yt("design:type",Number)],Wt.prototype,"updated_by",void 0),Wt=Ht([(0,r.Table)({modelName:"kiosk_case_types",tableName:"kiosk_case_types",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],Wt);var Qt=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Jt=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Xt=class extends r.Model{};Qt([r.Column,Jt("design:type",Date)],Xt.prototype,"created_at",void 0),Qt([r.Column,Jt("design:type",Number)],Xt.prototype,"created_by",void 0),Qt([r.Column,Jt("design:type",Date)],Xt.prototype,"deleted_at",void 0),Qt([r.PrimaryKey,r.AutoIncrement,r.Column,Jt("design:type",Number)],Xt.prototype,"id",void 0),Qt([r.Column,Jt("design:type",String)],Xt.prototype,"name",void 0),Qt([r.Column,Jt("design:type",String)],Xt.prototype,"slug",void 0),Qt([r.Column,Jt("design:type",Date)],Xt.prototype,"updated_at",void 0),Qt([r.Column,Jt("design:type",Number)],Xt.prototype,"updated_by",void 0),Xt=Qt([(0,r.Table)({modelName:"sch_assign_provider_types",tableName:"sch_assign_provider_types",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],Xt);var Zt=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},ei=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let ti=class extends r.Model{};Zt([(0,r.ForeignKey)((()=>Wt)),r.Column,ei("design:type",Number)],ti.prototype,"case_type_id",void 0),Zt([(0,r.HasMany)((()=>Xi)),ei("design:type",Object)],ti.prototype,"caseEmployers",void 0),Zt([(0,r.HasMany)((()=>u)),ei("design:type",Object)],ti.prototype,"caseInsurances",void 0),Zt([(0,r.BelongsTo)((()=>Wt)),ei("design:type",Object)],ti.prototype,"caseType",void 0),Zt([(0,r.HasOne)((()=>ui)),ei("design:type",Object)],ti.prototype,"caseAccidentInformation",void 0),Zt([(0,r.HasMany)((()=>li)),ei("design:type",Object)],ti.prototype,"caseContactPersons",void 0),Zt([(0,r.BelongsTo)((()=>ri)),ei("design:type",Object)],ti.prototype,"casePurposeOfVisit",void 0),Zt([(0,r.BelongsTo)((()=>ni)),ei("design:type",Object)],ti.prototype,"caseStatus",void 0),Zt([(0,r.BelongsTo)((()=>na)),ei("design:type",Object)],ti.prototype,"category",void 0),Zt([r.Column,ei("design:type",Date)],ti.prototype,"created_at",void 0),Zt([r.Column,ei("design:type",Number)],ti.prototype,"created_by",void 0),Zt([r.Column,ei("design:type",Date)],ti.prototype,"deleted_at",void 0),Zt([r.Column,ei("design:type",Date)],ti.prototype,"date_of_admission",void 0),Zt([(0,r.ForeignKey)((()=>na)),r.Column,ei("design:type",Number)],ti.prototype,"category_id",void 0),Zt([r.PrimaryKey,r.AutoIncrement,r.Column,ei("design:type",Number)],ti.prototype,"id",void 0),Zt([r.Column,ei("design:type",Boolean)],ti.prototype,"is_active",void 0),Zt([r.Column,ei("design:type",Number)],ti.prototype,"creation_source",void 0),Zt([r.Column,ei("design:type",Boolean)],ti.prototype,"is_transferring_case",void 0),Zt([r.Column,ei("design:type",Number)],ti.prototype,"key",void 0),Zt([(0,r.BelongsTo)((()=>Et)),ei("design:type",Object)],ti.prototype,"patient",void 0),Zt([(0,r.ForeignKey)((()=>Et)),r.Column,ei("design:type",Number)],ti.prototype,"patient_id",void 0),Zt([(0,r.ForeignKey)((()=>ri)),r.Column,ei("design:type",Number)],ti.prototype,"purpose_of_visit_id",void 0),Zt([(0,r.ForeignKey)((()=>ni)),r.Column,ei("design:type",Number)],ti.prototype,"status_id",void 0),Zt([r.Column,ei("design:type",Date)],ti.prototype,"updated_at",void 0),Zt([r.Column,ei("design:type",Number)],ti.prototype,"updated_by",void 0),ti=Zt([(0,r.Table)({modelName:"kiosk_cases",tableName:"kiosk_cases",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],ti);var ii=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},ai=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let ni=class extends r.Model{};ii([r.Column,ai("design:type",Date)],ni.prototype,"created_at",void 0),ii([r.Column,ai("design:type",Number)],ni.prototype,"created_by",void 0),ii([r.Column,ai("design:type",Date)],ni.prototype,"deleted_at",void 0),ii([r.PrimaryKey,r.AutoIncrement,r.Column,ai("design:type",Number)],ni.prototype,"id",void 0),ii([r.Column,ai("design:type",String)],ni.prototype,"name",void 0),ii([r.Column,ai("design:type",Date)],ni.prototype,"updated_at",void 0),ii([r.Column,ai("design:type",Number)],ni.prototype,"updated_by",void 0),ni=ii([(0,r.Table)({modelName:"billing_case_status",tableName:"billing_case_status",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],ni);var oi=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},si=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let li=class extends r.Model{};oi([(0,r.BelongsTo)((()=>ti)),si("design:type",Object)],li.prototype,"case",void 0),oi([(0,r.ForeignKey)((()=>ti)),r.Column,si("design:type",Number)],li.prototype,"case_id",void 0),oi([(0,r.ForeignKey)((()=>T)),r.Column,si("design:type",Number)],li.prototype,"contact_person_id",void 0),oi([(0,r.BelongsTo)((()=>T)),si("design:type",Object)],li.prototype,"contactPerson",void 0),oi([r.Column,si("design:type",Date)],li.prototype,"created_at",void 0),oi([r.Column,si("design:type",Number)],li.prototype,"created_by",void 0),oi([r.Column,si("design:type",Date)],li.prototype,"deleted_at",void 0),oi([r.PrimaryKey,r.AutoIncrement,r.Column,si("design:type",Number)],li.prototype,"id",void 0),oi([r.Column,si("design:type",Date)],li.prototype,"updated_at",void 0),oi([r.Column,si("design:type",Number)],li.prototype,"updated_by",void 0),li=oi([(0,r.Table)({modelName:"kiosk_case_contact_persons",tableName:"kiosk_case_contact_persons",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],li);var di=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},_i=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let ri=class extends r.Model{};di([r.Column,_i("design:type",Date)],ri.prototype,"created_at",void 0),di([r.Column,_i("design:type",Number)],ri.prototype,"created_by",void 0),di([r.Column,_i("design:type",Date)],ri.prototype,"deleted_at",void 0),di([r.PrimaryKey,r.AutoIncrement,r.Column,_i("design:type",Number)],ri.prototype,"id",void 0),di([r.Column,_i("design:type",Number)],ri.prototype,"key",void 0),di([r.Column,_i("design:type",Date)],ri.prototype,"updated_at",void 0),di([r.Column,_i("design:type",Number)],ri.prototype,"updated_by",void 0),ri=di([(0,r.Table)({modelName:"kiosk_case_purpose_of_visit",tableName:"kiosk_case_purpose_of_visit",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],ri);var ci=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},pi=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let ui=class extends r.Model{};ci([r.Column,pi("design:type",Date)],ui.prototype,"accident_time",void 0),ci([(0,r.ForeignKey)((()=>ti)),r.Column,pi("design:type",Number)],ui.prototype,"case_id",void 0),ci([r.Column,pi("design:type",Date)],ui.prototype,"created_at",void 0),ci([r.Column,pi("design:type",Number)],ui.prototype,"created_by",void 0),ci([r.Column,pi("design:type",Date)],ui.prototype,"deleted_at",void 0),ci([r.PrimaryKey,r.AutoIncrement,r.Column,pi("design:type",Number)],ui.prototype,"id",void 0),ci([r.Column,pi("design:type",Number)],ui.prototype,"key",void 0),ci([r.Column,pi("design:type",Date)],ui.prototype,"updated_at",void 0),ci([r.Column,pi("design:type",Date)],ui.prototype,"accident_date",void 0),ci([r.Column,pi("design:type",Number)],ui.prototype,"updated_by",void 0),ui=ci([(0,r.Table)({modelName:"kiosk_case_accident_informations",tableName:"kiosk_case_accident_informations",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],ui);var mi=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},yi=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let hi=class extends r.Model{};mi([(0,r.ForeignKey)((()=>B)),r.Column,yi("design:type",Number)],hi.prototype,"case_patient_session_id",void 0),mi([r.Column,yi("design:type",Date)],hi.prototype,"created_at",void 0),mi([r.Column,yi("design:type",Number)],hi.prototype,"created_by",void 0),mi([r.Column,yi("design:type",Date)],hi.prototype,"date",void 0),mi([r.Column,yi("design:type",Date)],hi.prototype,"deleted_at",void 0),mi([r.PrimaryKey,r.AutoIncrement,r.Column,yi("design:type",Number)],hi.prototype,"id",void 0),mi([r.Column,yi("design:type",Number)],hi.prototype,"key",void 0),mi([r.Column,yi("design:type",String)],hi.prototype,"notes",void 0),mi([r.Column,yi("design:type",Number)],hi.prototype,"provider_id",void 0),mi([r.Column,yi("design:type",Number)],hi.prototype,"speciality_id",void 0),mi([r.Column,yi("design:type",Date)],hi.prototype,"updated_at",void 0),mi([r.Column,yi("design:type",Number)],hi.prototype,"updated_by",void 0),hi=mi([(0,r.Table)({modelName:"kiosk_case_patient_session_not_seen_reasons",tableName:"kiosk_case_patient_session_not_seen_reasons",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],hi);var fi=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},vi=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let gi=class extends r.Model{};fi([r.Column,vi("design:type",String)],gi.prototype,"city",void 0),fi([r.Column,vi("design:type",String)],gi.prototype,"comments",void 0),fi([r.Column,vi("design:type",Date)],gi.prototype,"created_at",void 0),fi([(0,r.ForeignKey)((()=>le)),r.Column,vi("design:type",Number)],gi.prototype,"created_by",void 0),fi([r.Column,vi("design:type",Date)],gi.prototype,"deleted_at",void 0),fi([r.PrimaryKey,r.AutoIncrement,r.Column,vi("design:type",Number)],gi.prototype,"id",void 0),fi([r.Column,vi("design:type",Boolean)],gi.prototype,"is_pickup",void 0),fi([r.Column,vi("design:type",Boolean)],gi.prototype,"is_dropoff",void 0),fi([r.Column,vi("design:type",String)],gi.prototype,"phone",void 0),fi([(0,r.ForeignKey)((()=>He)),r.Column,vi("design:type",Number)],gi.prototype,"appointment_id",void 0),fi([r.Column,vi("design:type",String)],gi.prototype,"state",void 0),fi([r.Column,vi("design:type",String)],gi.prototype,"street_address",void 0),fi([r.Column,vi("design:type",String)],gi.prototype,"suit",void 0),fi([r.Column,vi("design:type",String)],gi.prototype,"type",void 0),fi([r.Column,vi("design:type",Date)],gi.prototype,"updated_at",void 0),fi([(0,r.ForeignKey)((()=>le)),r.Column,vi("design:type",Number)],gi.prototype,"updated_by",void 0),fi([r.Column,vi("design:type",String)],gi.prototype,"zip",void 0),gi=fi([(0,r.Table)({modelName:"sch_transportations",tableName:"sch_transportations",timestamps:!1})],gi);var bi=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Si=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Ii=class extends r.Model{};bi([r.Column,Si("design:type",Number)],Ii.prototype,"cell_no",void 0),bi([r.Column,Si("design:type",Date)],Ii.prototype,"created_at",void 0),bi([(0,r.ForeignKey)((()=>le)),r.Column,Si("design:type",Number)],Ii.prototype,"created_by",void 0),bi([r.Column,Si("design:type",Date)],Ii.prototype,"deleted_at",void 0),bi([r.Column,Si("design:type",String)],Ii.prototype,"email",void 0),bi([r.Column,Si("design:type",String)],Ii.prototype,"first_name",void 0),bi([r.PrimaryKey,r.AutoIncrement,r.Column,Si("design:type",Number)],Ii.prototype,"id",void 0),bi([r.Column,Si("design:type",String)],Ii.prototype,"last_name",void 0),bi([r.Column,Si("design:type",Number)],Ii.prototype,"license_no",void 0),bi([r.Column,Si("design:type",String)],Ii.prototype,"middle_name",void 0),bi([r.Column,Si("design:type",Number)],Ii.prototype,"npi_no",void 0),bi([r.Column,Si("design:type",Date)],Ii.prototype,"updated_at",void 0),bi([(0,r.ForeignKey)((()=>le)),r.Column,Si("design:type",Number)],Ii.prototype,"updated_by",void 0),Ii=bi([(0,r.Table)({modelName:"physicians",tableName:"physicians",timestamps:!1})],Ii);var Di=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},wi=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Oi=class extends r.Model{};Di([r.Column,wi("design:type",Number)],Oi.prototype,"code_type_id",void 0),Di([r.Column,wi("design:type",String)],Oi.prototype,"comments",void 0),Di([r.Column,wi("design:type",Date)],Oi.prototype,"created_at",void 0),Di([(0,r.ForeignKey)((()=>le)),r.Column,wi("design:type",Number)],Oi.prototype,"created_by",void 0),Di([r.Column,wi("design:type",Date)],Oi.prototype,"deleted_at",void 0),Di([r.Column,wi("design:type",String)],Oi.prototype,"description",void 0),Di([r.PrimaryKey,r.AutoIncrement,r.Column,wi("design:type",Number)],Oi.prototype,"id",void 0),Di([r.Column,wi("design:type",String)],Oi.prototype,"long_description",void 0),Di([r.Column,wi("design:type",String)],Oi.prototype,"medium_description",void 0),Di([r.Column,wi("design:type",String)],Oi.prototype,"name",void 0),Di([r.Column,wi("design:type",String)],Oi.prototype,"short_description",void 0),Di([r.Column,wi("design:type",String)],Oi.prototype,"type",void 0),Di([r.Column,wi("design:type",Date)],Oi.prototype,"updated_at",void 0),Di([(0,r.ForeignKey)((()=>le)),r.Column,wi("design:type",Number)],Oi.prototype,"updated_by",void 0),Oi=Di([(0,r.Table)({modelName:"billing_codes",tableName:"billing_codes",timestamps:!1})],Oi);var Ti=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Ai=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Ni=class extends r.Model{};Ti([(0,r.ForeignKey)((()=>He)),r.Column,Ai("design:type",Number)],Ni.prototype,"appointment_id",void 0),Ti([(0,r.ForeignKey)((()=>Oi)),r.Column,Ai("design:type",Number)],Ni.prototype,"billing_code_id",void 0),Ti([(0,r.BelongsTo)((()=>Oi)),Ai("design:type",Oi)],Ni.prototype,"billingCode",void 0),Ti([r.Column,Ai("design:type",Date)],Ni.prototype,"created_at",void 0),Ti([(0,r.ForeignKey)((()=>le)),r.Column,Ai("design:type",Number)],Ni.prototype,"created_by",void 0),Ti([r.Column,Ai("design:type",Date)],Ni.prototype,"deleted_at",void 0),Ti([r.PrimaryKey,r.AutoIncrement,r.Column,Ai("design:type",Number)],Ni.prototype,"id",void 0),Ti([r.Column,Ai("design:type",Date)],Ni.prototype,"updated_at",void 0),Ti([(0,r.ForeignKey)((()=>le)),r.Column,Ai("design:type",Number)],Ni.prototype,"updated_by",void 0),Ni=Ti([(0,r.Table)({modelName:"sch_appointment_cpt_codes",tableName:"sch_appointment_cpt_codes",timestamps:!1})],Ni);var Ci=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Ri=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Ei=class extends r.Model{};Ci([r.Column,Ri("design:type",Date)],Ei.prototype,"created_at",void 0),Ci([r.Column,Ri("design:type",Number)],Ei.prototype,"created_by",void 0),Ci([r.Column,Ri("design:type",Date)],Ei.prototype,"deleted_at",void 0),Ci([(0,r.ForeignKey)((()=>Oe)),r.Column,Ri("design:type",Number)],Ei.prototype,"facility_location_id",void 0),Ci([(0,r.BelongsTo)((()=>Oe)),Ri("design:type",Object)],Ei.prototype,"facilityLocation",void 0),Ci([r.PrimaryKey,r.AutoIncrement,r.Column,Ri("design:type",Number)],Ei.prototype,"id",void 0),Ci([(0,r.BelongsTo)((()=>ue)),Ri("design:type",Object)],Ei.prototype,"speciality",void 0),Ci([(0,r.ForeignKey)((()=>ue)),r.Column,Ri("design:type",Number)],Ei.prototype,"specialty_id",void 0),Ci([r.Column,Ri("design:type",Date)],Ei.prototype,"updated_at",void 0),Ci([r.Column,Ri("design:type",Number)],Ei.prototype,"updated_by",void 0),Ci([(0,r.ForeignKey)((()=>le)),r.Column,Ri("design:type",Number)],Ei.prototype,"user_id",void 0),Ci([(0,r.BelongsTo)((()=>le)),Ri("design:type",Object)],Ei.prototype,"users",void 0),Ei=Ci([(0,r.Table)({modelName:"user_specialties",tableName:"user_specialties",timestamps:!1})],Ei);var Li=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},ki=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Pi=class extends r.Model{};Li([r.Column,ki("design:type",Date)],Pi.prototype,"created_at",void 0),Li([r.Column,ki("design:type",Number)],Pi.prototype,"created_by",void 0),Li([r.Column,ki("design:type",Date)],Pi.prototype,"deleted_at",void 0),Li([r.Column,ki("design:type",String)],Pi.prototype,"description",void 0),Li([r.PrimaryKey,r.AutoIncrement,r.Column,ki("design:type",Number)],Pi.prototype,"id",void 0),Li([r.Column,ki("design:type",String)],Pi.prototype,"name",void 0),Li([r.Column,ki("design:type",String)],Pi.prototype,"slug",void 0),Li([r.Column,ki("design:type",Date)],Pi.prototype,"updated_at",void 0),Li([r.Column,ki("design:type",Number)],Pi.prototype,"updated_by",void 0),Pi=Li([(0,r.Table)({modelName:"case_referrals",tableName:"case_referrals",timestamps:!1})],Pi);var ji=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Bi=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Ui=class extends r.Model{};ji([(0,r.BelongsTo)((()=>Mi)),Bi("design:type",Object)],Ui.prototype,"clinic",void 0),ji([(0,r.ForeignKey)((()=>Mi)),r.Column,Bi("design:type",Number)],Ui.prototype,"clinic_id",void 0),ji([(0,r.ForeignKey)((()=>xi)),r.Column,Bi("design:type",Number)],Ui.prototype,"clinic_locations_id",void 0),ji([(0,r.BelongsTo)((()=>xi)),Bi("design:type",Object)],Ui.prototype,"clinicLocation",void 0),ji([r.Column,Bi("design:type",Date)],Ui.prototype,"created_at",void 0),ji([(0,r.ForeignKey)((()=>le)),r.Column,Bi("design:type",Number)],Ui.prototype,"created_by",void 0),ji([r.Column,Bi("design:type",Date)],Ui.prototype,"deleted_at",void 0),ji([r.PrimaryKey,r.AutoIncrement,r.Column,Bi("design:type",Number)],Ui.prototype,"id",void 0),ji([(0,r.BelongsTo)((()=>Ii)),Bi("design:type",Ii)],Ui.prototype,"physician",void 0),ji([(0,r.ForeignKey)((()=>Ii)),r.Column,Bi("design:type",Number)],Ui.prototype,"physician_id",void 0),ji([r.Column,Bi("design:type",Date)],Ui.prototype,"updated_at",void 0),ji([(0,r.ForeignKey)((()=>le)),r.Column,Bi("design:type",Number)],Ui.prototype,"updated_by",void 0),Ui=ji([(0,r.Table)({modelName:"physician_clinics",tableName:"physician_clinics",timestamps:!1})],Ui);var qi=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Fi=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Mi=class extends r.Model{};qi([r.Column,Fi("design:type",Date)],Mi.prototype,"created_at",void 0),qi([(0,r.ForeignKey)((()=>le)),r.Column,Fi("design:type",Number)],Mi.prototype,"created_by",void 0),qi([r.Column,Fi("design:type",Date)],Mi.prototype,"deleted_at",void 0),qi([r.PrimaryKey,r.AutoIncrement,r.Column,Fi("design:type",Number)],Mi.prototype,"id",void 0),qi([r.Column,Fi("design:type",String)],Mi.prototype,"name",void 0),qi([r.Column,Fi("design:type",Date)],Mi.prototype,"updated_at",void 0),qi([(0,r.ForeignKey)((()=>le)),r.Column,Fi("design:type",Number)],Mi.prototype,"updated_by",void 0),Mi=qi([(0,r.Table)({modelName:"clinics",tableName:"clinics",timestamps:!1})],Mi);var $i=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Vi=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let xi=class extends r.Model{};$i([r.Column,Vi("design:type",String)],xi.prototype,"city",void 0),$i([(0,r.BelongsTo)((()=>Mi)),Vi("design:type",Mi)],xi.prototype,"clinic",void 0),$i([(0,r.ForeignKey)((()=>Mi)),r.Column,Vi("design:type",Number)],xi.prototype,"clinic_id",void 0),$i([r.Column,Vi("design:type",Date)],xi.prototype,"created_at",void 0),$i([(0,r.ForeignKey)((()=>le)),r.Column,Vi("design:type",Number)],xi.prototype,"created_by",void 0),$i([r.Column,Vi("design:type",Date)],xi.prototype,"deleted_at",void 0),$i([r.Column,Vi("design:type",String)],xi.prototype,"email",void 0),$i([r.Column,Vi("design:type",String)],xi.prototype,"extension",void 0),$i([r.Column,Vi("design:type",String)],xi.prototype,"fax",void 0),$i([r.Column,Vi("design:type",String)],xi.prototype,"floor",void 0),$i([r.PrimaryKey,r.AutoIncrement,r.Column,Vi("design:type",Number)],xi.prototype,"id",void 0),$i([r.Column,Vi("design:type",Number)],xi.prototype,"is_primary",void 0),$i([r.Column,Vi("design:type",String)],xi.prototype,"phone",void 0),$i([r.Column,Vi("design:type",String)],xi.prototype,"state",void 0),$i([r.Column,Vi("design:type",Number)],xi.prototype,"status",void 0),$i([r.Column,Vi("design:type",String)],xi.prototype,"street_address",void 0),$i([r.Column,Vi("design:type",Date)],xi.prototype,"updated_at",void 0),$i([(0,r.ForeignKey)((()=>le)),r.Column,Vi("design:type",Number)],xi.prototype,"updated_by",void 0),$i([r.Column,Vi("design:type",String)],xi.prototype,"zip",void 0),xi=$i([(0,r.Table)({modelName:"clinic_locations",tableName:"clinic_locations",timestamps:!1})],xi);var Ki=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},zi=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Gi=class extends r.Model{};Ki([r.Column,zi("design:type",Date)],Gi.prototype,"created_at",void 0),Ki([r.Column,zi("design:type",Number)],Gi.prototype,"created_by",void 0),Ki([r.Column,zi("design:type",Date)],Gi.prototype,"deleted_at",void 0),Ki([r.PrimaryKey,r.AutoIncrement,r.Column,zi("design:type",Number)],Gi.prototype,"id",void 0),Ki([r.Column,zi("design:type",String)],Gi.prototype,"precautions",void 0),Ki([(0,r.ForeignKey)((()=>Wi)),r.Column,zi("design:type",Number)],Gi.prototype,"session_id",void 0),Ki([r.Column,zi("design:type",Number)],Gi.prototype,"updated_by",void 0),Gi=Ki([(0,r.Table)({createdAt:"created_at",deletedAt:"deleted_at",modelName:"pt_session_diagnosis",paranoid:!0,tableName:"pt_session_diagnosis",timestamps:!0,updatedAt:"updated_at"})],Gi);var Hi=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Yi=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Wi=class extends r.Model{};Hi([r.Column,Yi("design:type",Date)],Wi.prototype,"created_at",void 0),Hi([r.Column,Yi("design:type",Number)],Wi.prototype,"created_by",void 0),Hi([r.Column,Yi("design:type",Date)],Wi.prototype,"deleted_at",void 0),Hi([r.PrimaryKey,r.AutoIncrement,r.Column,Yi("design:type",Number)],Wi.prototype,"id",void 0),Hi([(0,r.HasOne)((()=>Gi)),Yi("design:type",Object)],Wi.prototype,"ptSessionDiagnosis",void 0),Wi=Hi([(0,r.Table)({createdAt:"created_at",deletedAt:"deleted_at",modelName:"pt_session",paranoid:!0,tableName:"pt_session",timestamps:!0,updatedAt:"updated_at"})],Wi);var Qi=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},Ji=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let Xi=class extends r.Model{};Qi([r.PrimaryKey,r.AutoIncrement,r.Column,Ji("design:type",Number)],Xi.prototype,"id",void 0),Qi([(0,r.ForeignKey)((()=>ti)),r.Column,Ji("design:type",Number)],Xi.prototype,"case_id",void 0),Qi([r.Column,Ji("design:type",Number)],Xi.prototype,"employer_id",void 0),Qi([(0,r.ForeignKey)((()=>ta)),r.Column,Ji("design:type",Number)],Xi.prototype,"employer_type_id",void 0),Qi([(0,r.BelongsTo)((()=>ta)),Ji("design:type",Object)],Xi.prototype,"caseEmployerType",void 0),Qi([r.Column,Ji("design:type",String)],Xi.prototype,"occupation",void 0),Qi([r.Column,Ji("design:type",Date)],Xi.prototype,"created_at",void 0),Qi([r.Column,Ji("design:type",Number)],Xi.prototype,"created_by",void 0),Qi([r.Column,Ji("design:type",Date)],Xi.prototype,"deleted_at",void 0),Qi([r.Column,Ji("design:type",Date)],Xi.prototype,"updated_at",void 0),Qi([r.Column,Ji("design:type",Number)],Xi.prototype,"updated_by",void 0),Xi=Qi([(0,r.Table)({modelName:"kiosk_case_employers",tableName:"kiosk_case_employers",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],Xi);var Zi=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},ea=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let ta=class extends r.Model{};Zi([r.Column,ea("design:type",Date)],ta.prototype,"created_at",void 0),Zi([r.Column,ea("design:type",Number)],ta.prototype,"created_by",void 0),Zi([r.Column,ea("design:type",Date)],ta.prototype,"deleted_at",void 0),Zi([r.PrimaryKey,r.AutoIncrement,r.Column,ea("design:type",Number)],ta.prototype,"id",void 0),Zi([r.Column,ea("design:type",String)],ta.prototype,"name",void 0),Zi([r.Column,ea("design:type",String)],ta.prototype,"slug",void 0),Zi([r.Column,ea("design:type",Date)],ta.prototype,"updated_at",void 0),Zi([r.Column,ea("design:type",Number)],ta.prototype,"updated_by",void 0),ta=Zi([(0,r.Table)({modelName:"kiosk_case_employer_types",tableName:"kiosk_case_employer_types",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],ta);var ia=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},aa=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let na=class extends r.Model{};ia([r.Column,aa("design:type",Date)],na.prototype,"created_at",void 0),ia([r.Column,aa("design:type",Number)],na.prototype,"created_by",void 0),ia([r.Column,aa("design:type",Date)],na.prototype,"deleted_at",void 0),ia([r.PrimaryKey,r.AutoIncrement,r.Column,aa("design:type",Number)],na.prototype,"id",void 0),ia([r.Column,aa("design:type",String)],na.prototype,"name",void 0),ia([r.Column,aa("design:type",String)],na.prototype,"slug",void 0),ia([r.Column,aa("design:type",Date)],na.prototype,"updated_at",void 0),ia([r.Column,aa("design:type",Number)],na.prototype,"updated_by",void 0),na=ia([(0,r.Table)({modelName:"kiosk_case_categories",tableName:"kiosk_case_categories",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],na);var oa=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s},sa=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let la=class extends r.Model{};oa([r.PrimaryKey,r.AutoIncrement,r.Column,sa("design:type",Number)],la.prototype,"id",void 0),oa([r.Column,sa("design:type",String)],la.prototype,"insurance_name",void 0),oa([r.Column,sa("design:type",String)],la.prototype,"insurance_code",void 0),oa([r.Column,sa("design:type",Boolean)],la.prototype,"is_verified",void 0),oa([r.Column,sa("design:type",Number)],la.prototype,"count",void 0),oa([r.Column,sa("design:type",Date)],la.prototype,"created_at",void 0),oa([r.Column,sa("design:type",Number)],la.prototype,"created_by",void 0),oa([r.Column,sa("design:type",Date)],la.prototype,"deleted_at",void 0),oa([r.Column,sa("design:type",Date)],la.prototype,"updated_at",void 0),oa([r.Column,sa("design:type",Number)],la.prototype,"updated_by",void 0),la=oa([(0,r.Table)({modelName:"billing_insurances",tableName:"billing_insurances",timestamps:!0,paranoid:!0,createdAt:"created_at",updatedAt:"updated_at",deletedAt:"deleted_at"})],la);const da=[la,u,Xi,na,ta,h,Oi,Pi,B,T,k,C,F,Gt,Ut,je,Mt,xt,Et,Pt,Ni,V,z,Dt,g,J,ee,ae,gi,Qe,Ze,He,le,Ce,Ie,re,Ei,Le,ue,ge,Oe,he,it,ot,dt,ct,mt,ft,bt,qe,Wt,Ke,$e,ti,ni,li,ri,ui,hi,Ii,Wi,Gi,Ui,Mi,xi,Xt,Y];e.config({path:".env"});const _a=new r.Sequelize(process.env.DATABASE_NAME,process.env.DATABASE_USERNAME,process.env.DATABASE_PASSWORD,{dialect:"mysql",host:process.env.DATABASE_HOST,logging:"local"===process.env.NODE_ENVR,models:[...da],pool:{development:{acquire:6e4,evict:1e4,idle:3e4,max:30},qa:{acquire:6e4,evict:1e4,idle:3e4,max:5},staging:{acquire:6e4,evict:1e4,idle:3e4,max:5},production:{acquire:6e4,evict:1e4,idle:3e4,max:5}}[process.env.NODE_ENVR],port:+process.env.DATABASE_PORT,replication:{read:[{database:process.env.READ_DATABASE_NAME,host:process.env.READ_DATABASE_HOST,password:process.env.READ_DATABASE_PASSWORD,username:process.env.READ_DATABASE_USERNAME}],write:{database:process.env.WRITE_DATABASE_NAME,host:process.env.WRITE_DATABASE_HOST,password:process.env.WRITE_DATABASE_PASSWORD,username:process.env.WRITE_DATABASE_USERNAME}}}),ra=require("sequelize");class ca{constructor(e){this.model=e,this.UpdateRecordWithUniqueClause=e=>{return t=this,i=void 0,n=function*(){const t=e.map((e=>`(${e.join(",")})`)).join(",");_a.query("update customers_table as c set slots = c2.no_of_slots from (values (?),(?)) as c2(id, name)\n            where c2.id = c.id",{replacements:t})},new((a=void 0)||(a=Promise))((function(e,o){function s(e){try{d(n.next(e))}catch(e){o(e)}}function l(e){try{d(n.throw(e))}catch(e){o(e)}}function d(t){var i;t.done?e(t.value):(i=t.value,i instanceof a?i:new a((function(e){e(i)}))).then(s,l)}d((n=n.apply(t,i||[])).next())}));var t,i,a,n},this.temp=JSON.stringify(this.model)}}var pa=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};const ua=ra.Op;class ma{constructor(e){this.model=e,this.raw=new ca(this.model.name)}executeRawQuery(e){return pa(this,void 0,void 0,(function*(){return this.model.sequelize.query(e)}))}getPaginate(e,t,i,a,n){return pa(this,void 0,void 0,(function*(){const a=(t-1)*i,o=yield this.model.findAndCountAll(Object.assign(Object.assign(Object.assign({},e),{offset:a,limit:i}),n)),s=(null==o?void 0:o.count)>0?Math.ceil((null==o?void 0:o.count)/i):0,l=t<s;return{no_of_pages:s,total:null==o?void 0:o.count,page_number:t,is_last:!l,docs:null==o?void 0:o.rows}}))}appointmentpaginate(e,t,i,a,n){return pa(this,void 0,void 0,(function*(){const a=(t-1)*i,o=(yield this.model.findAll(Object.assign(Object.assign({},e),n))).filter((e=>{var t,i,a;return(null===(t=e.toJSON().dateList)||void 0===t?void 0:t.availableDoctor)||(null===(a=null===(i=e.toJSON())||void 0===i?void 0:i.dateList)||void 0===a?void 0:a.availableSpeciality)})).length,s=(yield this.model.findAll(Object.assign(Object.assign(Object.assign({},e),{offset:a,limit:i}),n))).filter((e=>{var t,i,a;return(null===(t=e.toJSON().dateList)||void 0===t?void 0:t.availableDoctor)||(null===(a=null===(i=e.toJSON())||void 0===i?void 0:i.dateList)||void 0===a?void 0:a.availableSpeciality)})),l=o>0?Math.ceil(o/i):0;return{no_of_pages:l,total:o,page_number:t,is_last:!(t<l),docs:s}}))}customAppointmentpaginate(e,t,i,a,n){return pa(this,void 0,void 0,(function*(){const a=JSON.parse(JSON.stringify(yield this.model.findAll(Object.assign(Object.assign({},e),n)))).filter((e=>{var t,i;return(null===(t=e.dateList)||void 0===t?void 0:t.availableDoctor)||(null===(i=e.dateList)||void 0===i?void 0:i.availableSpeciality)})),o=a.length,s=a.slice((t-1)*i,t*i),l=o>0?Math.ceil(o/i):0;return{no_of_pages:l,total:o,page_number:t,is_last:!(t<l),docs:s}}))}bulkCreate(e,t){return pa(this,void 0,void 0,(function*(){return this.model.bulkCreate(e,{transaction:t})}))}bulkUpdate(e,t,i,a){return pa(this,void 0,void 0,(function*(){return this.model.bulkCreate(e,{fields:i,updateOnDuplicate:a,transaction:t})}))}count(e,t,i){return pa(this,void 0,void 0,(function*(){return this.model.count(Object.assign({col:e,where:Object.assign({},t),distinct:!0},i))}))}create(e,t){return pa(this,void 0,void 0,(function*(){return this.model.create(e,{transaction:t})}))}destroy(e,t,i){return pa(this,void 0,void 0,(function*(){if(!e||!t)return null;const a=e?{id:e}:t;return this.model.destroy({where:a,transaction:i})}))}exists(e,t){return pa(this,void 0,void 0,(function*(){if(e){const t=yield this.findById(e);return!(!t||!Object.keys(t).length)}const i=yield this.findAll(t);return!(!i||!i.length)}))}findAll(e,t,i){return pa(this,void 0,void 0,(function*(){return this.model.findAll(Object.assign(Object.assign({where:Object.assign({},e)},t),{transaction:i}))}))}findById(e,t,i){return pa(this,void 0,void 0,(function*(){return this.model.findByPk(e,Object.assign(Object.assign({},t),{transaction:i}))}))}findOne(e,t,i){return pa(this,void 0,void 0,(function*(){return this.model.findOne(Object.assign(Object.assign({where:Object.assign({},e)},t),{transaction:i}))}))}paginate(e,t,i,a,n){return pa(this,void 0,void 0,(function*(){const a=(t-1)*i,o=(yield this.model.findAll(Object.assign(Object.assign(Object.assign({},e),{offset:a,limit:i}),n))).length,s=yield this.model.findAll(Object.assign(Object.assign(Object.assign({},e),{offset:a,limit:i}),n)),l=o>0?Math.ceil(o/i):0;return{no_of_pages:l,total:o,page_number:t,is_last:!(t<l),docs:s}}))}update(e,t,i){return pa(this,void 0,void 0,(function*(){const[a]=yield this.model.update(Object.assign({},t),{where:{id:e},individualHooks:!0,transaction:i});return a?this.findById(e):null}))}updateByColumnMatched(e,t,i){return pa(this,void 0,void 0,(function*(){const[a]=yield this.model.update(Object.assign({},t),{where:Object.assign({},e),individualHooks:!0,transaction:i});return a}))}updateByIds(e,t,i){return pa(this,void 0,void 0,(function*(){const[a]=yield this.model.update(Object.assign({},t),{where:{id:{[ua.in]:e}},individualHooks:!0,transaction:i});return a?this.model.findAll({where:{id:{[ua.in]:e}}}):null}))}updateByReferenceIds(e,t,i){return pa(this,void 0,void 0,(function*(){const[a]=yield this.model.update(Object.assign({},t),{where:Object.assign({},e),individualHooks:!0,transaction:i});return a?this.model.findAll({where:Object.assign({},e)}):null}))}}const ya=new class extends ma{constructor(e){super(e),this.actionPreferences=e,this.getJoinClause=e=>this.joinClause[e],this.joinClause={update_unavailable_doctors:[{as:"actionPreferencesType",model:z,required:!1,where:{deleted_at:null}},{as:"actionPreferencesFacilityLocations",model:Dt,required:!1,where:{deleted_at:null}}]}}}(V),ha=new class extends ma{constructor(e){super(e),this.actionPreferencesTypes=e}}(z),fa=new class extends ma{constructor(e){super(e),this.actionPreferenceForwardFacilityLocationRepository=e}}(Dt),va=new class extends ma{constructor(e){super(e),this.modelHasRoles=e,this.getJoinClause=e=>this.joinClause[e],this.joinClause={get_doctor_info:{model:he,as:"role",required:!1},get_filtered_doctor:{model:he,as:"role",required:!1}}}}(je),ga=new class extends ma{constructor(e){super(e),this._users=e,this.getJoinClause=e=>this.joinClause[e],this.joinClause={get_doctor_appointments:{as:"colorCodes",include:{as:"type",model:Qe,where:{slug:"facility_location"}},model:Ze,required:!1,where:{deleted_at:null}},get_doctor_detail:{as:"type",model:Qe,required:!1,where:{deleted_at:null,slug:"speciality"}},get_doctor_info:{as:"type",model:Qe,required:!0,where:{deleted_at:null,slug:"speciality"}},get_filtered_doctor:{as:"colorCodes",include:{as:"type",model:Qe,required:!1,where:{deleted_at:null,slug:"speciality"}},model:Ze,required:!1,where:{deleted_at:null}}}}}(le),ba=new class extends ma{constructor(e){super(e),this.unAvailableDoctorNotifications=e}}(F),Sa=new class extends ma{constructor(e){super(e),this.colorCodeTypes=e}}(Gt),Ia=new class extends ma{constructor(e){super(e),this.casePatientSessionStatuses=e}}(Pt),Da=new class extends ma{constructor(e){super(e),this.appointmentPriorities=e}}(ee),wa=new class extends ma{constructor(e){super(e),this.appointmentStatus=e}}(g),Oa=new class extends ma{constructor(e){super(e),this.userBasicInfo=e}}(Ce),Ta=new class extends ma{constructor(e){super(e),this.userFacility=e,this.getJoinClause=e=>this.joinClause[e],this.joinClause={get_doctor_info:[{as:"speciality",model:ue},{as:"users",include:[{as:"userBasicInfo",model:Ce,where:{deleted_at:null}},{as:"userTimings",model:Le,where:{deleted_at:null}}],model:le,where:{deleted_at:null}}],get_filtered_doctor:{as:"users",include:[{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},{as:"userTimings",model:Le,required:!1,where:{deleted_at:null}},{as:"userFacilities",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:Ie,required:!1,where:{deleted_at:null}}],model:le,required:!1,where:{deleted_at:null}}}}}(Ie),Aa=new class extends ma{constructor(e){super(e),this._specialities=e}}(ue),Na=new class extends ma{constructor(e){super(e),this.facilityLocations=e}}(Oe),Ca=new class extends ma{constructor(e){super(e),this.facilityTimings=e}}(ge),Ra=new class extends ma{constructor(e){super(e),this.colorCodes=e}}(Ze),Ea=new class extends ma{constructor(e){super(e),this.colorCodeTypes=e}}(Qe),La=new class extends ma{constructor(e){super(e),this._roles=e}}(he),ka=new class extends ma{constructor(e){super(e),this.appointments=e,this.appendWhereClause=(e,t,i)=>e.map((e=>(e.as===t&&(e.where=Object.assign({},i)),e))),this.getJoinClause=e=>this.joinClause[e],this.joinClause={get_appointment_list_mandatory:[{model:Wt,as:"caseType",required:!1,where:{deleted_at:null}},{as:"availableDoctor",include:[{as:"facilityLocations",model:Oe,required:!1}],model:ot,required:!1,where:{deleted_at:null}},{as:"appointmentType",model:J,required:!1,where:{deleted_at:null}},{as:"appointmentStatus",model:g,required:!1,where:{deleted_at:null}},{as:"patient",model:Et,required:!0,where:{deleted_at:null}},{model:Ui,as:"physicianClinic",attributes:["id","clinic_id","clinic_locations_id","physician_id"],required:!1,where:{deleted_at:null},include:[{model:Ii,as:"physician",attributes:["id","first_name","last_name","middle_name","cell_no","email","npi_no","license_no"],required:!1,where:{deleted_at:null}},{model:Mi,as:"clinic",required:!1,where:{deleted_at:null}},{model:xi,as:"clinicLocation",required:!1,where:{deleted_at:null}}]},{model:le,as:"technician",required:!1,attributes:["id","email"],include:{model:Ce},where:{deleted_at:null}},{model:le,as:"readingProvider",required:!1,attributes:["id","email"],include:{model:Ce},deleted_at:null},{model:gi,as:"transportations",required:!1,where:{deleted_at:null}},{model:Ni,as:"appointmentCptCodes",required:!1,where:{deleted_at:null},include:{model:Oi,as:"billingCode",required:!1,where:{deleted_at:null}}}],get_appointment_list_optional:{as:"availableSpeciality",include:[{as:"facilityLocation",model:Oe,required:!1,where:{deleted_at:null}},{as:"speciality",model:ue,required:!1,where:{deleted_at:null}}],model:it,required:!1,where:{deleted_at:null}},get_appointment_mandatory:[{as:"case",attributes:["id"],model:ti,required:!1,where:{deleted_at:null},include:{model:ni,as:"caseStatus",attributes:["id","name"]}},{as:"patientSessions",include:{as:"visitStatus",attributes:["name","slug"],model:Pt,required:!0,where:{deleted_at:null}},model:B,required:!0,where:{deleted_at:null}},{model:Wt,as:"caseType",required:!1,where:{deleted_at:null}},{as:"appointmentType",model:J,required:!1,where:{deleted_at:null}},{as:"appointmentStatus",model:g,required:!1,where:{deleted_at:null}},{as:"patient",model:Et,required:!0,where:{deleted_at:null}},{model:Ui,as:"physicianClinic",attributes:["id","clinic_id","clinic_locations_id","physician_id"],required:!1,where:{deleted_at:null},include:[{model:Ii,as:"physician",attribute:["id","first_name","last_name","middle_name","cell_no","email","npi_no","license_no"],required:!1,where:{deleted_at:null}},{model:Mi,as:"clinic",required:!1,where:{deleted_at:null}},{model:xi,as:"clinicLocation",required:!1,where:{deleted_at:null}}]},{model:le,as:"technician",required:!1,attributes:["id","email"],include:{model:Ce},where:{deleted_at:null}},{model:le,as:"readingProvider",required:!1,attributes:["id","email"],include:{model:Ce},deleted_at:null},{model:gi,as:"transportations",required:!1,where:{deleted_at:null}},{model:Ni,as:"appointmentCptCodes",required:!1,where:{deleted_at:null},include:{model:Oi,as:"billingCode",required:!1,where:{deleted_at:null}}}],get_doctor_appointments:[{as:"patient",model:Et,required:!1,where:{deleted_at:null}},{as:"priority",model:ee,required:!1,where:{deleted_at:null}},{as:"appointmentType",model:J,required:!1,where:{deleted_at:null}},{as:"appointmentStatus",model:g,required:!1,where:{deleted_at:null}},{as:"appointmentVisit",include:{as:"visitState",model:$e,required:!1,where:{deleted_at:null}},model:Ke,required:!1,where:{deleted_at:null}}],get_patient_appointments:[{as:"availableDoctor",include:[{as:"facilityLocations",include:{as:"facility",model:Ut,required:!1,where:{deleted_at:null}},model:Oe,required:!1,where:{deleted_at:null}},{as:"doctor",attributes:{exclude:["password"]},include:[{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},{as:"userFacilities",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:Ie,required:!1,where:{deleted_at:null}}],model:le,required:!1,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:[{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},{as:"facilityLocation",include:{as:"facility",model:Ut,required:!1},model:Oe,required:!1,where:{deleted_at:null}}],model:it,required:!1,where:{deleted_at:null}},{as:"priority",model:ee,required:!1,where:{deleted_at:null}},{as:"appointmentType",model:J,required:!1,where:{deleted_at:null}},{as:"patientSessions",include:{as:"visitStatus",model:Pt,required:!1,where:{deleted_at:null}},model:B,required:!1,where:{deleted_at:null}}],get_speciality_appointments:[{as:"patient",model:Et,required:!1,where:{deleted_at:null}},{as:"priority",model:ee,required:!1,where:{deleted_at:null}},{as:"appointmentType",model:J,required:!1,where:{deleted_at:null}},{as:"appointmentStatus",model:g,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:it,required:!1,where:{deleted_at:null}},{as:"appointmentVisit",include:{as:"visitState",model:$e,required:!1,where:{deleted_at:null}},model:Ke,required:!1,where:{deleted_at:null}},{model:Ui,as:"physicianClinic",attributes:["id","clinic_id","clinic_locations_id","physician_id"],required:!1,where:{deleted_at:null},include:[{model:Ii,as:"physician",attribute:["id","first_name","last_name","middle_name","cell_no","email","npi_no","license_no"],required:!1,where:{deleted_at:null}},{model:Mi,as:"clinic",required:!1,where:{deleted_at:null}},{model:xi,as:"clinicLocation",required:!1,where:{deleted_at:null}}]},{model:le,as:"technician",required:!1,attributes:["id","email"],include:{model:Ce},where:{deleted_at:null}},{model:le,as:"readingProvider",required:!1,attributes:["id","email"],include:{model:Ce},deleted_at:null},{model:gi,as:"transportations",required:!1,where:{deleted_at:null}},{model:Ni,as:"appointmentCptCodes",required:!1,where:{deleted_at:null},include:{model:Oi,as:"billingCode",required:!1,where:{deleted_at:null}}}],get_patient_history_appointments:[{model:Et,require:!1,where:{deleted_at:null}},{as:"patientSessions",include:{as:"visitStatus",model:Pt,required:!1,where:{deleted_at:null}},model:B,required:!1,where:{deleted_at:null}},{model:g,required:!1,as:"appointmentStatus",where:{deleted_at:null}},{model:J,required:!1,as:"appointmentType",where:{deleted_at:null}},{model:Wt,as:"caseType",required:!1,where:{deleted_at:null}},{model:ee,as:"priority",required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:[{as:"facilityLocation",model:Oe,required:!1,where:{deleted_at:null},include:{model:Ut,as:"facility",required:!1,where:{deleted_at:null}}},{as:"speciality",model:ue,required:!1,where:{deleted_at:null}}],model:it,required:!1,where:{deleted_at:null}},{as:"availableDoctor",include:[{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:it,required:!1,where:{deleted_at:null}},{as:"facilityLocations",model:Oe,required:!1,where:{deleted_at:null},include:{model:Ut,as:"facility",required:!1,where:{deleted_at:null}}},{as:"doctor",attributes:{exclude:["password"]},include:{model:Ce,as:"userBasicInfo",required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null}},{model:Ui,as:"physicianClinic",attributes:["id","clinic_id","clinic_locations_id","physician_id"],required:!1,where:{deleted_at:null},include:[{model:Ii,as:"physician",attribute:["id","first_name","last_name","middle_name","cell_no","email","npi_no","license_no"],required:!1,where:{deleted_at:null}},{model:Mi,as:"clinic",required:!1,where:{deleted_at:null}},{model:xi,as:"clinicLocation",required:!1,where:{deleted_at:null}}]},{model:le,as:"readingProvider",required:!1,attributes:["id","email"],include:{model:Ce},deleted_at:null},{model:gi,required:!1,where:{deleted_at:null}},{model:Ni,as:"appointmentCptCodes",required:!1,where:{deleted_at:null},include:{model:Oi,as:"billingCode",required:!1,where:{deleted_at:null}}}]}}}(He),Pa=new class extends ma{constructor(e){super(e),this.availableSpecialities=e}}(it),ja=new class extends ma{constructor(e){super(e),this.appointmentCancellationComments=e}}(ae),Ba=new class extends ma{constructor(e){super(e),this.availableDoctors=e,this.getJoinClause=e=>this.joinClause[e],this.joinClause={get_doctor_assignments:[{as:"facilityLocations",model:Oe,required:!1},{as:"doctor",attributes:{exclude:["password"]},include:[{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},{as:"userFacilities",model:Ie,required:!1,where:{deleted_at:null}}],model:le,required:!1,where:{deleted_at:null}},{as:"dateList",model:qe,required:!1,where:{deleted_at:null}},{as:"dayList",model:mt,required:!1,where:{deleted_at:null}}]}}}(ot),Ua=new class extends ma{constructor(e){super(e),this.recurrenceEndingCriterias=e}}(dt),qa=new class extends ma{constructor(e){super(e),this.dayLists=e}}(ct),Fa=new class extends ma{constructor(e){super(e),this.dayLists=e}}(mt),Ma=(new class extends ma{constructor(e){super(e),this.userTimings=e}}(Le),new class extends ma{constructor(e){super(e),this._facilities=e}}(Ut),new class extends ma{constructor(e){super(e),this.unavailableDoctors=e,this.getJoinClause=e=>this.joinClause[e],this.joinClause={}}}(ft)),$a=new class extends ma{constructor(e){super(e),this.availableDoctorNotifications=e}}(bt),Va=new class extends ma{constructor(e){super(e),this.recurrenceDateLists=e}}(qe),xa=new class extends ma{constructor(e){super(e),this.appointmentTypes=e}}(J),Ka=new class extends ma{constructor(e){super(e),this.caseTypes=e}}(Wt),za=new class extends ma{constructor(e){super(e),this.medicalIdentifier=e}}(Mt),Ga=(new class extends ma{constructor(e){super(e),this.billingTitle=e}}(xt),new class extends ma{constructor(e){super(e),this.billingCodes=e}}(Oi)),Ha=new class extends ma{constructor(e){super(e),this.visitSessions=e}}(Ke),Ya=new class extends ma{constructor(e){super(e),this.kioskContactPerson=e}}(T),Wa=new class extends ma{constructor(e){super(e),this.kioskContactPersonTypes=e}}(C),Qa=new class extends ma{constructor(e){super(e),this.KioskPatient=e}}(Et),Ja=new class extends ma{constructor(e){super(e),this.assignProviderTypes=e}}(Xt),Xa=new class extends ma{constructor(e){super(e),this.kioskCase=e}}(ti),Za=new class extends ma{constructor(e){super(e),this.casePatientSession=e}}(B),en=new class extends ma{constructor(e){super(e),this.transportations=e}}(gi),tn=new class extends ma{constructor(e){super(e),this.AppointmentCptCodes=e}}(Ni),an=new class extends ma{constructor(e){super(e),this.userSpeciality=e}}(Ei),nn=(new class extends ma{constructor(e){super(e),this.caseReferrals=e}}(Pi),new class extends ma{constructor(e){super(e),this.technicianSupervisors=e}}(h)),on=new class extends ma{constructor(e){super(e),this.PtSession=e}}(Wi),sn=require("axios");var ln=i.n(sn),dn=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};class _n{constructor(){this.emailGenator=(e,t,i)=>{try{return ln().post(e,t,i),null}catch(e){throw console.log("error",e),e.response?e.response.data:Object.assign({},e.data)}},this.get=(e,t)=>dn(this,void 0,void 0,(function*(){var i,a;try{const i=yield ln().get(e,t);return null==i?void 0:i.data}catch(e){throw Object.assign(Object.assign({},null===(i=null==e?void 0:e.response)||void 0===i?void 0:i.data),{status:null===(a=null==e?void 0:e.response)||void 0===a?void 0:a.status})}})),this.logger=(e,t,i)=>{try{return ln().post(e,t,i),null}catch(e){throw console.log("error",e),e.response?e.response.data:Object.assign({},e.data)}},this.post=(e,t,i)=>dn(this,void 0,void 0,(function*(){var a,n;try{return(yield ln().post(e,t,i)).data}catch(e){throw Object.assign(Object.assign({},null===(a=null==e?void 0:e.response)||void 0===a?void 0:a.data),{status:null===(n=null==e?void 0:e.response)||void 0===n?void 0:n.status})}})),this.put=(e,t,i)=>dn(this,void 0,void 0,(function*(){var a,n;try{return(yield ln().put(e,t,i)).data}catch(e){throw Object.assign(Object.assign({},null===(a=null==e?void 0:e.response)||void 0===a?void 0:a.data),{status:null===(n=null==e?void 0:e.response)||void 0===n?void 0:n.status})}})),this.webhook=(e,t,i)=>{try{return ln().post(e,t,i),null}catch(e){throw console.log("error",e),e.response?e.response.data:Object.assign({},e.data)}}}}const rn=new _n;function cn(e){Object.freeze(e),Object.freeze(e.prototype)}const pn={development:{en:{SPECIALITY_REQUIRED:{message:"Specialty field is required",status:406},FACILITY_REQUIRED:{message:"Facility field is required",status:406},CPT_CODES_REQUIRED:{message:"Cpt Code  field is required",status:406},UNAVAILBILITY_SAME_TIME:{message:"Provider already has unavailability at this time",status:406},PATIENT_APPOINTMENT_EXIST:{message:"First delete follow-Up & Re-Evaluation Appointments",status:406},NO_SAME_APPOINTMENT:{message:"No same appointment",status:406},CLINIC_NOT_FOUND:{message:"clinic not found!",status:406},NO_FIND_SPECIALIYT:{message:"Cannot find specialty of already assigned provider",status:406},NO_USER_PRACTICE:{message:"User has not allowed any practice",status:406},NO_PROVIDE_PARACTICE:{message:"Provider is not allowed any practice",status:406},NO_PROVIDER_AVAILABLE:{message:"Provider is not available at this time",status:406},NO_DAYS_FOUND:{message:"No Days Found",status:406},NO_RESCHEDULED_APPOINTMENT:{message:"Initial Appointment cannot be rescheduled after follow-up/re-evaluation appointment.",status:406},NO_RESCHEDULED_INTIAL_APPONTMENT:{message:"Appointment cannot be rescheduled before initial appointment.",status:406},EVALUATION_ALREADY_STARTED:{message:"Appointment can't be updated because the evaluation has been already started.",status:406},NO_SHOW_STATUS:{message:"Appointment can't be updated because status is No Show.",status:406},NO_CREATED_APPOINTMENT:{message:"Initial Appointment cannot be created after follow-up/re-evaluation appointment.",status:406},APPOINTMENT_NOT_CREATED_BEFORE_INTIAL:{message:"Follow-up/Re-evaluation Appointment cannot be created before initial appointment.",status:406},NO_APPOINTMENT_CREATED_RECCURENCE:{message:"Initial Evaluation Appointment cannot be created in recurrence!",status:406},ERROR_FROM_KIOSK:{message:"Error from Kiosk",status:406},NO_SUPER_ADMIN:{message:"User is not super admin or is not practice supervisor on these facilities",status:406},APPOINTMENT_WITHOUT_DOCTOR:{message:"This appointment can not be created without doctor",status:406},NO_TIME_FALL:{message:"New time doesn't fall in provider day/timings",status:406},NO_MANUALLY_DOCTORS:{message:"No manually selected doctors provided.",status:406},ID_MUST_PROVIDED:{message:"Id must be provided",status:406},USER_NOT_SUPERADMIN:{message:"User is not superAdmin",status:406},USER_ID_MUST_PROVIDED:{message:"User Id must be provided",status:406},ALREADY_ACTION:{message:"Action already performed",status:406},NO_UNAVAILABILTY_FOUND:{message:"Unavailability not found",status:406},ASSIGNMENT_NOT_FOUND:{message:"Provider assignment not found!",status:406},APPOINTMENT_NOT_FOUND:{message:"Appointment not found!",status:406},EVALUATION_ALREADY_UPDATE:{message:"Appointment Evaluation Already Update!",status:406},PROVIDER_DOES_NOT_HAVE_WC_AUTH:{message:"Provider does not have WC authorization!",status:406},APPOINTMENT_ALREADY_IN_PROCESS:{message:"Appontment cannot be updated because Initial Evaluation Appointment is already in progress!",status:406},APPOINTMENT_CAN_NOT_CREATED_ON_PREVIOUS_DATE:{message:"Appointment cannot be created on previous Date",status:406},APPOINTMENT_CAN_NOT_DONE_BEFORE_INITIAL_EVALUATION:{message:"Appointment cannot be done before or on Initial Evaluation Appointment Datetime",status:406},APPOINTMENT_CAN_NOT_RESOLVED:{message:"ALL appointments cannot be resolved.",status:406},APPOINTMENT_EXISTS:{message:"Could not update because appointment exists for this assignment!",status:406},APPOINTMENT_MUST_END_BEFORE_PROGRESS:{message:"Initial Appointment must end before re-evaluation/progress",status:406},ASSIGNMENT_CREATED_SUCCESSFULLY_WITH_NO_DOCTOR_ASSIGNMENT:{message:"Assignment Added/Created successfully but Providers are not available for complete Assignment",status:200},ASSIGNMENT_DOES_NOT_FALL:{message:"Assignment does not fall within office hours",status:400},ASSIGNMENT_DOES_NOT_FALL_FOR_DOCTOR:{message:"Assignment does not fall within office hours",status:400},ASSIGNMENT_TO_YOURSELF:{message:"This appointment has already been assigned to another provider. Please refresh your calendar.",status:400},CANNOT_CREATE_SPECIALITY_APPOINTMENT:{message:"You cannot create specialty appointment for given specialty. Please update specialty information.",status:406},CANNOT_DELETE_ASSIGNMENT_WITH_APPOINTMENT:{message:"Assignment with Appointments cannot be deleted",status:406},CANNOT_FIND_FREESLOTS:{message:"Cannot find freeSlots for all given appointments",status:406},CANNOT_GET_VISIT_STATUS:{message:"Error occured while getting visit status!",status:406},DOES_NOT_HAVE_PRACTISE:{message:"Each provider doesn't have specified practice as primary/secondary location.",status:406},ERROR_WHILE_FETCHING_FINALIZE_STATUS:{message:"Error occured while getting finalize status!",status:406},ERROR_WHILE_GETTING_STATUS_FROM_KIOSK:{message:"Error occured while getting status from kiosk!",status:406},ERROR_WHILE_UPDATING_STATUS:{message:"Error occured while updating visit status!",status:406},INTERNAL_SERVER_ERROR:{message:"Internal server error",status:500},INVALID_APPOINTMENT_IDS:{message:"Appointment id(s) not valid!",status:406},INVALID_APPOINTMENT_TYPE_ID:{message:"Invalid Appointment type id.",status:406},INVALID_ASSIGNMENT_ID:{message:"Invalid Assignment id.",status:406},INVALID_PATIENT_ID:{message:"Invalid Patient Id",status:406},INVALID_SESSION_TYPE:{message:"Invalid session type.",status:400},INVALID_SPECIALITY_IDS:{message:"Invalid specialty id(s)",status:406},LOGGED_IN_NOT_FOUND:{message:"Logged-In User not found!",status:406},LOGGED_IN_NOT_PROVIDER:{message:"Logged In user is not a provider.",status:406},MANUAL_ASSIGNMENT_NO_OF_DOCTORS:{message:"Selected providers should be equal to no of providers",status:406},NO_APPOINTMENT_FOUND:{message:"No appointments Found!",status:406},NO_APPOINTMENT_OF_GIVEN_ID:{message:"Cannot find appointment against given id.",status:406},NO_APPOINTMENT_TO_SHOW:{message:"No appointments to show as per users rights.",status:406},NO_ASSIGNMENT_FOUND:{message:"No assignment found",status:406},NO_ASSIGNMENT_FOUND_FOR_GIVEN_APPOINTMENT_TIME:{message:"Cannot find assignment for given appointment time.",status:406},NO_PROVIDER_ASSIGNMENT_FOUND_FOR_GIVEN_APPOINTMENT_TIME:{message:"Cannot find provider assignment at the given time.",status:406},NO_ASSIGNMENT_PROPOSED:{message:"No new assignment proposed",status:406},NO_DOCTOR_FOUND:{message:"No doctor exist for specified id.",status:400},NO_FACILITY_LOCATION_FOUND:{message:"No facility location exist for specified id",status:406},NO_FREE_SLOTS_FOUND:{message:"No freeslots on practice(s)",status:406},NO_HISTORY_FOUND:{message:"Assignment history doesn't exist",status:406},NO_INITIAL_EVALUATION_ASSIGNMENT:{message:"No Initial Evaluation Appointment of this patient for this case and specialty!",status:406},NO_OTHER_ASSIGNMENTS_FOUND:{message:"No other assignments of provider.",status:406},NO_PRACTICES_FOUND:{message:"Practice(s) not found",status:406},NO_PROVIDER_FOUND:{message:"No provider found for this specialty.",status:406},NO_PROVIDER_FOUND_FOR_WORKER_COMPENSATION:{message:"No provider found for Worker Compensation Case!",status:406},NO_PROVIDER_OF_SPECIALITY_FOUND:{message:"No Providers of this specialty found! TimeSlot of specialty is changed",status:406},NO_RECORD_FOUND:{message:"No record exists in the system.",status:406},NO_SLOTS_REMAINING:{message:"No slots remaining at this time.",status:406},NO_SLOT_FOUND:{message:"No Slots found",status:406},NO_SPECIALITY_ASSIGNMENT_FOUND:{message:"No speciality assignment found",status:406},NO_SPECIALITY_FOUND:{message:"No speciality exist for specified id.",status:400},NO_SPECIALITY_FOUND_FOR_KEY:{message:"No speciality exist for specified speciality_key.",status:400},NO_WC_AUTHORIZE:{message:"Provider does not have WC authorizatio.",status:400},PAST_APPOINTMENTS:{message:"Past Appointment can not be evaluated.",status:406},PATIENT_ALREADY_HAVE_APPOINTMENT_SAME_DAY:{message:"Patient already has appointment on the same day.",status:406},APPOINTMENT_ALREADY_EXIST:{message:"Appointment already exist",status:406},FUTURE_APPOINTMENTS:{message:"Future Appointment can not be evaluated.",status:406},PATIENT_ALREADY_HAVE_ASSIGNMENT:{message:"Patient already has appointment at this time.",status:406},PATIENT_ALREADY_IN_SESSION:{message:"Patient already in In-Session.",status:406},PATIENT_ALREADY_HAVE_INITIAL_EVALUATION_ASSIGNMENT:{message:"Patient already has Initial Evaluation Appointment for this case and specialty!",status:406},PROVIDER_ALREADY_ASSIGN:{message:"Provider is already assigned",status:406},PROVIDER_IS_NOT_ASSIGNED_TO_ANY_SPECIALITY:{message:"Provider is not assigned any specialty",status:406},PROVIDER_NOT_AVAILABLE:{message:"Provider is not available",status:406},PROVIDER_NOT_FOUND:{message:"Provider not found",status:406},SAME_ASSIGNMENT_EXIST:{message:"Same assignment already exist",status:406},SUCCESS:{message:"success",status:200},UNKNOWN_QUERY_PARAMS:{message:"Unrecognized query params",status:406},USER_EXISTS:{message:"User Already exists",status:406},USER_HAS_NO_ROLES:{message:"No roles found against Logged-In User!",status:406},USER_NOT_ALLOWED:{message:"User is not allowed this practice!",status:406},VISIT_STATUS_IS_NOT_CHECKED_IN:{message:"Visit status is not 'Checked-In'. This evaluation cannot be started!",status:406},VISIT_STATUS_IS_NO_SHOW:{message:"Appointment and Visit status is No Show. Evaluation cannot be started",status:406},CASE_ID_REQUIRED:{message:"Case id must be provided",status:406},APPOINTMENT_WITH_SAME_CRITERIA_EXIST:{message:"Appointment is already created with same criteria",status:406},APPOINTMENT_CANNOT_UPDATED:{message:"Appointment can not be updated as Appointment is already created with same criteria",status:406},REQUIRED_APPOINTMENT_NOT_EXIST:{message:"Required Appointment doesn't exist",status:406},SELECTED_APPOINTMENT_SPECIALITY_ERROR:{message:"Selected appointment type doesn't exist in selected speciality",status:406},SAME_TIME_APPOINTMENT_ERROR:{message:"Pateint already have scheduled appointment selected time!",status:406},VISIT_SESSION_ERROR:{message:"Visit Session doesn't exist",status:406},VALID_APPOINTMENT_NAME_ERROR:{message:"Provide valid appointment type",status:406},TIME_SLOTS_ISSUE:{message:"Selected Time slot is reserved.",status:406},CHECK_MASTER_VISIT_TYPE:{message:"Please check Specialty Master, Someone has updated the information!",status:406},validator:{body:{BODY_NOT_EMPTY:"request body should not empty",DOCTOR_ID_INTEGER:"doctor_id must be integer",DOCTOR_ID_REQUIRED:"doctor_id must cannot be empty",SPECIALITY_ID_INTEGER:"speciality_id must be integer",SPECIALITY_ID_REQUIRED:"speciality_id cannot be empty",USER_ID_INTEGER:"user_id must be integer",USER_ID_REQUIRED:"user_id must cannot be empty"},query:{CASE_IS_NOT_VALID:"case_id must cannot be integer",CHECK_IS_NOT_VALID:"check must be [daily, weekly, previous, upcomming]",DATE_IS_NOT_VALID:"date must be 0000-00-00",PAGE_IS_NOT_VALID:"page must be integer",PAGINATE_IS_NOT_VALID:"paginate must be boolean",PATIENT_ID_REQUIRED:"patient_id must cannot be empty",PER_PAGE_IS_NOT_VALID:"per_page must be integer",TEST:"test"}}}},production:{en:{SPECIALITY_REQUIRED:{message:"Specialty field is required",status:406},FACILITY_REQUIRED:{message:"Facility field is required",status:406},CPT_CODES_REQUIRED:{message:"Cpt Code  field is required",status:406},UNAVAILBILITY_SAME_TIME:{message:"Provider already has unavailability at this time",status:406},PATIENT_APPOINTMENT_EXIST:{message:"First delete follow-Up & Re-Evaluation Appointments",status:406},NO_SAME_APPOINTMENT:{message:"No same appointment",status:406},CLINIC_NOT_FOUND:{message:"clinic not found!",status:406},NO_FIND_SPECIALIYT:{message:"Cannot find specialty of already assigned provider",status:406},NO_USER_PRACTICE:{message:"User has not allowed any practice",status:406},NO_PROVIDE_PARACTICE:{message:"Provider is not allowed any practice",status:406},NO_PROVIDER_AVAILABLE:{message:"Provider is not available at this time",status:406},NO_DAYS_FOUND:{message:"No Days Found",status:406},NO_RESCHEDULED_APPOINTMENT:{message:"Initial Appointment cannot be rescheduled after follow-up/re-evaluation appointment.",status:406},NO_RESCHEDULED_INTIAL_APPONTMENT:{message:"Appointment cannot be rescheduled before initial appointment.",status:406},EVALUATION_ALREADY_STARTED:{message:"Appointment can't be updated because the evaluation has been already started.",status:406},NO_SHOW_STATUS:{message:"Appointment can't be updated because status is No Show.",status:406},NO_CREATED_APPOINTMENT:{message:"Initial Appointment cannot be created after follow-up/re-evaluation appointment.",status:406},APPOINTMENT_NOT_CREATED_BEFORE_INTIAL:{message:"Follow-up/Re-evaluation Appointment cannot be created before initial appointment.",status:406},NO_APPOINTMENT_CREATED_RECCURENCE:{message:"Initial Evaluation Appointment cannot be created in recurrence!",status:406},ERROR_FROM_KIOSK:{message:"Error from Kiosk",status:406},NO_SUPER_ADMIN:{message:"User is not super admin or is not practice supervisor on these facilities",status:406},APPOINTMENT_WITHOUT_DOCTOR:{message:"This appointment can not be created without doctor",status:406},NO_TIME_FALL:{message:"New time doesn't fall in provider day/timings",status:406},NO_MANUALLY_DOCTORS:{message:"No manually selected doctors provided.",status:406},ID_MUST_PROVIDED:{message:"Id must be provided",status:406},USER_NOT_SUPERADMIN:{message:"User is not superAdmin",status:406},USER_ID_MUST_PROVIDED:{message:"User Id must be provided",status:406},ALREADY_ACTION:{message:"Action already performed",status:406},NO_UNAVAILABILTY_FOUND:{message:"Unavailability not found",status:406},ASSIGNMENT_NOT_FOUND:{message:"Provider assignment not found!",status:406},APPOINTMENT_NOT_FOUND:{message:"Appointment not found!",status:406},EVALUATION_ALREADY_UPDATE:{message:"Appointment Evaluation Already Update!",status:406},PROVIDER_DOES_NOT_HAVE_WC_AUTH:{message:"Provider does not have WC authorization!",status:406},APPOINTMENT_ALREADY_IN_PROCESS:{message:"Appontment cannot be updated because Initial Evaluation Appointment is already in progress!",status:406},APPOINTMENT_CAN_NOT_CREATED_ON_PREVIOUS_DATE:{message:"Appointment cannot be created on previous Date",status:406},APPOINTMENT_CAN_NOT_DONE_BEFORE_INITIAL_EVALUATION:{message:"Appointment cannot be done before or on Initial Evaluation Appointment Datetime",status:406},APPOINTMENT_CAN_NOT_RESOLVED:{message:"ALL appointments cannot be resolved.",status:406},APPOINTMENT_EXISTS:{message:"Could not update because appointment exists for this assignment!",status:406},APPOINTMENT_MUST_END_BEFORE_PROGRESS:{message:"Initial Appointment must end before re-evaluation/progress",status:406},ASSIGNMENT_CREATED_SUCCESSFULLY_WITH_NO_DOCTOR_ASSIGNMENT:{message:"Assignment Added/Created successfully but Providers are not available for complete Assignment",status:200},ASSIGNMENT_DOES_NOT_FALL:{message:"Assignment does not fall within office hours",status:400},ASSIGNMENT_DOES_NOT_FALL_FOR_DOCTOR:{message:"Assignment does not fall within office hours",status:400},ASSIGNMENT_TO_YOURSELF:{message:"This appointment has already been assigned to another provider. Please refresh your calendar.",status:400},CANNOT_CREATE_SPECIALITY_APPOINTMENT:{message:"You cannot create specialty appointment for given specialty. Please update specialty information.",status:406},CANNOT_DELETE_ASSIGNMENT_WITH_APPOINTMENT:{message:"Assignment with Appointments cannot be deleted",status:406},CANNOT_FIND_FREESLOTS:{message:"Cannot find freeSlots for all given appointments",status:406},CANNOT_GET_VISIT_STATUS:{message:"Error occured while getting visit status!",status:406},DOES_NOT_HAVE_PRACTISE:{message:"Each provider doesn't have specified practice as primary/secondary location.",status:406},ERROR_WHILE_FETCHING_FINALIZE_STATUS:{message:"Error occured while getting finalize status!",status:406},ERROR_WHILE_GETTING_STATUS_FROM_KIOSK:{message:"Error occured while getting status from kiosk!",status:406},ERROR_WHILE_UPDATING_STATUS:{message:"Error occured while updating visit status!",status:406},INTERNAL_SERVER_ERROR:{message:"Internal server error",status:500},INVALID_APPOINTMENT_IDS:{message:"Appointment id(s) not valid!",status:406},INVALID_APPOINTMENT_TYPE_ID:{message:"Invalid Appointment type id.",status:406},INVALID_ASSIGNMENT_ID:{message:"Invalid Assignment id.",status:406},INVALID_PATIENT_ID:{message:"Invalid Patient Id",status:406},INVALID_SESSION_TYPE:{message:"Invalid session type.",status:400},INVALID_SPECIALITY_IDS:{message:"Invalid specialty id(s)",status:406},LOGGED_IN_NOT_FOUND:{message:"Logged-In User not found!",status:406},LOGGED_IN_NOT_PROVIDER:{message:"Logged In user is not a provider.",status:406},MANUAL_ASSIGNMENT_NO_OF_DOCTORS:{message:"Selected providers should be equal to no of providers",status:406},NO_APPOINTMENT_FOUND:{message:"No appointments Found!",status:406},NO_APPOINTMENT_OF_GIVEN_ID:{message:"Cannot find appointment against given id.",status:406},NO_APPOINTMENT_TO_SHOW:{message:"No appointments to show as per users rights.",status:406},NO_ASSIGNMENT_FOUND:{message:"No assignment found",status:406},NO_ASSIGNMENT_FOUND_FOR_GIVEN_APPOINTMENT_TIME:{message:"Cannot find assignment for given appointment time.",status:406},NO_PROVIDER_ASSIGNMENT_FOUND_FOR_GIVEN_APPOINTMENT_TIME:{message:"Cannot find provider assignment at the given time.",status:406},NO_ASSIGNMENT_PROPOSED:{message:"No new assignment proposed",status:406},NO_DOCTOR_FOUND:{message:"No doctor exist for specified id.",status:400},NO_FACILITY_LOCATION_FOUND:{message:"No facility location exist for specified id",status:406},NO_FREE_SLOTS_FOUND:{message:"No freeslots on practice(s)",status:406},NO_HISTORY_FOUND:{message:"Assignment history doesn't exist",status:406},NO_INITIAL_EVALUATION_ASSIGNMENT:{message:"No Initial Evaluation Appointment of this patient for this case and specialty!",status:406},NO_OTHER_ASSIGNMENTS_FOUND:{message:"No other assignments of provider.",status:406},NO_PRACTICES_FOUND:{message:"Practice(s) not found",status:406},NO_PROVIDER_FOUND:{message:"No provider found for this specialty.",status:406},NO_PROVIDER_FOUND_FOR_WORKER_COMPENSATION:{message:"No provider found for Worker Compensation Case!",status:406},NO_PROVIDER_OF_SPECIALITY_FOUND:{message:"No Providers of this specialty found! TimeSlot of specialty is changed",status:406},NO_RECORD_FOUND:{message:"No record exists in the system.",status:406},NO_SLOTS_REMAINING:{message:"No slots remaining at this time.",status:406},NO_SLOT_FOUND:{message:"No Slots found",status:406},NO_SPECIALITY_ASSIGNMENT_FOUND:{message:"No speciality assignment found",status:406},NO_SPECIALITY_FOUND:{message:"No speciality exist for specified id.",status:400},NO_SPECIALITY_FOUND_FOR_KEY:{message:"No speciality exist for specified speciality_key.",status:400},NO_WC_AUTHORIZE:{message:"Provider does not have WC authorizatio.",status:400},PAST_APPOINTMENTS:{message:"Past Appointment can not be evaluated.",status:406},PATIENT_ALREADY_HAVE_APPOINTMENT_SAME_DAY:{message:"Patient already has appointment on the same day.",status:406},APPOINTMENT_ALREADY_EXIST:{message:"Appointment already exist",status:406},FUTURE_APPOINTMENTS:{message:"Future Appointment can not be evaluated.",status:406},PATIENT_ALREADY_HAVE_ASSIGNMENT:{message:"Patient already has appointment at this time.",status:406},PATIENT_ALREADY_IN_SESSION:{message:"Patient already in In-Session.",status:406},PATIENT_ALREADY_HAVE_INITIAL_EVALUATION_ASSIGNMENT:{message:"Patient already has Initial Evaluation Appointment for this case and specialty!",status:406},PROVIDER_ALREADY_ASSIGN:{message:"Provider is already assigned",status:406},PROVIDER_IS_NOT_ASSIGNED_TO_ANY_SPECIALITY:{message:"Provider is not assigned any specialty",status:406},PROVIDER_NOT_AVAILABLE:{message:"Provider is not available",status:406},PROVIDER_NOT_FOUND:{message:"Provider not found",status:406},SAME_ASSIGNMENT_EXIST:{message:"Same assignment already exist",status:406},SUCCESS:{message:"success",status:200},UNKNOWN_QUERY_PARAMS:{message:"Unrecognized query params",status:406},USER_EXISTS:{message:"User Already exists",status:406},USER_HAS_NO_ROLES:{message:"No roles found against Logged-In User!",status:406},USER_NOT_ALLOWED:{message:"User is not allowed this practice!",status:406},VISIT_STATUS_IS_NOT_CHECKED_IN:{message:"Visit status is not 'Checked-In'. This evaluation cannot be started!",status:406},VISIT_STATUS_IS_NO_SHOW:{message:"Appointment and Visit status is No Show. Evaluation cannot be started",status:406},CASE_ID_REQUIRED:{message:"Case id must be provided",status:406},APPOINTMENT_WITH_SAME_CRITERIA_EXIST:{message:"Appointment is already created with same criteria",status:406},APPOINTMENT_CANNOT_UPDATED:{message:"Appointment can not be updated as Appointment is already created with same criteria",status:406},REQUIRED_APPOINTMENT_NOT_EXIST:{message:"Required Appointment doesn't exist",status:406},SELECTED_APPOINTMENT_SPECIALITY_ERROR:{message:"Selected appointment type doesn't exist in selected speciality",status:406},SAME_TIME_APPOINTMENT_ERROR:{message:"Pateint already have scheduled appointment selected time!",status:406},VISIT_SESSION_ERROR:{message:"Visit Session doesn't exist",status:406},VALID_APPOINTMENT_NAME_ERROR:{message:"Provide valid appointment type",status:406},TIME_SLOTS_ISSUE:{message:"Selected Time slot is reserved.",status:406},CHECK_MASTER_VISIT_TYPE:{message:"Please check Specialty Master, Someone has updated the information!",status:406},validator:{body:{BODY_NOT_EMPTY:"request body should not empty",DOCTOR_ID_INTEGER:"doctor_id must be integer",DOCTOR_ID_REQUIRED:"doctor_id must cannot be empty",SPECIALITY_ID_INTEGER:"speciality_id must be integer",SPECIALITY_ID_REQUIRED:"speciality_id cannot be empty",USER_ID_INTEGER:"user_id must be integer",USER_ID_REQUIRED:"user_id must cannot be empty"},query:{CASE_IS_NOT_VALID:"case_id must cannot be integer",CHECK_IS_NOT_VALID:"check must be [daily, weekly, previous, upcomming]",DATE_IS_NOT_VALID:"date must be 0000-00-00",PAGE_IS_NOT_VALID:"page must be integer",PAGINATE_IS_NOT_VALID:"paginate must be boolean",PATIENT_ID_REQUIRED:"patient_id must cannot be empty",PER_PAGE_IS_NOT_VALID:"per_page must be integer",TEST:"test"}}}},qa:{en:{SPECIALITY_REQUIRED:{message:"Specialty field is required",status:406},FACILITY_REQUIRED:{message:"Facility field is required",status:406},CPT_CODES_REQUIRED:{message:"Cpt Code  field is required",status:406},UNAVAILBILITY_SAME_TIME:{message:"Provider already has unavailability at this time",status:406},PATIENT_APPOINTMENT_EXIST:{message:"First delete follow-Up & Re-Evaluation Appointments",status:406},NO_SAME_APPOINTMENT:{message:"No same appointment",status:406},CLINIC_NOT_FOUND:{message:"clinic not found!",status:406},NO_FIND_SPECIALIYT:{message:"Cannot find specialty of already assigned provider",status:406},NO_USER_PRACTICE:{message:"User has not allowed any practice",status:406},NO_PROVIDE_PARACTICE:{message:"Provider is not allowed any practice",status:406},NO_PROVIDER_AVAILABLE:{message:"Provider is not available at this time",status:406},NO_DAYS_FOUND:{message:"No Days Found",status:406},NO_RESCHEDULED_APPOINTMENT:{message:"Initial Appointment cannot be rescheduled after follow-up/re-evaluation appointment.",status:406},NO_RESCHEDULED_INTIAL_APPONTMENT:{message:"Appointment cannot be rescheduled before initial appointment.",status:406},EVALUATION_ALREADY_STARTED:{message:"Appointment can't be updated because the evaluation has been already started.",status:406},NO_SHOW_STATUS:{message:"Appointment can't be updated because status is No Show.",status:406},NO_CREATED_APPOINTMENT:{message:"Initial Appointment cannot be created after follow-up/re-evaluation appointment.",status:406},APPOINTMENT_NOT_CREATED_BEFORE_INTIAL:{message:"Follow-up/Re-evaluation Appointment cannot be created before initial appointment.",status:406},NO_APPOINTMENT_CREATED_RECCURENCE:{message:"Initial Evaluation Appointment cannot be created in recurrence!",status:406},ERROR_FROM_KIOSK:{message:"Error from Kiosk",status:406},NO_SUPER_ADMIN:{message:"User is not super admin or is not practice supervisor on these facilities",status:406},APPOINTMENT_WITHOUT_DOCTOR:{message:"This appointment can not be created without doctor",status:406},NO_TIME_FALL:{message:"New time doesn't fall in provider day/timings",status:406},NO_MANUALLY_DOCTORS:{message:"No manually selected doctors provided.",status:406},ID_MUST_PROVIDED:{message:"Id must be provided",status:406},USER_NOT_SUPERADMIN:{message:"User is not superAdmin",status:406},USER_ID_MUST_PROVIDED:{message:"User Id must be provided",status:406},ALREADY_ACTION:{message:"Action already performed",status:406},NO_UNAVAILABILTY_FOUND:{message:"Unavailability not found",status:406},APPOINTMENT_NOT_FOUND:{message:"Appointment not found!",status:406},EVALUATION_ALREADY_UPDATE:{message:"Appointment Evaluation Already Update!",status:406},ASSIGNMENT_NOT_FOUND:{message:"Provider assignment not found!",status:406},PROVIDER_DOES_NOT_HAVE_WC_AUTH:{message:"Provider does not have WC authorization!",status:406},APPOINTMENT_ALREADY_IN_PROCESS:{message:"Appontment cannot be updated because Initial Evaluation Appointment is already in progress!",status:406},APPOINTMENT_CAN_NOT_CREATED_ON_PREVIOUS_DATE:{message:"Appointment cannot be created on previous Date",status:406},APPOINTMENT_CAN_NOT_DONE_BEFORE_INITIAL_EVALUATION:{message:"Appointment cannot be done before or on Initial Evaluation Appointment Datetime",status:406},APPOINTMENT_CAN_NOT_RESOLVED:{message:"ALL appointments cannot be resolved.",status:406},APPOINTMENT_EXISTS:{message:"Could not update because appointment exists for this assignment!",status:406},APPOINTMENT_MUST_END_BEFORE_PROGRESS:{message:"Initial Appointment must end before re-evaluation/progress",status:406},ASSIGNMENT_CREATED_SUCCESSFULLY_WITH_NO_DOCTOR_ASSIGNMENT:{message:"Assignment Added/Created successfully but Providers are not available for complete Assignment",status:200},ASSIGNMENT_DOES_NOT_FALL:{message:"Assignment does not fall within office hours",status:400},ASSIGNMENT_DOES_NOT_FALL_FOR_DOCTOR:{message:"Assignment does not fall within office hours",status:400},ASSIGNMENT_TO_YOURSELF:{message:"This appointment has already been assigned to another provider. Please refresh your calendar.",status:400},CANNOT_CREATE_SPECIALITY_APPOINTMENT:{message:"You cannot create specialty appointment for given specialty. Please update specialty information.",status:406},CANNOT_DELETE_ASSIGNMENT_WITH_APPOINTMENT:{message:"Assignment with Appointments cannot be deleted",status:406},CANNOT_FIND_FREESLOTS:{message:"Cannot find freeSlots for all given appointments",status:406},CANNOT_GET_VISIT_STATUS:{message:"Error occured while getting visit status!",status:406},DOES_NOT_HAVE_PRACTISE:{message:"Each provider doesn't have specified practice as primary/secondary location.",status:406},ERROR_WHILE_FETCHING_FINALIZE_STATUS:{message:"Error occured while getting finalize status!",status:406},ERROR_WHILE_GETTING_STATUS_FROM_KIOSK:{message:"Error occured while getting status from kiosk!",status:406},ERROR_WHILE_UPDATING_STATUS:{message:"Error occured while updating visit status!",status:406},INTERNAL_SERVER_ERROR:{message:"Internal server error",status:500},INVALID_APPOINTMENT_IDS:{message:"Appointment id(s) not valid!",status:406},INVALID_APPOINTMENT_TYPE_ID:{message:"Invalid Appointment type id.",status:406},INVALID_ASSIGNMENT_ID:{message:"Invalid Assignment id.",status:406},INVALID_PATIENT_ID:{message:"Invalid Patient Id",status:406},INVALID_SESSION_TYPE:{message:"Invalid session type.",status:400},INVALID_SPECIALITY_IDS:{message:"Invalid specialty id(s)",status:406},LOGGED_IN_NOT_FOUND:{message:"Logged-In User not found!",status:406},LOGGED_IN_NOT_PROVIDER:{message:"Logged In user is not a provider.",status:406},MANUAL_ASSIGNMENT_NO_OF_DOCTORS:{message:"Selected providers should be equal to no of providers",status:406},NO_APPOINTMENT_FOUND:{message:"No appointments Found!",status:406},NO_APPOINTMENT_OF_GIVEN_ID:{message:"Cannot find appointment against given id.",status:406},NO_APPOINTMENT_TO_SHOW:{message:"No appointments to show as per users rights.",status:406},NO_ASSIGNMENT_FOUND:{message:"No assignment found",status:406},NO_ASSIGNMENT_FOUND_FOR_GIVEN_APPOINTMENT_TIME:{message:"Cannot find assignment for given appointment time.",status:406},NO_PROVIDER_ASSIGNMENT_FOUND_FOR_GIVEN_APPOINTMENT_TIME:{message:"Cannot find provider assignment at the given time.",status:406},NO_ASSIGNMENT_PROPOSED:{message:"No new assignment proposed",status:406},NO_DOCTOR_FOUND:{message:"No doctor exist for specified id.",status:400},NO_FACILITY_LOCATION_FOUND:{message:"No facility location exist for specified id",status:406},NO_FREE_SLOTS_FOUND:{message:"No freeslots on practice(s)",status:406},NO_HISTORY_FOUND:{message:"Assignment history doesn't exist",status:406},NO_INITIAL_EVALUATION_ASSIGNMENT:{message:"No Initial Evaluation Appointment of this patient for this case and specialty!",status:406},NO_OTHER_ASSIGNMENTS_FOUND:{message:"No other assignments of provider.",status:406},NO_PRACTICES_FOUND:{message:"Practice(s) not found",status:406},NO_PROVIDER_FOUND:{message:"No provider found for this specialty.",status:406},NO_PROVIDER_FOUND_FOR_WORKER_COMPENSATION:{message:"No provider found for Worker Compensation Case!",status:406},NO_PROVIDER_OF_SPECIALITY_FOUND:{message:"No Providers of this specialty found! TimeSlot of specialty is changed",status:406},NO_RECORD_FOUND:{message:"No record exists in the system.",status:406},NO_SLOTS_REMAINING:{message:"No slots remaining at this time.",status:406},NO_SLOT_FOUND:{message:"No Slots found",status:406},NO_SPECIALITY_ASSIGNMENT_FOUND:{message:"No speciality assignment found",status:406},NO_SPECIALITY_FOUND:{message:"No speciality exist for specified id.",status:400},NO_SPECIALITY_FOUND_FOR_KEY:{message:"No speciality exist for specified speciality_key.",status:400},NO_WC_AUTHORIZE:{message:"Provider does not have WC authorizatio.",status:400},PAST_APPOINTMENTS:{message:"Past Appointment can not be evaluated.",status:406},PATIENT_ALREADY_HAVE_APPOINTMENT_SAME_DAY:{message:"Patient already has appointment on the same day.",status:406},APPOINTMENT_ALREADY_EXIST:{message:"Appointment already exist",status:406},FUTURE_APPOINTMENTS:{message:"Future Appointment can not be evaluated.",status:406},PATIENT_ALREADY_HAVE_ASSIGNMENT:{message:"Patient already has appointment at this time.",status:406},PATIENT_ALREADY_IN_SESSION:{message:"Patient already in In-Session.",status:406},PATIENT_ALREADY_HAVE_INITIAL_EVALUATION_ASSIGNMENT:{message:"Patient already has Initial Evaluation Appointment for this case and specialty!",status:406},PROVIDER_ALREADY_ASSIGN:{message:"Provider is already assigned",status:406},PROVIDER_IS_NOT_ASSIGNED_TO_ANY_SPECIALITY:{message:"Provider is not assigned any specialty",status:406},PROVIDER_NOT_AVAILABLE:{message:"Provider is not available",status:406},PROVIDER_NOT_FOUND:{message:"Provider not found",status:406},SAME_ASSIGNMENT_EXIST:{message:"Same assignment already exist",status:406},SUCCESS:{message:"success",status:200},UNKNOWN_QUERY_PARAMS:{message:"Unrecognized query params",status:406},USER_EXISTS:{message:"User Already exists",status:406},USER_HAS_NO_ROLES:{message:"No roles found against Logged-In User!",status:406},USER_NOT_ALLOWED:{message:"User is not allowed this practice!",status:406},VISIT_STATUS_IS_NOT_CHECKED_IN:{message:"Visit status is not 'Checked-In'. This evaluation cannot be started!",status:406},VISIT_STATUS_IS_NO_SHOW:{message:"Appointment and Visit status is No Show. Evaluation cannot be started",status:406},CASE_ID_REQUIRED:{message:"Case id must be provided",status:406},APPOINTMENT_WITH_SAME_CRITERIA_EXIST:{message:"Appointment is already created with same criteria",status:406},APPOINTMENT_CANNOT_UPDATED:{message:"Appointment can not be updated as Appointment is already created with same criteria",status:406},REQUIRED_APPOINTMENT_NOT_EXIST:{message:"Required Appointment doesn't exist",status:406},SELECTED_APPOINTMENT_SPECIALITY_ERROR:{message:"Selected appointment type doesn't exist in selected speciality",status:406},SAME_TIME_APPOINTMENT_ERROR:{message:"Pateint already have scheduled appointment selected time!",status:406},VISIT_SESSION_ERROR:{message:"Visit Session doesn't exists",status:406},VALID_APPOINTMENT_NAME_ERROR:{message:"Provide valid appointment type",status:406},TIME_SLOTS_ISSUE:{message:"Selected Time slot is reserved.",status:406},CHECK_MASTER_VISIT_TYPE:{message:"Please check Specialty Master, Someone has updated the information!",status:406},validator:{body:{BODY_NOT_EMPTY:"request body should not empty",DOCTOR_ID_INTEGER:"doctor_id must be integer",DOCTOR_ID_REQUIRED:"doctor_id must cannot be empty",SPECIALITY_ID_INTEGER:"speciality_id must be integer",SPECIALITY_ID_REQUIRED:"speciality_id cannot be empty",USER_ID_INTEGER:"user_id must be integer",USER_ID_REQUIRED:"user_id must cannot be empty"},query:{CASE_IS_NOT_VALID:"case_id must cannot be integer",CHECK_IS_NOT_VALID:"check must be [daily, weekly, previous, upcomming]",DATE_IS_NOT_VALID:"date must be 0000-00-00",PAGE_IS_NOT_VALID:"page must be integer",PAGINATE_IS_NOT_VALID:"paginate must be boolean",PATIENT_ID_REQUIRED:"patient_id must cannot be empty",PER_PAGE_IS_NOT_VALID:"per_page must be integer",TEST:"test"}}}},staging:{en:{SPECIALITY_REQUIRED:{message:"Specialty field is required",status:406},FACILITY_REQUIRED:{message:"Facility field is required",status:406},CPT_CODES_REQUIRED:{message:"Cpt Code  field is required",status:406},UNAVAILBILITY_SAME_TIME:{message:"Provider already has unavailability at this time",status:406},PATIENT_APPOINTMENT_EXIST:{message:"First delete follow-Up & Re-Evaluation Appointments",status:406},CLINIC_NOT_FOUND:{message:"clinic not found!",status:406},NO_FIND_SPECIALIYT:{message:"Cannot find specialty of already assigned provider",status:406},NO_USER_PRACTICE:{message:"User has not allowed any practice",status:406},NO_PROVIDE_PARACTICE:{message:"Provider is not allowed any practice",status:406},NO_PROVIDER_AVAILABLE:{message:"Provider is not available at this time",status:406},NO_DAYS_FOUND:{message:"No Days Found",status:406},NO_RESCHEDULED_APPOINTMENT:{message:"Initial Appointment cannot be rescheduled after follow-up/re-evaluation appointment.",status:406},NO_RESCHEDULED_INTIAL_APPONTMENT:{message:"Appointment cannot be rescheduled before initial appointment.",status:406},EVALUATION_ALREADY_STARTED:{message:"Appointment can't be updated because the evaluation has been already started.",status:406},NO_SHOW_STATUS:{message:"Appointment can't be updated because status is No Show.",status:406},NO_CREATED_APPOINTMENT:{message:"Initial Appointment cannot be created after follow-up/re-evaluation appointment.",status:406},APPOINTMENT_NOT_CREATED_BEFORE_INTIAL:{message:"Follow-up/Re-evaluation Appointment cannot be created before initial appointment.",status:406},NO_APPOINTMENT_CREATED_RECCURENCE:{message:"Initial Evaluation Appointment cannot be created in recurrence!",status:406},ERROR_FROM_KIOSK:{message:"Error from Kiosk",status:406},NO_SUPER_ADMIN:{message:"User is not super admin or is not practice supervisor on these facilities",status:406},APPOINTMENT_WITHOUT_DOCTOR:{message:"This appointment can not be created without doctor",status:406},NO_TIME_FALL:{message:"New time doesn't fall in provider day/timings",status:406},NO_MANUALLY_DOCTORS:{message:"No manually selected doctors provided.",status:406},ID_MUST_PROVIDED:{message:"Id must be provided",status:406},USER_NOT_SUPERADMIN:{message:"User is not superAdmin",status:406},USER_ID_MUST_PROVIDED:{message:"User Id must be provided",status:406},ALREADY_ACTION:{message:"Action already performed",status:406},NO_UNAVAILABILTY_FOUND:{message:"Unavailability not found",status:406},APPOINTMENT_NOT_FOUND:{message:"Appointment not found!",status:406},EVALUATION_ALREADY_UPDATE:{message:"Appointment Evaluation Already Update!",status:406},ASSIGNMENT_NOT_FOUND:{message:"Provider assignment not found!",status:406},PROVIDER_DOES_NOT_HAVE_WC_AUTH:{message:"Provider does not have WC authorization!",status:406},APPOINTMENT_ALREADY_IN_PROCESS:{message:"Appontment cannot be updated because Initial Evaluation Appointment is already in progress!",status:406},APPOINTMENT_CAN_NOT_CREATED_ON_PREVIOUS_DATE:{message:"Appointment cannot be created on previous Date",status:406},APPOINTMENT_CAN_NOT_DONE_BEFORE_INITIAL_EVALUATION:{message:"Appointment cannot be done before or on Initial Evaluation Appointment Datetime",status:406},APPOINTMENT_CAN_NOT_RESOLVED:{message:"ALL appointments cannot be resolved.",status:406},APPOINTMENT_EXISTS:{message:"Could not update because appointment exists for this assignment!",status:406},APPOINTMENT_MUST_END_BEFORE_PROGRESS:{message:"Initial Appointment must end before re-evaluation/progress",status:406},ASSIGNMENT_CREATED_SUCCESSFULLY_WITH_NO_DOCTOR_ASSIGNMENT:{message:"Assignment Added/Created successfully but Providers are not available for complete Assignment",status:200},ASSIGNMENT_DOES_NOT_FALL:{message:"Assignment does not fall within office hours",status:400},ASSIGNMENT_DOES_NOT_FALL_FOR_DOCTOR:{message:"Assignment does not fall within office hours",status:400},ASSIGNMENT_TO_YOURSELF:{message:"This appointment has already been assigned to another provider. Please refresh your calendar.",status:400},CANNOT_CREATE_SPECIALITY_APPOINTMENT:{message:"You cannot create specialty appointment for given specialty. Please update specialty information.",status:406},CANNOT_DELETE_ASSIGNMENT_WITH_APPOINTMENT:{message:"Assignment with Appointments cannot be deleted",status:406},CANNOT_FIND_FREESLOTS:{message:"Cannot find freeSlots for all given appointments",status:406},CANNOT_GET_VISIT_STATUS:{message:"Error occured while getting visit status!",status:406},DOES_NOT_HAVE_PRACTISE:{message:"Each provider doesn't have specified practice as primary/secondary location.",status:406},ERROR_WHILE_FETCHING_FINALIZE_STATUS:{message:"Error occured while getting finalize status!",status:406},ERROR_WHILE_GETTING_STATUS_FROM_KIOSK:{message:"Error occured while getting status from kiosk!",status:406},ERROR_WHILE_UPDATING_STATUS:{message:"Error occured while updating visit status!",status:406},INTERNAL_SERVER_ERROR:{message:"Internal server error",status:500},INVALID_APPOINTMENT_IDS:{message:"Appointment id(s) not valid!",status:406},INVALID_APPOINTMENT_TYPE_ID:{message:"Invalid Appointment type id.",status:406},INVALID_ASSIGNMENT_ID:{message:"Invalid Assignment id.",status:406},INVALID_PATIENT_ID:{message:"Invalid Patient Id",status:406},INVALID_SESSION_TYPE:{message:"Invalid session type.",status:400},INVALID_SPECIALITY_IDS:{message:"Invalid specialty id(s)",status:406},LOGGED_IN_NOT_FOUND:{message:"Logged-In User not found!",status:406},LOGGED_IN_NOT_PROVIDER:{message:"Logged In user is not a provider.",status:406},MANUAL_ASSIGNMENT_NO_OF_DOCTORS:{message:"Selected providers should be equal to no of providers",status:406},NO_APPOINTMENT_FOUND:{message:"No appointments Found!",status:406},NO_APPOINTMENT_OF_GIVEN_ID:{message:"Cannot find appointment against given id.",status:406},NO_APPOINTMENT_TO_SHOW:{message:"No appointments to show as per users rights.",status:406},NO_SAME_APPOINTMENT:{message:"No same appointment",status:406},NO_ASSIGNMENT_FOUND:{message:"No assignment found",status:406},NO_ASSIGNMENT_FOUND_FOR_GIVEN_APPOINTMENT_TIME:{message:"Cannot find assignment for given appointment time.",status:406},NO_PROVIDER_ASSIGNMENT_FOUND_FOR_GIVEN_APPOINTMENT_TIME:{message:"Provider cannot start this appointment, as provider assignment not found at the given time.",status:406},NO_ASSIGNMENT_PROPOSED:{message:"No new assignment proposed",status:406},NO_DOCTOR_FOUND:{message:"No doctor exist for specified id.",status:400},NO_FACILITY_LOCATION_FOUND:{message:"No facility location exist for specified id",status:406},NO_FREE_SLOTS_FOUND:{message:"No freeslots on practice(s)",status:406},NO_HISTORY_FOUND:{message:"Assignment history doesn't exist",status:406},NO_INITIAL_EVALUATION_ASSIGNMENT:{message:"No Initial Evaluation Appointment of this patient for this case and specialty!",status:406},NO_OTHER_ASSIGNMENTS_FOUND:{message:"No other assignments of provider.",status:406},NO_PRACTICES_FOUND:{message:"Practice(s) not found",status:406},NO_PROVIDER_FOUND:{message:"No provider found for this specialty.",status:406},NO_PROVIDER_FOUND_FOR_WORKER_COMPENSATION:{message:"No provider found for Worker Compensation Case!",status:406},NO_PROVIDER_OF_SPECIALITY_FOUND:{message:"No Providers of this specialty found! TimeSlot of specialty is changed",status:406},NO_RECORD_FOUND:{message:"No record exists in the system.",status:406},NO_SLOTS_REMAINING:{message:"No slots remaining at this time.",status:406},NO_SLOT_FOUND:{message:"No Slots found",status:406},NO_SPECIALITY_ASSIGNMENT_FOUND:{message:"No speciality assignment found",status:406},NO_SPECIALITY_FOUND:{message:"No speciality exist for specified id.",status:400},NO_SPECIALITY_FOUND_FOR_KEY:{message:"No speciality exist for specified speciality_key.",status:400},NO_WC_AUTHORIZE:{message:"Provider does not have WC authorizatio.",status:400},PAST_APPOINTMENTS:{message:"Past Appointment can not be evaluated.",status:406},PATIENT_ALREADY_HAVE_APPOINTMENT_SAME_DAY:{message:"Patient already has appointment on the same day.",status:406},APPOINTMENT_ALREADY_EXIST:{message:"Appointment already exist",status:406},FUTURE_APPOINTMENTS:{message:"Future Appointment can not be evaluated.",status:406},PATIENT_ALREADY_HAVE_ASSIGNMENT:{message:"Patient already has appointment at this time.",status:406},PATIENT_ALREADY_IN_SESSION:{message:"Patient already in In-Session.",status:406},PATIENT_ALREADY_HAVE_INITIAL_EVALUATION_ASSIGNMENT:{message:"Patient already has Initial Evaluation Appointment for this case and specialty!",status:406},PROVIDER_ALREADY_ASSIGN:{message:"Provider is already assigned",status:406},PROVIDER_IS_NOT_ASSIGNED_TO_ANY_SPECIALITY:{message:"Provider is not assigned any specialty",status:406},PROVIDER_NOT_AVAILABLE:{message:"Provider is not available",status:406},PROVIDER_NOT_FOUND:{message:"Provider not found",status:406},SAME_ASSIGNMENT_EXIST:{message:"Same assignment already exist",status:406},SUCCESS:{message:"success",status:200},UNKNOWN_QUERY_PARAMS:{message:"Unrecognized query params",status:406},USER_EXISTS:{message:"User Already exists",status:406},USER_HAS_NO_ROLES:{message:"No roles found against Logged-In User!",status:406},USER_NOT_ALLOWED:{message:"User is not allowed this practice!",status:406},VISIT_STATUS_IS_NOT_CHECKED_IN:{message:"Visit status is not 'Checked-In'. This evaluation cannot be started!",status:406},VISIT_STATUS_IS_NO_SHOW:{message:"Appointment and Visit status is No Show. Evaluation cannot be started",status:406},CASE_ID_REQUIRED:{message:"Case id must be provided",status:406},APPOINTMENT_WITH_SAME_CRITERIA_EXIST:{message:"Appointment is already created with same criteria",status:406},APPOINTMENT_CANNOT_UPDATED:{message:"Appointment can not be updated as Appointment is already created with same criteria",status:406},REQUIRED_APPOINTMENT_NOT_EXIST:{message:"Required Appointment doesn't exist",status:406},SELECTED_APPOINTMENT_SPECIALITY_ERROR:{message:"Selected appointment type doesn't exist in selected speciality",status:406},SAME_TIME_APPOINTMENT_ERROR:{message:"Pateint already have scheduled appointment selected time!",status:406},VISIT_SESSION_ERROR:{message:"Visit Session doesn't exists",status:406},VALID_APPOINTMENT_NAME_ERROR:{message:"Provide valid appointment type",status:406},TIME_SLOTS_ISSUE:{message:"Selected Time slot is reserved.",status:406},CHECK_MASTER_VISIT_TYPE:{message:"Please check Specialty Master, Someone has updated the information!",status:406},validator:{body:{BODY_NOT_EMPTY:"request body should not empty",DOCTOR_ID_INTEGER:"doctor_id must be integer",DOCTOR_ID_REQUIRED:"doctor_id must cannot be empty",SPECIALITY_ID_INTEGER:"speciality_id must be integer",SPECIALITY_ID_REQUIRED:"speciality_id cannot be empty",USER_ID_INTEGER:"user_id must be integer",USER_ID_REQUIRED:"user_id must cannot be empty"},query:{CASE_IS_NOT_VALID:"case_id must cannot be integer",CHECK_IS_NOT_VALID:"check must be [daily, weekly, previous, upcomming]",DATE_IS_NOT_VALID:"date must be 0000-00-00",PAGE_IS_NOT_VALID:"page must be integer",PAGINATE_IS_NOT_VALID:"paginate must be boolean",PATIENT_ID_REQUIRED:"patient_id must cannot be empty",PER_PAGE_IS_NOT_VALID:"per_page must be integer",TEST:"test"}}}}};e.config({path:".env"});const un=(e,t,i)=>{const a=JSON.parse(JSON.stringify(pn));return t?a[`${process.env.NODE_ENVR}`][`${process.env.ENV_LANG}`].validator[`${i}`][`${e}`]:a[`${process.env.NODE_ENVR}`][`${process.env.ENV_LANG}`][`${e}`]},mn=require("aws-sdk");var yn=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};const hn=new mn.CloudWatchLogs;let fn=class{constructor(){this.logData=(e,t,i,a,n,o,s,l,d)=>yn(this,void 0,void 0,(function*(){try{const{method:n,originalUrl:o}=e,s="production"===process.env.NODE_ENVR?"prod":process.env.NODE_ENVR,l=`${process.env.AWS_CLOUDWATCH_GROUP_NAME}_${s}`,d="http",_=n,r=o,c="Requesting",p=null!=i?i:"info",u=null==e.body.user_id?e.query.user_id:e.body.user_id;if(!t.locals.executionTimeInMs){const e=process.hrtime(t.locals.receptionTime);t.locals.executionTimeInMs=1e3*e[0]+e[1]/1e6}const m={descending:!0,limit:1,logGroupName:l},y={logEvents:[{message:`[${p}], userId:${u}, executionTime:${t.locals.executionTimeInMs} ${c} ${_} ${r}, ${JSON.stringify({tags:d,additionalInfo:a})} `,timestamp:(new Date).getTime()}],logGroupName:l,logStreamName:l,sequenceToken:(yield hn.describeLogStreams(m).promise()).logStreams[0].uploadSequenceToken};return yield hn.putLogEvents(y).promise(),null}catch(d){return l<5?yield this.logToCloudWatch(e,t,i,a,n,o,s,l,!0):console.log("error",d),null}})),this.logToCloudWatch=(e,t,i,a,n,o,s,l,d)=>yn(this,void 0,void 0,(function*(){try{let _=l||0;return d&&(_=l+1),yield this.logData(e,t,i,a,n,o,s,_,d),null}catch(e){return null}})),this.sendlogsToOATS=(e,t)=>{const i={datetime:new Date,name:"scheduler",reqObj:{baseUrl:e.baseUrl,body:e.body,fullUrl:e.originalUrl,headers:e.headers,hostName:e.hostname,ip:e.ip,ips:e.ips,lastUrl:e.url,method:e.method,params:e.params,query:e.query,userAgent:e.get("user-agent"),xhr:e.xhr},resObj:Object.assign({},t)};rn.logger("http://test.ovadamd.org:5005",Object.assign({},i))}}};fn=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn],fn);const vn=new fn;e.config({path:"../.env"});class gn{constructor(){this.createAppointmentTemplate=e=>{const t=this.getTableView(e);return`\n        ${this.getFormatedEmailHeader(e.patientLastName)}<br>\n        ${this.getAppointmentDescription(e.timeSlot,e.scheduledDateTime,e.endDateTime,e.reason)}<br>\n        More Details :<br><br>\n        <table>\n            ${t}\n        </table>`},this.getAppointmentDescription=(e,t,i,a)=>`Your appointment of ${e} Minutes form '${t.toLocaleString()}' to '${i.toLocaleString()}' has been ${a}.`,this.getFormatedEmailHeader=e=>`Dear <b>${e}</b>`,this.getRowView=e=>`<tr style='border:1px solid black'><td style='width:15%'> &nbsp; <b>${e.name}</b> </td><td style='width:30%'>${e.value} &nbsp; </td></tr>`,this.getTableView=e=>{let t="";return e.caseId&&(t=`${t}<br>${this.getRowView({name:"Case Id",value:e.caseId})}`),e.caseType&&(t=`${t}<br>${this.getRowView({name:"Case Type",value:e.caseType})}`),e.scheduledDateTime&&(t=`${t}<br>${this.getRowView({name:"New Appointment Time",value:e.scheduledDateTime})}`),e.appointmentTitle&&(t=`${t}<br>${this.getRowView({name:"Title",value:e.appointmentTitle})}`),e.speciality&&(t=`${t}<br>${this.getRowView({name:"Speciality",value:e.speciality})}`),e.doctor&&(t=`${t}<br>${this.getRowView({name:"Provider",value:e.doctor})}`),e.confirmationStatus&&(t=`${t}<br>${this.getRowView({name:"Confirmation Status",value:e.confirmationStatus})}`),e.appointmentStatus&&(t=`${t}<br>${this.getRowView({name:"Appointment Status",value:e.appointmentStatus})}`),e.appointmentId&&(t=`${t}<br>${this.getRowView({name:"Refrence Id",value:e.appointmentId})}`),t}}}class bn extends gn{constructor(){super(...arguments),this.templateMethod={createAppointment:"createAppointmentTemplate"},this.deleteAttributes=(e,t)=>{if(!t||!Object.keys(t).length)return null;if(e.length){for(const i of e)delete t[String(i)];return t}delete t[String(e)]},this.filterNonEmpty=e=>e.filter((e=>"[]"!==JSON.stringify(e))),this.filterNonNull=e=>e.filter((e=>null!=e)),this.filterUnique=e=>e.filter(((e,t,i)=>i.indexOf(e)===t)),this.getFormatedEmailBody=(e,t)=>this[this.templateMethod[e]](t),this.getFreeSlotsForAutoResolveAppointment=(e,t,i,a,n,o)=>{const s=[];let l=[];const d=new Date(e.start_date),_=new Date(e.end_date);for(;d.getTime()!==_.getTime()&&!(d.getTime()>_.getTime());){const e=d;e.setMinutes(e.getMinutes()+a),e.getTime()<=_.getTime()&&s.push({startDateTime:new Date(d),count:i}),d.setMinutes(d.getMinutes()+a)}if(t&&t.length)for(const e of t){const t=new Date(null==e?void 0:e.scheduled_date_time),i=new Date(null==e?void 0:e.scheduled_date_time);i.setMinutes(i.getMinutes()+(null==e?void 0:e.time_slots)),s.find(((a,n)=>{t.getTime()<=a.startDateTime.getTime()&&a.startDateTime.getTime()<i.getTime()&&null===(null==e?void 0:e.deleted_at)&&(s[n].count-=1)}))}return l=n?s.filter((e=>{if(e.count===i){let t;const i=new Date(e.startDateTime);if(i.setMinutes(i.getMinutes()+a),o&&o.length&&(t=o.find((t=>{if(new Date(e.startDateTime).getTime()>=new Date(t.start_date).getTime()&&new Date(e.startDateTime).getTime()<new Date(t.end_date).getTime()||new Date(i).getTime()>=new Date(t.start_date).getTime()&&new Date(i).getTime()<new Date(t.end_date).getTime())return t}))),!t)return e.startDateTime}})):s.filter((e=>{if(e.count>0)for(let t=0;t<e.count;t+=1){let t;const i=new Date(e.startDateTime);if(i.setMinutes(i.getMinutes()+a),o&&o.length&&(t=o.find((t=>{if(new Date(e.startDateTime).getTime()>=new Date(t.start_date).getTime()&&new Date(e.startDateTime).getTime()<new Date(t.end_date).getTime()||new Date(i).getTime()>=new Date(t.start_date).getTime()&&new Date(i).getTime()<new Date(t.end_date).getTime())return t}))),!t)return e.startDateTime}})),[l,s]},this.groupByType=(e,t)=>e.reduce(((e,i)=>{const a=i[`${t}`];return e[a]?e[a].push(i):e[a]=[i],e}),{}),this.paginate=(e,t,i)=>e.slice((i-1)*t,i*t),this.sentAppointmentsToFD=(e,t,i,a,n,o,s,l,d,_,r)=>{return c=this,p=void 0,m=function*(){const c=[];i&&a&&([].push(i),i!==a&&c.push(a));const p=this.shallowCopy(yield n.findOne({model_id:t},{include:{model:he,as:"role",required:!1}})),{role:u,role:{slug:m}}=p;if(u&&"super_admin"!==m&&this.shallowCopy(yield o.findAll({facility_location_id:{[d.in]:c},user_id:t,deleted_at:null},{logging:!0})).length!==c.length)throw un("NO_SUPER_ADMIN");const y={headers:{Authorization:r}},{status:h}=yield s.put(`${process.env.KIOSK_URL}case-patient-session/remove-patient-sessions`,{appointment_ids:e},y);if(200!==h)throw un("ERROR_FROM_KIOSK");return yield l.updateByIds(e,{origin_facility_id:i,target_facility_id:a,pushed_to_front_desk:1,comments:_,updated_by:t,updated_at:new Date,cancelled:0})},new((u=void 0)||(u=Promise))((function(e,t){function i(e){try{n(m.next(e))}catch(e){t(e)}}function a(e){try{n(m.throw(e))}catch(e){t(e)}}function n(t){var n;t.done?e(t.value):(n=t.value,n instanceof u?n:new u((function(e){e(n)}))).then(i,a)}n((m=m.apply(c,p||[])).next())}));var c,p,u,m},this.shallowCopy=e=>JSON.parse(JSON.stringify(e)),this.sort=(e,t)=>e.sort(((e,i)=>e[`${String(t)}`]-i[`${String(t)}`]))}getTimezoneOffset(e,t){const i=e.toLocaleString("ja",{timeZone:t}).split(/[/\s:]/);i[1]--;const a=Date.UTC.apply(null,i);return(new Date(e).setMilliseconds(0)-a)/60/1e3}}ra.Op;let Sn=class extends bn{constructor(e,t){super(),this.__repo=e,this.http=t,this.getAll=e=>{return t=this,i=void 0,n=function*(){return this.__repo.findAll()},new((a=void 0)||(a=Promise))((function(e,o){function s(e){try{d(n.next(e))}catch(e){o(e)}}function l(e){try{d(n.throw(e))}catch(e){o(e)}}function d(t){var i;t.done?e(t.value):(i=t.value,i instanceof a?i:new a((function(e){e(i)}))).then(s,l)}d((n=n.apply(t,i||[])).next())}));var t,i,a,n},this.__http=new t}};Sn=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object])],Sn);var In=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};ra.Op;let Dn=class extends bn{constructor(e,t,i){super(),this.__repo=e,this.__actionPreferenceForwardrepo=t,this.http=i,this.add=(e,t)=>In(this,void 0,void 0,(function*(){const{user_id:t=Number(process.env.USERID),type_id:i}=e;if(yield this.__repo.exists(t))throw un("USER_EXISTS");const a=i||1;return this.__repo.create({type_id:a,user_id:t})})),this.get=(e,t)=>In(this,void 0,void 0,(function*(){const{user_id:t=Number(process.env.USERID)}=e;return this.__repo.findOne({deleted_at:null,user_id:t},{include:{as:"actionPreferencesFacilityLocations",model:Dt,required:!1,where:{deleted_at:null}}})})),this.update=(e,t,i)=>In(this,void 0,void 0,(function*(){const{facility_location_type:t,type_id:a,facility_location:n,user_id:o=Number(process.env.USERID)}=e;let{action_preference_id:s}=e;const l=null!=t?t:null;s||(s=this.shallowCopy(yield this.__repo.create({facility_location_type:l,type_id:a,user_id:o})).id);const d=yield this.__actionPreferenceForwardrepo.findOne({action_preference_id:s,deleted_at:null});if(d&&Object.keys(d).length&&(yield this.__actionPreferenceForwardrepo.updateByColumnMatched({action_preference_id:s},{deleted_at:new Date,updated_by:o},i)),2===a)return this.__repo.updateByColumnMatched({user_id:o},{type_id:a,facility_location_type:l,updated_by:o},i);if(3===a){const e=n.map((e=>Object.assign(Object.assign({},e),{action_preference_id:s})));return yield this.__actionPreferenceForwardrepo.bulkCreate([...e],i),this.__repo.update(s,{type_id:a,facility_location_type:null,updated_by:o},i)}return this.__repo.update(s,{type_id:a,facility_location_type:null,updated_by:o},i)})),this.__http=new i}};Dn=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object,Object])],Dn);let wn=class extends bn{constructor(e,t){super(),this.__repo=e,this.http=t,this.getAll=e=>{return t=this,i=void 0,n=function*(){return this.__repo.findAll()},new((a=void 0)||(a=Promise))((function(e,o){function s(e){try{d(n.next(e))}catch(e){o(e)}}function l(e){try{d(n.throw(e))}catch(e){o(e)}}function d(t){var i;t.done?e(t.value):(i=t.value,i instanceof a?i:new a((function(e){e(i)}))).then(s,l)}d((n=n.apply(t,i||[])).next())}));var t,i,a,n},this.__http=new t}};wn=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object])],wn);ra.Op;let On=class extends bn{constructor(e,t){super(),this.appointmentPriority=e,this.http=t,this.getAppointmentPriority=()=>{return e=this,t=void 0,a=function*(){return this.__repo.findAll({deleted_at:null})},new((i=void 0)||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}));var e,t,i,a},this.__repo=e,this.__http=new t}};On=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object])],On);const Tn=ra.Op;let An=class extends bn{constructor(e,t){super(),this.appointmentStatus=e,this.http=t,this.getAppointmentStatus=e=>{return t=this,i=void 0,n=function*(){const{filter:t,pagination:i,per_page:a,page:n,specific_appointment_status:o,name:s}=e;if(o){let e={deleted_at:null};return t&&s&&(e.name={[Tn.like]:`%${s}%`}),i||"1"===i?this.__repo.paginate({where:Object.assign(Object.assign({},e),{slug:{[Tn.in]:["scheduled","re_scheduled","arrived","no_show","completed"]}})},Number(n),Number(a),null,{order:[["name","ASC"]]}):this.__repo.findAll(Object.assign(Object.assign({},e),{slug:{[Tn.in]:["scheduled","re_scheduled","arrived","no_show","completed"]}}))}return this.__repo.findAll({deleted_at:null})},new((a=void 0)||(a=Promise))((function(e,o){function s(e){try{d(n.next(e))}catch(e){o(e)}}function l(e){try{d(n.throw(e))}catch(e){o(e)}}function d(t){var i;t.done?e(t.value):(i=t.value,i instanceof a?i:new a((function(e){e(i)}))).then(s,l)}d((n=n.apply(t,i||[])).next())}));var t,i,a,n},this.__repo=e,this.__http=new t}};An=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object])],An);ra.Op;let Nn=class extends bn{constructor(e,t){super(),this.schAppointmentType=e,this.http=t,this.getAppointmentTypes=()=>{return e=this,t=void 0,a=function*(){return this.__repo.findAll({deleted_at:null})},new((i=void 0)||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}));var e,t,i,a},this.__repo=e,this.__http=new t}};Nn=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object])],Nn);const Cn=require("date-fns"),Rn=require("moment"),En=require("workerpool");ra.Op;let Ln=class extends bn{constructor(){super(),this.appointmentListResultMapping=(e,t)=>e.map((e=>{var i,a,n,o,s;const l=e.physician_clinics_id?{physician:{clinic_location_id:null==e?void 0:e.clinic_location_id,physician_clinic_id:null==e?void 0:e.physician_clinics_id,id:null==e?void 0:e.clinic_id,name:null==e?void 0:e.clinic_name,city:null==e?void 0:e.clinic_location_city,clinic_id:null==e?void 0:e.clinic_location_clinic_id,email:null==e?void 0:e.physician_email,extension:null==e?void 0:e.clinic_location_extension,fax:null==e?void 0:e.clinic_location_fax,floor:null==e?void 0:e.clinic_location_floor,is_primary:null==e?void 0:e.clinic_location_is_primary,phone:null==e?void 0:e.clinic_location_phone,state:null==e?void 0:e.clinic_location_state,status:null==e?void 0:e.clinic_location_status,street_address:null==e?void 0:e.clinic_location_street_address,zip:null==e?void 0:e.clinic_location_zip,cell_no:null==e?void 0:e.physician_cell_no,first_name:null==e?void 0:e.physician_first_name,last_name:null==e?void 0:e.physician_last_name,license_no:null==e?void 0:e.physician_license_no,middle_name:null==e?void 0:e.physician_middle_name,npi_no:null==e?void 0:e.physician_npi_no}}:null,d=null==t?void 0:t.find((t=>(null==t?void 0:t.id)===(null==e?void 0:e.appointment_id)));return{appointment_cpt_codes:null!==(i=null==d?void 0:d.appointmentCptCodes)&&void 0!==i?i:null,appointment_comments:e.appointment_comments,appointment_confirmation_status:e.appointment_confirmation_status,appointment_id:e.appointment_id,appointment_status:e.sch_appointment_statuses_name,appointment_status_id:e.appointment_status_id,appointment_status_slug:e.sch_appointment_statuses_slug,appointment_time:e.appointment_scheduled_date_time,appointment_title:e.appointment_title,appointment_type_id:e.appointment_type_id,billable:e.appointment_billable,case_id:e.appointment_case_id,case_type_id:e.appointment_case_type_id,case_type_name:e.kiosk_case_types_name,cd_image:e.appointment_cd_image,doctor_first_name:e.doctorBasicInfo_first_name,doctor_id:e.doctorBasicInfo_user_id,doctor_last_name:e.doctorBasicInfo_last_name,doctor_middle_name:e.doctorBasicInfo_middle_name,billing_title_id:e.billingTitles_id,billing_title_name:e.billingTitles_name,duration:e.appointment_time_slot,facility:{id:e.facilities_id,name:e.facilities_name,slug:e.facilities_slug,qualifier:e.facilities_qualifier},facility_location_id:e.availableSpeciality_facility_location_id,facility_location_name:e.facilityLocation_name,facility_location_qualifier:e.facilityLocation_qualifier,is_transportation:e.appointment_is_transportation,patient_first_name:e.patient_first_name,patient_id:e.patient_id,patient_last_name:e.patient_last_name,patient_middle_name:e.patient_middle_name,patient_picture:e.patient_profile_avatar,patient_session:{id:e.kiosk_case_patient_session_id,key:e.kiosk_case_patient_session_key,status_id:e.kiosk_case_patient_session_status_id,case_id:e.kiosk_case_patient_session_case_id,date_of_check_in:e.kiosk_case_patient_session_date_of_check_in,time_of_check_in:e.kiosk_case_patient_session_time_of_check_in,date_of_check_out:e.kiosk_case_patient_session_date_of_check_out,time_of_check_out:e.kiosk_case_patient_session_time_of_check_out,created_by:e.kiosk_case_patient_session_created_by,updated_by:e.kiosk_case_patient_session_updated_by,created_at:e.kiosk_case_patient_session_created_at,updated_at:e.kiosk_case_patient_session_updated_at,deleted_at:e.kiosk_case_patient_session_deleted_at,appointment_id:e.kiosk_case_patient_session_appointment_id},patient_status:e.kiosk_case_patient_session_statuses_name,patient_status_slug:e.kiosk_case_patient_session_statuses_slug,priority_id:e.appointment_priority_id,reading_provider_id:e.appointment_reading_provider_id,reading_provider:e.appointment_reading_provider_id?{first_name:null!==(a=e.readingProvider_first_name)&&void 0!==a?a:null,id:e.appointment_reading_provider_id,last_name:null!==(n=e.readingProvider_last_name)&&void 0!==n?n:null,middle_name:null!==(o=e.readingProvider_middle_name)&&void 0!==o?o:null}:null,technician_id:e.technician_id,technician_email:e.technician_email,technician_basic_info:e.technician_id?{technician_basic_info_id:e.technician_basic_info_id,technician_basic_info_first_name:e.technician_first_name,technician_basic_info_middle_name:e.technician_middle_name,technician_basic_info_last_name:e.technician_last_name,technician_basic_info_date_of_birth:e.technician_date_of_birth,technician_basic_info_gender:e.technician_gender,technician_basic_info_user_id:e.technician_user_id,technician_basic_info_area_id:e.technician_area_id,technician_basic_info_title:e.technician_title,technician_basic_info_cell_no:e.technician_cell_no,technician_basic_info_address:e.technician_address,technician_basic_info_work_phone:e.technician_work_phone,technician_basic_info_fax:e.technician_fax,technician_basic_info_extension:e.technician_extension,technician_basic_info_home_phone:e.technician_home_phone,technician_basic_info_emergency_name:e.technician_emergency_name,technician_basic_info_emergency_phone:e.technician_emergency_phone,technician_basic_info_biography:e.technician_biography,technician_basic_info_hiring_date:e.technician_hiring_date,technician_basic_info_from:e.technician_from,technician_basic_info_to:e.technician_to,technician_basic_info_profile_pic:e.technician_profile_pic,technician_basic_info_city:e.technician_city,technician_basic_info_state:e.technician_state,technician_basic_info_zip:e.technician_zip,technician_basic_info_social_security:e.technician_social_security,technician_basic_info_profile_pic_url:e.technician_profile_pic_url,technician_basic_info_apartment_suite:e.technician_apartment_suite,technician_basic_info_file_id:e.technician_file_id,technician_basic_info_deleted_at:e.technician_deleted_at}:null,speciality_id:e.availableSpeciality_speciality_id,speciality_name:e.specialities_name,speciality_qualifier:e.specialities_qualifier,time_slot:e.specialities_time_slot,visit_type:e.sch_appointment_types_name,visit_type_qualifier:e.sch_appointment_types_qualifier,visit_type_id:e.appointment_type_id,case_status:e.billing_case_status_name,medicalIdentifier_id:e.medicalIdentifier_id,billing_titles_id:e.billingTitles_id,billing_titles_name:e.billingTitles_name,physician_clinic:l,transportations:null!==(s=null==d?void 0:d.transportations)&&void 0!==s?s:null}})),this.generateAppointmentListCount=e=>{const{patientStatusIds:t,facilityLocationIds:i,specialityIds:a,doctorIds:n,patientId:o,patientName:s,appointmentTypeIds:l,appointmentStatusIds:d,caseTypeIds:_,caseIds:r,startDate:c,endDate:p,paginate:u=!1,page:m,per_page:y}=e;let h="";const f=[];u&&(h=`LIMIT ${(m-1)*y} , ${y}`);let v="left";if(a&&a.length&&(f.push(`specialities.id in (${String(a)})`),f.push(`availableSpeciality.speciality_id in (${String(a)})`),v="inner"),(null==i?void 0:i.length)&&f.push(`availableSpeciality.facility_location_id in (${String(i)})`),(null==t?void 0:t.length)&&f.push(`kiosk_case_patient_session.status_id in (${String(t)})`),n&&n.length&&f.push(`availableSpecialityDoctor.doctor_id in (${String(n)})`),o&&f.push(`appointments.patient_id = ${o}`),s){const e=s.replace(/\s+/g," ").trim();f.push(`(kiosk_patient.first_name LIKE '%${e}%' or kiosk_patient.last_name LIKE '%${e}%' or kiosk_patient.middle_name LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%' or CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.first_name) LIKE '%${e}%' or CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.first_name) LIKE '%${e}%'  or CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.middle_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.last_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%' or CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.first_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or  CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.last_name, ' ', kiosk_patient.first_name) LIKE '%${e}%' or  CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.middle_name, ' ', kiosk_patient.first_name) LIKE '%${e}%' or  CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.first_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%')`)}l&&l.length&&f.push(`appointments.type_id in (${String(l)})`),d&&d.length&&f.push(`appointments.status_id in (${String(d)})`),_&&_.length&&f.push(`appointments.case_type_id in (${String(_)})`),r&&r.length&&f.push(`appointments.case_id in (${String(r)})`),c&&p&&f.push(`appointments.scheduled_date_time BETWEEN '${c}' AND '${p}'`),f.push("appointments.cancelled = 0"),f.push("appointments.pushed_to_front_desk = 0"),f.push("appointments.deleted_at IS NULL");let g=0,b="";for(const e of f)g+=1,1==g&&(b="where"),b=g!=f.length?`${b} ${e} and`:`${b} ${e}`;return`(SELECT\n            COUNT(DISTINCT appointments.id) as total_appointment\n            FROM sch_appointments as appointments\n\n            left join kiosk_cases on kiosk_cases.id = appointments.case_id and kiosk_cases.deleted_at IS NULL\n            left join billing_case_status on billing_case_status.id = kiosk_cases.status_id and billing_case_status.deleted_at IS NULL\n            inner join kiosk_patient on kiosk_patient.id = appointments.patient_id and kiosk_patient.deleted_at IS NULL\n            inner join kiosk_case_patient_session on kiosk_case_patient_session.appointment_id = appointments.id and kiosk_case_patient_session.deleted_at IS NULL\n            inner join kiosk_case_patient_session_statuses on kiosk_case_patient_session_statuses.id = kiosk_case_patient_session.status_id and kiosk_case_patient_session_statuses.deleted_at IS NULL\n\n            ${v} join sch_available_specialities as availableSpeciality on availableSpeciality.id = appointments.available_speciality_id and availableSpeciality.deleted_at IS NULL\n            left join facility_locations as facilityLocation on facilityLocation.id = availableSpeciality.facility_location_id and facilityLocation.deleted_at IS NULL\n            left join specialities on specialities.id = availableSpeciality.speciality_id and specialities.deleted_at IS NULL\n\n            left join sch_available_doctors as availableSpecialityDoctor on availableSpecialityDoctor.id = appointments.available_doctor_id and availableSpecialityDoctor.deleted_at IS NULL\n            ${b}\n            GROUP BY appointments.id\n            )`},this.generateAppointmentListCountV1=e=>{const{patientStatusIds:t,facilityLocationIds:i,specialityIds:a,doctorIds:n,patientId:o,patientName:s,appointmentTypeIds:l,appointmentStatusIds:d,caseTypeIds:_,caseIds:r,startDate:c,endDate:p,paginate:u=!1,page:m,per_page:y}=e;let h="";const f=[];u&&(h=`LIMIT ${(m-1)*y} , ${y}`);let v="left",g="left";if(a&&a.length&&(f.push(`availableSpeciality.speciality_id in (${String(a)})`),v="inner"),(null==i?void 0:i.length)&&f.push(`availableSpeciality.facility_location_id in (${String(i)})`),(null==t?void 0:t.length)&&f.push(`kiosk_case_patient_session.status_id in (${String(t)})`),n&&n.length&&(g="inner",f.push(`sch_available_doctors.doctor_id in (${String(n)})`)),o&&f.push(`sch_appointments.patient_id = ${o}`),s){const e=s.replace(/\s+/g," ").trim();f.push(`(kiosk_patient.first_name LIKE '%${e}%' or kiosk_patient.last_name LIKE '%${e}%' or kiosk_patient.middle_name LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%' or CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.first_name) LIKE '%${e}%' or CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.first_name) LIKE '%${e}%'  or CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.middle_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.last_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%' or CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.first_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or  CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.last_name, ' ', kiosk_patient.first_name) LIKE '%${e}%' or  CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.middle_name, ' ', kiosk_patient.first_name) LIKE '%${e}%' or  CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.first_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%')`)}l&&l.length&&f.push(`sch_appointments.type_id in (${String(l)})`),d&&d.length&&f.push(`sch_appointments.status_id in (${String(d)})`),_&&_.length&&f.push(`sch_appointments.case_type_id in (${String(_)})`),r&&r.length&&f.push(`sch_appointments.case_id in (${String(r)})`),c&&p&&f.push(`sch_appointments.scheduled_date_time BETWEEN '${c}' AND '${p}'`),f.push("sch_appointments.cancelled = 0"),f.push("sch_appointments.pushed_to_front_desk = 0"),f.push("sch_appointments.deleted_at IS NULL");let b=0,S="";for(const e of f)b+=1,1==b&&(S="where"),S=b!=f.length?`${S} ${e} and`:`${S} ${e}`;return`(SELECT\n            COUNT(DISTINCT(sch_appointments.id)) as total_count\n            FROM sch_appointments\n\n            left join kiosk_patient on kiosk_patient.id = sch_appointments.patient_id and kiosk_patient.deleted_at IS NULL\n            inner join kiosk_case_patient_session on kiosk_case_patient_session.appointment_id = sch_appointments.id and kiosk_case_patient_session.deleted_at IS NULL\n\n            ${v} join sch_available_specialities as availableSpeciality on availableSpeciality.id = sch_appointments.available_speciality_id and availableSpeciality.deleted_at IS NULL\n            left join facility_locations as facilityLocation on facilityLocation.id = availableSpeciality.facility_location_id and facilityLocation.deleted_at IS NULL\n            left join specialities on specialities.id = availableSpeciality.speciality_id and specialities.deleted_at IS NULL\n\n            ${g} join sch_available_doctors on sch_available_doctors.id = sch_appointments.available_doctor_id and sch_available_doctors.deleted_at IS NULL\n            ${S}\n            )`},this.generateAppointmentListRawQuery=e=>{const{patientStatusIds:t,facilityLocationIds:i,specialityIds:a,doctorIds:n,patientId:o,patientName:s,appointmentTypeIds:l,appointmentStatusIds:d,caseTypeIds:_,caseIds:r,startDate:c,endDate:p,paginate:u,page:m,perPage:y}=e;let h="";const f=[];u&&(h=`LIMIT ${(m-1)*y} , ${y}`);let v="left";if(a&&a.length&&(f.push(`specialities.id in (${String(a)})`),f.push(`availableSpeciality.speciality_id in (${String(a)})`),v="inner"),(null==t?void 0:t.length)&&f.push(`kiosk_case_patient_session.status_id in (${String(t)})`),(null==i?void 0:i.length)&&f.push(`availableSpeciality.facility_location_id in (${String(i)})`),n&&n.length&&f.push(`availableSpecialityDoctor.doctor_id in (${String(n)})`),o&&f.push(`appointments.patient_id = ${o}`),s){const e=s.replace(/\s+/g," ").trim();f.push(`(kiosk_patient.first_name LIKE '%${e}%' or kiosk_patient.last_name LIKE '%${e}%' or kiosk_patient.middle_name LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%' or CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.first_name) LIKE '%${e}%' or CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.first_name) LIKE '%${e}%'  or CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.middle_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.last_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%' or CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.first_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or  CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.last_name, ' ', kiosk_patient.first_name) LIKE '%${e}%' or  CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.middle_name, ' ', kiosk_patient.first_name) LIKE '%${e}%' or  CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.first_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%')`)}l&&l.length&&f.push(`appointments.type_id in (${String(l)})`),d&&d.length&&f.push(`appointments.status_id in (${String(d)})`),_&&_.length&&f.push(`appointments.case_type_id in (${String(_)})`),r&&r.length&&f.push(`appointments.case_id in (${String(r)})`),c&&p&&f.push(`appointments.scheduled_date_time BETWEEN '${c}' AND '${p}'`),f.push("appointments.cancelled = 0"),f.push("appointments.pushed_to_front_desk = 0"),f.push("appointments.deleted_at IS NULL");let g=0,b="";for(const e of f)g+=1,1==g&&(b="where"),b=g!=f.length?`${b} ${e} and`:`${b} ${e}`;return`(SELECT\n            appointments.id as appointment_id,\n            appointments.key as appointment_key,\n            appointments.scheduled_date_time as appointment_scheduled_date_time,\n            appointments.evaluation_date_time as appointment_evaluation_date_time,\n            appointments.time_slots as appointment_time_slot,\n            appointments.appointment_title as appointment_title,\n            appointments.action_performed as appointment_action_performed,\n            appointments.confirmation_status as appointment_confirmation_status,\n            appointments.cancelled as appointment_cancelled,\n            appointments.pushed_to_front_desk as appointment_pushed_to_front_dest,\n            appointments.comments as appointment_comments,\n            appointments.by_health_app as appointment_by_health_app,\n            appointments.date_list_id as appointment_date_list_id,\n            appointments.target_facility_id as appointment_target_facility_id,\n            appointments.origin_facility_id as appointment_origin_facility_id,\n            appointments.case_id as appointment_case_id,\n            appointments.case_type_id as appointment_case_type_id,\n            appointments.patient_id as appointment_patient_id,\n            appointments.type_id as appointment_type_id,\n            appointments.status_id as appointment_status_id,\n            appointments.priority_id as appointment_priority_id,\n            appointments.available_doctor_id as appointment_available_doctor_id,\n            appointments.available_speciality_id as appointment_available_speciality_id,\n            appointments.billable as appointment_billable,\n            appointments.pushed_to_front_desk_comments as appointment_pushed_to_front_desk_comments,\n            appointments.cancelled_comments as appointment_cancelled_comments,\n            appointments.is_speciality_base as appointment_is_speciality_base,\n            appointments.created_by as appointment_created_by,\n            appointments.updated_by as appointment_updated_by,\n            appointments.created_at as appointment_created_at,\n            appointments.updated_at as appointment_updated_at,\n            appointments.deleted_at as appointment_deleted_at,\n            appointments.is_redo as appointment_is_redo,\n            appointments.is_active as appointment_is_active,\n            appointments.is_soft_registered as appointment_is_soft_registered,\n            appointments.physician_id as appointment_physician_id,\n            appointments.technician_id as appointment_technician_id,\n\n            appointments.reading_provider_id as appointment_reading_provider_id,\n            appointments.cd_image as appointment_cd_image,\n            appointments.is_transportation as appointment_is_transportation,\n\n            kiosk_cases.id as patient_case_id,\n\n            billing_case_status.id as billing_case_status_id,\n            billing_case_status.name as billing_case_status_name,\n\n            kiosk_case_patient_session.id as kiosk_case_patient_session_id,\n            kiosk_case_patient_session.key as kiosk_case_patient_session_key,\n            kiosk_case_patient_session.status_id as kiosk_case_patient_session_status_id,\n            kiosk_case_patient_session.case_id as kiosk_case_patient_session_case_id,\n            kiosk_case_patient_session.date_of_check_in as kiosk_case_patient_session_date_of_check_in,\n            kiosk_case_patient_session.time_of_check_in as kiosk_case_patient_session_time_of_check_in,\n            kiosk_case_patient_session.date_of_check_out as kiosk_case_patient_session_date_of_check_out,\n            kiosk_case_patient_session.time_of_check_out as kiosk_case_patient_session_time_of_check_out,\n            kiosk_case_patient_session.created_by as kiosk_case_patient_session_created_by,\n            kiosk_case_patient_session.updated_by as kiosk_case_patient_session_updated_by,\n            kiosk_case_patient_session.created_at as kiosk_case_patient_session_created_at,\n            kiosk_case_patient_session.updated_at as kiosk_case_patient_session_updated_at,\n            kiosk_case_patient_session.deleted_at as kiosk_case_patient_session_deleted_at,\n            kiosk_case_patient_session.appointment_id as kiosk_case_patient_session_appointment_id,\n\n            kiosk_case_patient_session_statuses.name as kiosk_case_patient_session_statuses_name,\n            kiosk_case_patient_session_statuses.slug as kiosk_case_patient_session_statuses_slug,\n\n            kiosk_case_types.id as kiosk_case_types_id,\n            kiosk_case_types.key as kiosk_case_types_key,\n            kiosk_case_types.name as kiosk_case_types_name,\n            kiosk_case_types.slug as kiosk_case_types_slug,\n            kiosk_case_types.description as kiosk_case_types_description,\n            kiosk_case_types.comments as kiosk_case_types_comments,\n            kiosk_case_types.remainder_days as kiosk_case_types_remainder_days,\n            kiosk_case_types.created_by as kiosk_case_types_created_by,\n            kiosk_case_types.updated_by as kiosk_case_types_updated_by,\n            kiosk_case_types.created_at as kiosk_case_types_created_at,\n            kiosk_case_types.updated_at as kiosk_case_types_updated_at,\n            kiosk_case_types.deleted_at as kiosk_case_types_deleted_at,\n\n            sch_appointment_types.id as sch_appointment_types_id,\n            sch_appointment_types.name as sch_appointment_types_name,\n            sch_appointment_types.slug as sch_appointment_types_slug,\n            sch_appointment_types.description as sch_appointment_types_description,\n            sch_appointment_types.is_all_cpt_codes as sch_appointment_types_is_all_cpt_codes,\n            sch_appointment_types.enable_cpt_codes as sch_appointment_types_enable_cpt_codes,\n            sch_appointment_types.qualifier as sch_appointment_types_qualifier,\n            sch_appointment_types.created_by as sch_appointment_types_created_by,\n            sch_appointment_types.updated_by as sch_appointment_types_updated_by,\n            sch_appointment_types.created_at as sch_appointment_types_created_at,\n            sch_appointment_types.updated_at as sch_appointment_types_updated_at,\n            sch_appointment_types.deleted_at as sch_appointment_types_deleted_at,\n            sch_appointment_types.is_editable as sch_appointment_types_is_editable,\n            sch_appointment_types.avoid_checkedin as sch_appointment_types_avoid_checkedin,\n            sch_appointment_types.is_reading_provider as sch_appointment_types_is_reading_provider,\n\n            sch_appointment_statuses.id as sch_appointment_statuses_id,\n            sch_appointment_statuses.name as sch_appointment_statuses_name,\n            sch_appointment_statuses.slug as sch_appointment_statuses_slug,\n            sch_appointment_statuses.created_by as sch_appointment_statuses_created_by,\n            sch_appointment_statuses.updated_by as sch_appointment_statuses_updated_by,\n            sch_appointment_statuses.created_at as sch_appointment_statuses_created_at,\n            sch_appointment_statuses.updated_at as sch_appointment_statuses_updated_at,\n            sch_appointment_statuses.deleted_at as sch_appointment_statuses_deleted_at,\n\n            kiosk_patient.id as patient_id,\n            kiosk_patient.key as patient_key,\n            kiosk_patient.first_name as patient_first_name,\n            kiosk_patient.middle_name as patient_middle_name,\n            kiosk_patient.last_name as patient_last_name,\n            kiosk_patient.dob as patient_dob,\n            kiosk_patient.gender as patient_gender,\n            kiosk_patient.age as patient_age,\n            kiosk_patient.ssn as patient_ssn,\n            kiosk_patient.cell_phone as patient_cell_phone,\n            kiosk_patient.home_phone as patient_home_phone,\n            kiosk_patient.work_phone as patient_work_phone,\n            kiosk_patient.height_ft as patient_height_ft,\n            kiosk_patient.height_in as patient_height_in,\n            kiosk_patient.weight_lbs as patient_weight_lbs,\n            kiosk_patient.weight_kg as patient_weight_kg,\n            kiosk_patient.meritial_status as patient_meritial_status,\n            kiosk_patient.profile_avatar as patient_profile_avatar,\n            kiosk_patient.need_translator as patient_need_translator,\n            kiosk_patient.language as patient_language,\n            kiosk_patient.is_pregnant as patient_pregnant,\n            kiosk_patient.is_law_enforcement_agent as patient_is_law_enforcement_agent,\n            kiosk_patient.status as patient_status,\n            kiosk_patient.notes as patient_notes,\n            kiosk_patient.created_by as patient_created_by,\n            kiosk_patient.updated_by as patient_updated_by,\n            kiosk_patient.created_at as patient_created_at,\n            kiosk_patient.updated_at as patient_updated_at,\n            kiosk_patient.deleted_at as patient_deleted_at,\n            kiosk_patient.user_id as patient_user_id,\n            kiosk_patient.title as patient_title,\n            kiosk_patient.ethnicity as patient_ethnicity,\n            kiosk_patient.race as patient_race,\n            kiosk_patient.suffix as patient_suffix,\n            kiosk_patient.by_health_app as patient_by_health_app,\n            kiosk_patient.creation_source as patient_creation_source,\n            kiosk_patient.is_active as patient_is_active,\n            kiosk_patient.is_soft_registered as patient_is_soft_registered,\n\n            physician_clinics.id as physician_clinics_id,\n            physician_clinics.clinic_id as physician_clinics_clinic_id,\n            physician_clinics.clinic_locations_id as physician_clinic_location,\n            physician_clinics.physician_id as physician_clinics_physician_id,\n\n            physicians.id as physician_id,\n            physicians.first_name as physician_first_name,\n            physicians.middle_name as physician_middle_name,\n            physicians.last_name as physician_last_name,\n            physicians.cell_no as physician_cell_no,\n            physicians.email as physician_email,\n            physicians.npi_no as physician_npi_no,\n            physicians.license_no as physician_license_no,\n\n            clinics.id as clinic_id,\n            clinics.name as clinic_name,\n\n            clinic_locations.id as clinic_location_id,\n            clinic_locations.clinic_id as clinic_location_clinic_id,\n            clinic_locations.city as clinic_location_city,\n            clinic_locations.state as clinic_location_state,\n            clinic_locations.zip as clinic_location_zip,\n            clinic_locations.phone as clinic_location_phone,\n            clinic_locations.fax as clinic_location_fax,\n            clinic_locations.email as clinic_location_email,\n            clinic_locations.street_address as clinic_location_street_address,\n            clinic_locations.extension as clinic_location_extension,\n            clinic_locations.floor as clinic_location_floor,\n            clinic_locations.is_primary as clinic_location_is_primary,\n            clinic_locations.status as clinic_location_status,\n\n            technician.id as technician_id,\n            technician.email as technician_email,\n\n            technician_basic_info.id as technician_basic_info_id,\n            technician_basic_info.first_name as technician_first_name,\n            technician_basic_info.middle_name as technician_middle_name,\n            technician_basic_info.last_name as technician_last_name,\n            technician_basic_info.date_of_birth as technician_date_of_birth,\n            technician_basic_info.gender as technician_gender,\n            technician_basic_info.user_id as technician_user_id,\n            technician_basic_info.area_id as technician_area_id,\n            technician_basic_info.title as technician_title,\n            technician_basic_info.cell_no as technician_cell_no,\n            technician_basic_info.address as technician_address,\n            technician_basic_info.work_phone as technician_work_phone,\n            technician_basic_info.fax as technician_fax,\n            technician_basic_info.extension as technician_extension,\n            technician_basic_info.home_phone as technician_home_phone,\n            technician_basic_info.emergency_name as technician_emergency_name,\n            technician_basic_info.emergency_phone as technician_emergency_phone,\n            technician_basic_info.biography as technician_biography,\n            technician_basic_info.hiring_date as technician_hiring_date,\n            technician_basic_info.from as technician_from,\n            technician_basic_info.to as technician_to,\n            technician_basic_info.profile_pic as technician_profile_pic,\n            technician_basic_info.city as technician_city,\n            technician_basic_info.state as technician_state,\n            technician_basic_info.zip as technician_zip,\n            technician_basic_info.social_security as technician_social_security,\n            technician_basic_info.profile_pic_url as technician_profile_pic_url,\n            technician_basic_info.apartment_suite as technician_apartment_suite,\n            technician_basic_info.file_id as technician_file_id,\n            technician_basic_info.deleted_at as technician_deleted_at,\n\n\n            readingProvider.id as readingProvider_id,\n            readingProvider.email as readingProvider_email,\n\n            readingProvider_basic_info.id as readingProvider_basic_info_id,\n            readingProvider_basic_info.first_name as readingProvider_first_name,\n            readingProvider_basic_info.middle_name as readingProvider_middle_name,\n            readingProvider_basic_info.last_name as readingProvider_last_name,\n            readingProvider_basic_info.date_of_birth as readingProvider_date_of_birth,\n            readingProvider_basic_info.gender as readingProvider_gender,\n            readingProvider_basic_info.user_id as readingProvider_user_id,\n            readingProvider_basic_info.area_id as readingProvider_area_id,\n            readingProvider_basic_info.title as readingProvider_title,\n            readingProvider_basic_info.cell_no as readingProvider_cell_no,\n            readingProvider_basic_info.address as readingProvider_address,\n            readingProvider_basic_info.work_phone as readingProvider_work_phone,\n            readingProvider_basic_info.fax as readingProvider_fax,\n            readingProvider_basic_info.extension as readingProvider_extension,\n            readingProvider_basic_info.home_phone as readingProvider_home_phone,\n            readingProvider_basic_info.emergency_name as readingProvider_emergency_name,\n            readingProvider_basic_info.emergency_phone as readingProvider_emergency_phone,\n            readingProvider_basic_info.biography as readingProvider_biography,\n            readingProvider_basic_info.hiring_date as readingProvider_hiring_date,\n            readingProvider_basic_info.from as readingProvider_from,\n            readingProvider_basic_info.to as readingProvider_to,\n            readingProvider_basic_info.profile_pic as readingProvider_profile_pic,\n            readingProvider_basic_info.city as readingProvider_city,\n            readingProvider_basic_info.state as readingProvider_state,\n            readingProvider_basic_info.zip as readingProvider_zip,\n            readingProvider_basic_info.social_security as readingProvider_social_security,\n            readingProvider_basic_info.profile_pic_url as readingProvider_profile_pic_url,\n            readingProvider_basic_info.apartment_suite as readingProvider_apartment_suite,\n            readingProvider_basic_info.file_id as readingProvider_file_id,\n            readingProvider_basic_info.deleted_at as readingProvider_deleted_at,\n\n            billing_codes.id as billing_codes_id,\n            billing_codes.name as billing_codes_name,\n            billing_codes.type as billing_codes_type,\n            billing_codes.code_type_id as billing_codes_code_type_id,\n            billing_codes.description as billing_codes_description,\n            billing_codes.short_description as billing_codes_short_description,\n            billing_codes.long_description as billing_codes_long_description,\n            billing_codes.comments as billing_codes_comments,\n\n            availableSpeciality.id as availableSpeciality_id,\n            availableSpeciality.key as availableSpeciality_key,\n            availableSpeciality.start_date as availableSpeciality_start_date,\n            availableSpeciality.end_date as availableSpeciality_end_date,\n            availableSpeciality.end_date_for_recurrence as availableSpeciality_end_date_for_recurrence,\n            availableSpeciality.no_of_doctors as availableSpeciality_no_of_doctors,\n            availableSpeciality.no_of_slots as availableSpeciality_no_of_slots,\n            availableSpeciality.end_after_occurences as availableSpeciality_end_after_occurences,\n            availableSpeciality.number_of_entries as availableSpeciality_number_of_entries,\n            availableSpeciality.speciality_id as availableSpeciality_speciality_id,\n            availableSpeciality.facility_location_id as availableSpeciality_facility_location_id,\n            availableSpeciality.recurrence_ending_criteria_id as availableSpeciality_recurrence_ending_criteria_id,\n            availableSpeciality.deleted_at as availableSpeciality_deleted_at,\n\n            availableSpecialityDoctor.id as availableSpecialityDoctor_id,\n            availableSpecialityDoctor.key as availableSpecialityDoctor_key,\n            availableSpecialityDoctor.start_date as availableSpecialityDoctor_start_date,\n            availableSpecialityDoctor.end_date as availableSpecialityDoctor_end_date,\n            availableSpecialityDoctor.no_of_slots as availableSpecialityDoctor_no_of_slots,\n            availableSpecialityDoctor.doctor_id as availableSpecialityDoctor_doctor_id,\n            availableSpecialityDoctor.facility_location_id as availableSpecialityDoctor_facility_location_id,\n            availableSpecialityDoctor.available_speciality_id as availableSpecialityDoctor_available_speciality_id,\n            availableSpecialityDoctor.supervisor_id as availableSpecialityDoctor_supervisor_id,\n            availableSpecialityDoctor.is_provider_assignment as availableSpecialityDoctor_is_provider_assignment,\n\n            facilityLocation.id as facilityLocation_id,\n            facilityLocation.facility_id as facilityLocation_facility_id,\n            facilityLocation.name as facilityLocation_name,\n            facilityLocation.city as facilityLocation_city,\n            facilityLocation.state as facilityLocation_state,\n            facilityLocation.zip as facilityLocation_zip,\n            facilityLocation.region_id as facilityLocation_region_id,\n            facilityLocation.address as facilityLocation_address,\n            facilityLocation.phone as facilityLocation_phone,\n            facilityLocation.fax as facilityLocation_fax,\n            facilityLocation.email as facilityLocation_email,\n            facilityLocation.office_hours_start as facilityLocation_office_hours_start,\n            facilityLocation.office_hours_end as facilityLocation_office_hours_end,\n            facilityLocation.lat as facilityLocation_lat,\n            facilityLocation.long as facilityLocation_long,\n            facilityLocation.day_list as facilityLocation_day_list,\n            facilityLocation.floor as facilityLocation_floor,\n            facilityLocation.place_of_service_id as facilityLocation_place_of_service_id,\n            facilityLocation.qualifier as facilityLocation_qualifier,\n            facilityLocation.ext_no as facilityLocation_ext_no,\n            facilityLocation.cell_no as facilityLocation_cell_no,\n            facilityLocation.is_main as facilityLocation_is_main,\n            facilityLocation.same_as_provider as facilityLocation_same_as_provider,\n            facilityLocation.dean as facilityLocation_dean,\n\n            specialities.id as specialities_id,\n            specialities.name as specialities_name,\n            specialities.description as specialities_description,\n            specialities.time_slot as specialities_time_slot,\n            specialities.over_booking as specialities_over_booking,\n            specialities.has_app as specialities_has_app,\n            specialities.speciality_key as specialities_speciality_key,\n            specialities.comments as specialities_comments,\n            specialities.default_name as specialities_default_name,\n            specialities.qualifier as specialities_qualifier,\n            specialities.is_defualt as specialities_is_defualt,\n            specialities.is_available as specialities_is_available,\n            specialities.is_create_appointment as specialities_is_create_appointment,\n            specialities.is_editable as specialities_is_editable,\n\n            doctor.id as doctor_id,\n            doctor.email as doctor_email,\n            doctor.reset_key as doctor_reset_key,\n            doctor.status as doctor_status,\n            doctor.is_loggedIn as doctor_is_loggedIn,\n            doctor.remember_token as doctor_remember_token,\n\n            doctorBasicInfo.id as doctorBasicInfo_id,\n            doctorBasicInfo.first_name as doctorBasicInfo_first_name,\n            doctorBasicInfo.middle_name as doctorBasicInfo_middle_name,\n            doctorBasicInfo.last_name as doctorBasicInfo_last_name,\n            doctorBasicInfo.date_of_birth as doctorBasicInfo_date_of_birth,\n            doctorBasicInfo.gender as doctorBasicInfo_gender,\n            doctorBasicInfo.user_id as doctorBasicInfo_user_id,\n            doctorBasicInfo.area_id as doctorBasicInfo_area_id,\n            doctorBasicInfo.title as doctorBasicInfo_title,\n            doctorBasicInfo.cell_no as doctorBasicInfo_cell_no,\n            doctorBasicInfo.address as doctorBasicInfo_address,\n            doctorBasicInfo.work_phone as doctorBasicInfo_work_phone,\n            doctorBasicInfo.fax as doctorBasicInfo_fax,\n            doctorBasicInfo.extension as doctorBasicInfo_extension,\n            doctorBasicInfo.home_phone as doctorBasicInfo_home_phone,\n            doctorBasicInfo.emergency_name as doctorBasicInfo_emergency_name,\n            doctorBasicInfo.emergency_phone as doctorBasicInfo_emergency_phone,\n            doctorBasicInfo.biography as doctorBasicInfo_biography,\n            doctorBasicInfo.hiring_date as doctorBasicInfo_hiring_date,\n            doctorBasicInfo.from as doctorBasicInfo_from,\n            doctorBasicInfo.to as doctorBasicInfo_to,\n            doctorBasicInfo.profile_pic as doctorBasicInfo_profile_pic,\n            doctorBasicInfo.city as doctorBasicInfo_city,\n            doctorBasicInfo.state as doctorBasicInfo_state,\n            doctorBasicInfo.zip as doctorBasicInfo_zip,\n            doctorBasicInfo.social_security as doctorBasicInfo_social_security,\n            doctorBasicInfo.profile_pic_url as doctorBasicInfo_profile_pic_url,\n            doctorBasicInfo.apartment_suite as doctorBasicInfo_apartment_suite,\n\n            medicalIdentifier.id as medicalIdentifier_id,\n            medicalIdentifier.clinic_name as medicalIdentifier_clinic_name,\n\n            billingTitles.id as billingTitles_id,\n            billingTitles.name as billingTitles_name,\n            billingTitles.description as billingTitles_description,\n\n            facilities.id as facilities_id,\n            facilities.name as facilities_name,\n            facilities.slug as facilities_slug,\n            facilities.qualifier as facilities_qualifier\n\n            FROM sch_appointments as appointments\n\n            left join kiosk_cases on kiosk_cases.id = appointments.case_id and kiosk_cases.deleted_at IS NULL\n            left join billing_case_status on billing_case_status.id = kiosk_cases.status_id and billing_case_status.deleted_at IS NULL\n\n            inner join kiosk_case_patient_session on kiosk_case_patient_session.appointment_id = appointments.id and kiosk_case_patient_session.deleted_at IS NULL\n            inner join kiosk_case_patient_session_statuses on kiosk_case_patient_session_statuses.id = kiosk_case_patient_session.status_id and kiosk_case_patient_session_statuses.deleted_at IS NULL\n\n            left join kiosk_case_types on kiosk_case_types.id = appointments.case_type_id and kiosk_case_types.deleted_at IS NULL\n\n            left join sch_appointment_types on sch_appointment_types.id = appointments.type_id and sch_appointment_types.deleted_at IS NULL\n\n            left join sch_appointment_statuses on sch_appointment_statuses.id = appointments.status_id and sch_appointment_statuses.deleted_at IS NULL\n\n            inner join kiosk_patient on kiosk_patient.id = appointments.patient_id and kiosk_patient.deleted_at IS NULL\n\n            left join physician_clinics on physician_clinics.id = appointments.physician_id and physician_clinics.deleted_at IS NULL\n            left join physicians on physicians.id = physician_clinics.physician_id and physicians.deleted_at IS NULL\n            left join clinics on clinics.id = physician_clinics.clinic_id and clinics.deleted_at IS NULL\n            left join clinic_locations on clinic_locations.id = physician_clinics.clinic_locations_id and clinic_locations.deleted_at IS NULL\n\n            left join users as technician on technician.id = appointments.technician_id and technician.deleted_at IS NULL\n            left join user_basic_info as technician_basic_info on technician_basic_info.user_id = technician.id and technician_basic_info.deleted_at IS NULL\n\n            left join users as readingProvider on readingProvider.id = appointments.reading_provider_id and readingProvider.deleted_at IS NULL\n            left join user_basic_info as readingProvider_basic_info on readingProvider_basic_info.user_id = readingProvider.id and readingProvider_basic_info.deleted_at IS NULL\n\n            left join sch_transportations on sch_transportations.appointment_id = appointments.id and sch_transportations.deleted_at IS NULL\n\n            left join sch_appointment_cpt_codes on sch_appointment_cpt_codes.appointment_id = appointments.id and sch_appointment_cpt_codes.deleted_at IS NULL\n            left join billing_codes on billing_codes.id = sch_appointment_cpt_codes.billing_code_id and billing_codes.deleted_at IS NULL\n\n\n            ${v} join sch_available_specialities as availableSpeciality on availableSpeciality.id = appointments.available_speciality_id and availableSpeciality.deleted_at IS NULL\n            left join facility_locations as facilityLocation on facilityLocation.id = availableSpeciality.facility_location_id and facilityLocation.deleted_at IS NULL\n            ${v} join specialities on specialities.id = availableSpeciality.speciality_id and specialities.deleted_at IS NULL\n\n            left join sch_available_doctors as availableSpecialityDoctor on availableSpecialityDoctor.id = appointments.available_doctor_id and availableSpecialityDoctor.deleted_at IS NULL\n            left join users as doctor on doctor.id = availableSpecialityDoctor.doctor_id and doctor.deleted_at IS NULL\n            left join user_basic_info as doctorBasicInfo on doctorBasicInfo.user_id = doctor.id and doctorBasicInfo.deleted_at IS NULL\n            left join medical_identifiers as medicalIdentifier on medicalIdentifier.user_id = doctor.id and medicalIdentifier.deleted_at IS NULL\n            left join billing_titles as billingTitles on billingTitles.id = medicalIdentifier.billing_title_id and billingTitles.deleted_at IS NULL\n            left join facilities on facilities.id = facilityLocation.facility_id and facilities.deleted_at IS NULL\n            ${b}\n            GROUP BY appointments.id\n            ORDER BY appointment_scheduled_date_time DESC\n            ${h})`},this.generateAppointmentListRawQueryV1=e=>{const{patientStatusIds:t,facilityLocationIds:i,specialityIds:a,doctorIds:n,patientId:o,patientName:s,appointmentTypeIds:l,appointmentStatusIds:d,caseTypeIds:_,caseIds:r,startDate:c,endDate:p,paginate:u,page:m,perPage:y}=e;let h="";const f=[];u&&(h=`LIMIT ${(m-1)*y} , ${y}`);let v="left",g="left";if(a&&a.length&&(f.push(`sch_available_specialities.speciality_id in (${String(a)})`),v="inner"),(null==t?void 0:t.length)&&f.push(`kiosk_case_patient_session.status_id in (${String(t)})`),(null==i?void 0:i.length)&&f.push(`sch_available_specialities.facility_location_id in (${String(i)})`),n&&n.length&&(f.push(`sch_available_doctors.doctor_id in (${String(n)})`),g="inner"),o&&f.push(`sch_appointments.patient_id = ${o}`),s){const e=s.replace(/\s+/g," ").trim();f.push(`(kiosk_patient.first_name LIKE '%${e}%' or kiosk_patient.last_name LIKE '%${e}%' or kiosk_patient.middle_name LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%' or CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.first_name) LIKE '%${e}%' or CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.first_name) LIKE '%${e}%'  or CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.middle_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.last_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%' or CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.first_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or  CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.last_name, ' ', kiosk_patient.first_name) LIKE '%${e}%' or  CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.middle_name, ' ', kiosk_patient.first_name) LIKE '%${e}%' or  CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.first_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%')`)}l&&l.length&&f.push(`sch_appointments.type_id in (${String(l)})`),d&&d.length&&f.push(`sch_appointments.status_id in (${String(d)})`),_&&_.length&&f.push(`sch_appointments.case_type_id in (${String(_)})`),r&&r.length&&f.push(`sch_appointments.case_id in (${String(r)})`),c&&p&&f.push(`sch_appointments.scheduled_date_time BETWEEN '${c}' AND '${p}'`),f.push("sch_appointments.cancelled = 0"),f.push("sch_appointments.pushed_to_front_desk = 0"),f.push("sch_appointments.deleted_at IS NULL");let b=0,S="";for(const e of f)b+=1,1==b&&(S="where"),S=b!=f.length?`${S} ${e} and`:`${S} ${e}`;return`(SELECT\n            sch_appointments.id,\n            sch_appointments.scheduled_date_time,\n            sch_appointments.confirmation_status,\n            sch_appointments.comments,\n            sch_appointments.case_id,\n            sch_appointments.patient_id,\n            sch_appointments.billable,\n\n            billing_case_status.name as case_status,\n\n            kiosk_case_patient_session.id as kiosk_case_patient_session_id,\n            kiosk_case_patient_session.date_of_check_in as kiosk_case_patient_session_date_of_check_in,\n            kiosk_case_patient_session.time_of_check_in as kiosk_case_patient_session_time_of_check_in,\n            concat_ws(' ',kiosk_case_patient_session.date_of_check_in, kiosk_case_patient_session.time_of_check_in) as date_time,\n            \n            kiosk_case_patient_session_statuses.id as visit_status_id,\n            kiosk_case_patient_session_statuses.name as visit_status_name,\n            kiosk_case_patient_session_statuses.slug as visit_status_slug,\n\n            kiosk_case_types.id as case_type_id,\n            kiosk_case_types.name as case_type_name,\n            kiosk_case_types.slug as case_type_slug,\n\n            sch_appointment_types.id as appointment_type_id,\n            sch_appointment_types.name as appointment_type_name,\n            sch_appointment_types.slug as appointment_type_slug,\n            sch_appointment_types.qualifier as appointment_type_qualifier,\n\n            sch_appointment_statuses.id as appointment_status_id,\n            sch_appointment_statuses.name as appointment_status_name,\n            sch_appointment_statuses.slug as appointment_status_slug,\n\n            kiosk_patient.first_name as patient_first_name,\n            kiosk_patient.middle_name as patient_middle_name,\n            kiosk_patient.last_name as patient_last_name,\n\n            facility_locations.id as facility_location_id,\n            facility_locations.name as facility_location_name,\n            facility_locations.qualifier as facility_location_qualifier,\n\n            specialities.id as speciality_id,\n            specialities.name as speciality_name,\n            specialities.qualifier as speciality_qualifier,\n            specialities.speciality_key as speciality_key,\n\n            user_basic_info.first_name as doctor_first_name,\n            user_basic_info.middle_name as doctor_middle_name,\n            user_basic_info.last_name as doctor_last_name,\n\n            medicalIdentifier.id as medicalIdentifier_id,\n            medicalIdentifier.clinic_name as medicalIdentifier_clinic_name,\n\n            billingTitles.id as billing_titles_id,\n            billingTitles.name as billing_titles_name,\n            billingTitles.description as billing_titles_description,\n\n            facilities.id as facility_id,\n            facilities.name as facility_name,\n            facilities.slug as facility_slug,\n            facilities.qualifier as facility_qualifier,\n\n            visit_sessions.id as visit_session_id\n            \n            FROM sch_appointments\n\n            left join kiosk_cases on kiosk_cases.id = sch_appointments.case_id and kiosk_cases.deleted_at IS NULL\n            left join billing_case_status on billing_case_status.id = kiosk_cases.status_id and billing_case_status.deleted_at IS NULL\n            inner join kiosk_case_patient_session on kiosk_case_patient_session.appointment_id = sch_appointments.id and kiosk_case_patient_session.deleted_at IS NULL\n            left join kiosk_case_patient_session_statuses on kiosk_case_patient_session_statuses.id = kiosk_case_patient_session.status_id and kiosk_case_patient_session_statuses.deleted_at IS NULL\n            left join kiosk_case_types on kiosk_case_types.id = sch_appointments.case_type_id and kiosk_case_types.deleted_at IS NULL\n            left join sch_appointment_types on sch_appointment_types.id = sch_appointments.type_id and sch_appointment_types.deleted_at IS NULL\n            left join sch_appointment_statuses on sch_appointment_statuses.id = sch_appointments.status_id and sch_appointment_statuses.deleted_at IS NULL\n            left join kiosk_patient on kiosk_patient.id = sch_appointments.patient_id and kiosk_patient.deleted_at IS NULL\n            left join visit_sessions on visit_sessions.appointment_id = sch_appointments.id and visit_sessions.deleted_at IS NULL\n\n\n\n            ${v} join sch_available_specialities on sch_available_specialities.id = sch_appointments.available_speciality_id and sch_available_specialities.deleted_at IS NULL\n            left join specialities on specialities.id = sch_available_specialities.speciality_id and specialities.deleted_at IS NULL\n            left join facility_locations on facility_locations.id = sch_available_specialities.facility_location_id and facility_locations.deleted_at IS NULL\n            left join facilities on facilities.id = facility_locations.facility_id and facilities.deleted_at IS NULL\n\n            ${g} join sch_available_doctors on sch_available_doctors.id = sch_appointments.available_doctor_id and sch_available_doctors.deleted_at IS NULL\n            left join users as doctor on doctor.id = sch_available_doctors.doctor_id and doctor.deleted_at IS NULL\n            left join user_basic_info on user_basic_info.user_id = doctor.id and user_basic_info.deleted_at IS NULL\n            left join medical_identifiers as medicalIdentifier on medicalIdentifier.user_id = doctor.id and medicalIdentifier.deleted_at IS NULL\n            left join billing_titles as billingTitles on billingTitles.id = medicalIdentifier.billing_title_id and billingTitles.deleted_at IS NULL\n            ${S}\n            ORDER BY -kiosk_case_patient_session.date_of_check_in DESC, date_time ASC\n            ${h})`},this.getAllDoctorSpecialityAppointmentsRawQuery=e=>{const{facilityLocationIds:t,specialityIds:i,doctorIds:a,endDate:n,startDate:o}=e,s=[];let l="";a&&a.length?l=`and (CASE \n                WHEN sch_appointments.available_doctor_id IS NOT NULL THEN sch_available_doctors.doctor_id in (${String(a)}) and sch_available_specialities.facility_location_id in (${String(t)}) and sch_available_specialities.speciality_id in (${String(i)})\n                ELSE sch_available_specialities.facility_location_id in (${String(t)}) and sch_available_specialities.speciality_id in (${String(i)})\n            END)`:i&&i.length&&(s.push(`sch_available_specialities.speciality_id in (${String(i)})`),(null==t?void 0:t.length)&&s.push(`sch_available_specialities.facility_location_id in (${String(t)})`)),o&&n&&s.push(`sch_appointments.scheduled_date_time BETWEEN '${o.toISOString()}' AND '${n.toISOString()}'`),s.push("sch_appointments.cancelled = 0"),s.push("sch_appointments.pushed_to_front_desk = 0"),s.push("sch_appointments.deleted_at IS NULL");let d=0,_="";for(const e of s)d+=1,1==d&&(_="where"),_=d!=s.length?`${_} ${e} and`:`${_} ${e}`;return`(SELECT\n            sch_appointments.id,\n            sch_appointments.scheduled_date_time as start_date_time,\n            sch_appointments.case_id,\n            sch_appointments.patient_id,\n            sch_appointments.evaluation_date_time,\n            sch_appointments.available_speciality_id,\n            sch_appointments.priority_id,\n            sch_appointments.time_slots as time_slot,\n            sch_appointments.case_id,\n            sch_appointments.appointment_title,\n            sch_appointments.type_id as appointment_type_id,\n            sch_appointments.confirmation_status,\n            sch_appointments.comments,\n            sch_appointments.billable,\n\n            kiosk_patient.first_name,\n            kiosk_patient.middle_name,\n            kiosk_patient.last_name,\n            kiosk_patient.profile_avatar as picture,\n\n            facility_locations.id as facility_location_id,\n\n            specialities.id as speciality_id,\n\n            sch_available_doctors.id as available_doctor_id,\n            sch_available_doctors.doctor_id,\n            user_basic_info.first_name as doctor_first_name,\n            user_basic_info.middle_name as doctor_middle_name,\n            user_basic_info.last_name as doctor_last_name,\n\n            visit_sessions.document_uploaded,\n            visit_session_states.slug as visit_session_state_slug,\n            visit_session_states.name as visit_session_state_name,\n\n            kiosk_case_types.id as case_type_id,\n            kiosk_case_types.name as case_type,\n\n            kiosk_case_patient_session.date_of_check_in,\n            kiosk_case_patient_session.time_of_check_in,\n\n            appointmentVisitSession.deleted_at as last_visit_session_deleted\n\n            FROM sch_appointments\n\n            left join kiosk_patient on kiosk_patient.id = sch_appointments.patient_id and kiosk_patient.deleted_at IS NULL\n            left join kiosk_cases on kiosk_cases.id = sch_appointments.case_id and kiosk_cases.deleted_at IS NULL\n            left join kiosk_case_types on kiosk_case_types.id = sch_appointments.case_type_id and kiosk_case_types.deleted_at IS NULL\n\n            left join sch_appointment_statuses on sch_appointment_statuses.id = sch_appointments.status_id and sch_appointment_statuses.deleted_at IS NULL\n            left join visit_sessions as appointmentVisitSession on appointmentVisitSession.appointment_id = sch_appointments.id and appointmentVisitSession.deleted_at IS NOT NULL\n           \n            left join visit_sessions on visit_sessions.appointment_id = sch_appointments.id and visit_sessions.deleted_at IS NULL\n            left join visit_session_states on visit_session_states.id = visit_sessions.visit_session_state_id and visit_session_states.deleted_at IS NULL\n            \n            left join kiosk_case_patient_session on kiosk_case_patient_session.appointment_id = sch_appointments.id and kiosk_case_patient_session.deleted_at IS NULL\n\n            left join sch_available_specialities on sch_available_specialities.id = sch_appointments.available_speciality_id and sch_available_specialities.deleted_at IS NULL\n            left join specialities on specialities.id = sch_available_specialities.speciality_id and specialities.deleted_at IS NULL\n            left join facility_locations on facility_locations.id = sch_available_specialities.facility_location_id and facility_locations.deleted_at IS NULL\n\n            left join sch_available_doctors on sch_available_doctors.id = sch_appointments.available_doctor_id and sch_available_doctors.deleted_at IS NULL\n            left join users as doctor on doctor.id = sch_available_doctors.doctor_id and doctor.deleted_at IS NULL\n            left join user_basic_info on user_basic_info.user_id = doctor.id and user_basic_info.deleted_at IS NULL\n\n            ${_}            \n            ${l}\n\n            Group by sch_appointments.id\n            )`},this.generateGenericAppointmentRawQuery=e=>{const{applyLimit:t,requiredCondition:i,requiredConditionForDoctor:a,whereClause:n,dynamicQueryClause:{queryColumns:o,queryJoins:s,queryOrderBy:l}}=e;return`(SELECT\n            sch_appointments.id,\n            sch_appointments.scheduled_date_time,\n            sch_appointments.case_id,\n            sch_appointments.patient_id,\n            sch_appointments.billable,\n\n            sch_appointment_types.id as appointment_type_id,\n            sch_appointment_types.name as appointment_type_name,\n            sch_appointment_types.slug as appointment_type_slug,\n            sch_appointment_types.qualifier as appointment_type_qualifier,\n\n            kiosk_patient.first_name as patient_first_name,\n            kiosk_patient.middle_name as patient_middle_name,\n            kiosk_patient.last_name as patient_last_name,\n\n            facility_locations.id as facility_location_id,\n            facility_locations.name as facility_location_name,\n            facility_locations.qualifier as facility_location_qualifier,\n\n            specialities.id as speciality_id,\n            specialities.name as speciality_name,\n            specialities.qualifier as speciality_qualifier,\n            specialities.speciality_key as speciality_key,\n\n            facilities.id as facility_id,\n            facilities.name as facility_name,\n            facilities.slug as facility_slug,\n            facilities.qualifier as facility_qualifier,\n\n            ${o}\n\n            sch_available_doctors.doctor_id,\n            user_basic_info.first_name as doctor_first_name,\n            user_basic_info.middle_name as doctor_middle_name,\n            user_basic_info.last_name as doctor_last_name,\n\n            billing_titles.name as billing_title\n            \n            FROM sch_appointments\n\n            left join sch_appointment_types on sch_appointment_types.id = sch_appointments.type_id and sch_appointment_types.deleted_at IS NULL\n            left join kiosk_patient on kiosk_patient.id = sch_appointments.patient_id and kiosk_patient.deleted_at IS NULL\n\n            ${i} join sch_available_specialities on sch_available_specialities.id = sch_appointments.available_speciality_id and sch_available_specialities.deleted_at IS NULL\n            left join specialities on specialities.id = sch_available_specialities.speciality_id and specialities.deleted_at IS NULL\n            left join facility_locations on facility_locations.id = sch_available_specialities.facility_location_id and facility_locations.deleted_at IS NULL\n            left join facilities on facilities.id = facility_locations.facility_id and facilities.deleted_at IS NULL\n\n            ${a} join sch_available_doctors on sch_available_doctors.id = sch_appointments.available_doctor_id and sch_available_doctors.deleted_at IS NULL\n            left join users as doctor on doctor.id = sch_available_doctors.doctor_id and doctor.deleted_at IS NULL\n            left join user_basic_info on user_basic_info.user_id = doctor.id and user_basic_info.deleted_at IS NULL\n\n            left join medical_identifiers on medical_identifiers.user_id = doctor.id and medical_identifiers.deleted_at IS NULL\n            left join billing_titles on billing_titles.id = medical_identifiers.billing_title_id and billing_titles.deleted_at IS NULL\n            \n            ${s}\n\n            ${n}\n            ${l}\n            ${t})`},this.generateGenericAppointmentRawQueryCount=e=>{const{applyLimit:t,requiredCondition:i,requiredConditionForDoctor:a,whereClause:n}=e;return`(SELECT\n            COUNT(DISTINCT(sch_appointments.id)) as total_count\n\n            FROM sch_appointments\n\n            left join sch_appointment_types on sch_appointment_types.id = sch_appointments.type_id and sch_appointment_types.deleted_at IS NULL\n            left join kiosk_patient on kiosk_patient.id = sch_appointments.patient_id and kiosk_patient.deleted_at IS NULL\n\n            ${i} join sch_available_specialities on sch_available_specialities.id = sch_appointments.available_speciality_id and sch_available_specialities.deleted_at IS NULL\n            left join specialities on specialities.id = sch_available_specialities.speciality_id and specialities.deleted_at IS NULL\n            left join facility_locations on facility_locations.id = sch_available_specialities.facility_location_id and facility_locations.deleted_at IS NULL\n\n            ${a} join sch_available_doctors on sch_available_doctors.id = sch_appointments.available_doctor_id and sch_available_doctors.deleted_at IS NULL\n            \n            ${n}\n            )`},this.appointmentListQuery=()=>({queryColumns:"\n            sch_appointments.confirmation_status,\n            sch_appointments.comments,\n    \n            billing_case_status.name as case_status,\n\n            kiosk_case_patient_session_statuses.id as visit_status_id,\n            kiosk_case_patient_session_statuses.name as visit_status_name,\n            kiosk_case_patient_session_statuses.slug as visit_status_slug,\n\n            kiosk_case_types.id as case_type_id,\n            kiosk_case_types.name as case_type_name,\n            kiosk_case_types.slug as case_type_slug,\n\n\n            sch_appointment_statuses.id as appointment_status_id,\n            sch_appointment_statuses.name as appointment_status_name,\n            sch_appointment_statuses.slug as appointment_status_slug,\n\n            visit_sessions.id as visit_session_id,\n\n            sch_appointments.created_at,\n            sch_appointments.updated_at,\n\n            concat_ws(' ', created_by_user.first_name, created_by_user.middle_name ,created_by_user.last_name) as created_by_name,\n            concat_ws(' ', updated_by_user.first_name, updated_by_user.middle_name ,updated_by_user.last_name) as updated_by_name,\n            \n            ",queryJoins:"\n            left join kiosk_cases on kiosk_cases.id = sch_appointments.case_id and kiosk_cases.deleted_at IS NULL\n            left join billing_case_status on billing_case_status.id = kiosk_cases.status_id and billing_case_status.deleted_at IS NULL\n            left join kiosk_case_patient_session on kiosk_case_patient_session.appointment_id = sch_appointments.id and kiosk_case_patient_session.deleted_at IS NULL\n            left join kiosk_case_patient_session_statuses on kiosk_case_patient_session_statuses.id = kiosk_case_patient_session.status_id and kiosk_case_patient_session_statuses.deleted_at IS NULL\n            left join kiosk_case_types on kiosk_case_types.id = sch_appointments.case_type_id and kiosk_case_types.deleted_at IS NULL\n            left join sch_appointment_statuses on sch_appointment_statuses.id = sch_appointments.status_id and sch_appointment_statuses.deleted_at IS NULL\n            left join visit_sessions on visit_sessions.appointment_id = sch_appointments.id and visit_sessions.deleted_at IS NULL\n            left join user_basic_info as created_by_user on created_by_user.user_id = sch_appointments.created_by and created_by_user.deleted_at  is NULL\n            left join user_basic_info as updated_by_user on updated_by_user.user_id = sch_appointments.updated_by and updated_by_user.deleted_at  is NULL\n            ",queryOrderBy:"ORDER BY sch_appointments.scheduled_date_time DESC"}),this.cancelledListQuery=()=>({queryColumns:"\n        sch_appointments.updated_at,\n        sch_appointments.created_at,\n        sch_appointments.cancelled_comments,\n        sch_appointments.is_redo,\n        sch_appointments.priority_id, \n        sch_appointments.case_type_id,\n        sch_appointments.time_slots,\n        sch_appointments.appointment_title,\n        sch_appointments.status_id,\n        sch_appointments.confirmation_status,\n        sch_appointments.created_by,\n        sch_appointments.updated_by,\n        kiosk_case_patient_session.status_id as session_status_id,\n        concat_ws(' ', created_by_user.first_name, created_by_user.middle_name ,created_by_user.last_name) as created_by_name,\n        concat_ws(' ', updated_by_user.first_name, updated_by_user.middle_name ,updated_by_user.last_name) as updated_by_name,\n        ",queryJoins:"\n        left join kiosk_case_patient_session on kiosk_case_patient_session.appointment_id = sch_appointments.id\n        left join user_basic_info as created_by_user on created_by_user.user_id = sch_appointments.created_by and created_by_user.deleted_at  is NULL\n        left join user_basic_info as updated_by_user on updated_by_user.user_id = sch_appointments.updated_by and updated_by_user.deleted_at  is NULL\n        ",queryOrderBy:" GROUP BY sch_appointments.id ORDER BY sch_appointments.updated_at DESC , kiosk_case_patient_session.deleted_at DESC"}),this.rescheduledListQuery=()=>({queryColumns:"\n            sch_appointments.time_slots,\n            sch_appointments.pushed_to_front_desk_comments,\n            sch_appointments.updated_at,\n            sch_appointments.created_at,\n    \n            kiosk_case_types.id as case_type_id,\n            kiosk_case_types.name as case_type_name,\n            kiosk_case_types.slug as case_type_slug,\n\n            targetFacilityLocation.id as target_facility_location_id,\n            targetFacilityLocation.name as target_facility_location_name,\n            targetFacilityLocation.qualifier as target_facility_location_qualifier,\n    \n            targetFacilities.id AS target_facility_id,\n            targetFacilities.name AS target_facility_name,\n            targetFacilities.slug AS target_facility_slug,\n            targetFacilities.qualifier AS target_facility_qualifier,\n    \n            originFacilityLocation.id as origin_facility_location_id,\n            originFacilityLocation.name as origin_facility_location_name,\n            originFacilityLocation.qualifier as origin_facility_location_qualifier,\n\n            originFacilities.id AS origin_facility_id,\n            originFacilities.name AS origin_facility_name,\n            originFacilities.slug AS origin_facility_slug,\n            originFacilities.qualifier AS origin_facility_qualifier,\n\n            updatedByUserBasicInfo.first_name AS updated_by_first_name,\n            updatedByUserBasicInfo.last_name AS updated_by_last_name,\n            updatedByUserBasicInfo.middle_name AS updated_by_middle_name,\n\n            createdByUserBasicInfo.first_name AS created_by_first_name,\n            createdByUserBasicInfo.last_name AS created_by_last_name,\n            createdByUserBasicInfo.middle_name AS created_by_middle_name,\n            ",queryJoins:"\n            left join kiosk_case_types on kiosk_case_types.id = sch_appointments.case_type_id and kiosk_case_types.deleted_at IS NULL\n            left join facility_locations as targetFacilityLocation on targetFacilityLocation.id = sch_appointments.target_facility_id and targetFacilityLocation.deleted_at IS NULL\n            left join facilities as targetFacilities on targetFacilities.id = targetFacilityLocation.facility_id and targetFacilities.deleted_at IS NULL\n            left join facility_locations as originFacilityLocation on originFacilityLocation.id = sch_appointments.origin_facility_id and originFacilityLocation.deleted_at IS NULL\n            left join facilities as originFacilities on originFacilities.id = originFacilityLocation.facility_id and originFacilities.deleted_at IS NULL\n            left join users as updatedBy on sch_appointments.updated_by = updatedBy.id AND updatedBy.deleted_at IS NULL\n            left join user_basic_info as updatedByUserBasicInfo on updatedBy.id = updatedByUserBasicInfo.user_id AND updatedByUserBasicInfo.deleted_at IS NULL\n            left join users as createdBy on sch_appointments.created_by = createdBy.id AND createdBy.deleted_at IS NULL\n            left join user_basic_info as createdByUserBasicInfo on updatedBy.id = createdByUserBasicInfo.user_id AND createdByUserBasicInfo.deleted_at IS NULL\n            ",queryOrderBy:"ORDER BY sch_appointments.updated_at DESC"}),this.patientAppointmentQuery=()=>({queryColumns:"\n            sch_appointments.pushed_to_front_desk,\n            sch_appointments.pushed_to_front_desk_comments,\n            sch_appointments.cancelled,\n            sch_appointments.cancelled_comments,\n            sch_appointments.updated_at,\n            sch_appointments.action_performed,\n\n            sch_appointment_statuses.id as appointment_status_id,\n            sch_appointment_statuses.name as appointment_status_name,\n            sch_appointment_statuses.slug as appointment_status_slug,\n    \n            kiosk_case_types.id as case_type_id,\n            kiosk_case_types.name as case_type_name,\n            kiosk_case_types.slug as case_type_slug,\n\n            kiosk_case_patient_session_statuses.id as visit_status_id,\n            kiosk_case_patient_session_statuses.name as visit_status_name,\n            kiosk_case_patient_session_statuses.slug as visit_status_slug,\n            ",queryJoins:"\n            left join sch_appointment_statuses on sch_appointment_statuses.id = sch_appointments.status_id and sch_appointment_statuses.deleted_at IS NULL\n            left join kiosk_case_types on kiosk_case_types.id = sch_appointments.case_type_id and kiosk_case_types.deleted_at IS NULL\n            left join kiosk_case_patient_session on kiosk_case_patient_session.appointment_id = sch_appointments.id and kiosk_case_patient_session.deleted_at IS NULL\n            left join kiosk_case_patient_session_statuses on kiosk_case_patient_session_statuses.id = kiosk_case_patient_session.status_id and kiosk_case_patient_session_statuses.deleted_at IS NULL\n            ",queryOrderBy:""}),this.generateGetSinglePatientAppointmentsRawQuery=e=>{const{facilityLocationIds:t,specialityIds:i,patientId:a,patientName:n,appointmentStatusIds:o,caseIds:s,startDate:l,endDate:d,paginate:_,page:r,perPage:c}=e;let p="";const u=[];_&&(p=`LIMIT ${(r-1)*c} , ${c}`);let m="left";if(i&&i.length&&(u.push(`specialities.id in (${String(i)})`),u.push(`availableSpeciality.speciality_id in (${String(i)})`),m="inner"),(null==t?void 0:t.length)&&u.push(`availableSpeciality.facility_location_id in (${String(t)})`),n){const e=n.replace(/\s+/g," ").trim();u.push(`(kiosk_patient.first_name LIKE '%${e}%' or kiosk_patient.last_name LIKE '%${e}%' or kiosk_patient.middle_name LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%' or CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.first_name) LIKE '%${e}%' or CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.first_name) LIKE '%${e}%'  or CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.middle_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.last_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%' or CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.first_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or  CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.last_name, ' ', kiosk_patient.first_name) LIKE '%${e}%' or  CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.middle_name, ' ', kiosk_patient.first_name) LIKE '%${e}%' or  CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.first_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%')`)}o&&o.length&&u.push(`appointments.status_id in (${String(o)})`),s&&s.length&&u.push(`appointments.case_id in (${String(s)})`),l&&d&&u.push(`appointments.scheduled_date_time BETWEEN '${l}' AND '${d}'`),u.push(`appointments.patient_id = ${a}`),u.push("appointments.pushed_to_front_desk = 0"),u.push("appointments.deleted_at IS NULL");let y=0,h="";for(const e of u)y+=1,1==y&&(h="where"),h=y!=u.length?`${h} ${e} and`:`${h} ${e}`;return`(SELECT\n            appointments.id as appointment_id,\n            appointments.key as appointment_key,\n            appointments.scheduled_date_time as appointment_scheduled_date_time,\n            appointments.evaluation_date_time as appointment_evaluation_date_time,\n            appointments.time_slots as appointment_time_slot,\n            appointments.appointment_title as appointment_title,\n            appointments.action_performed as appointment_action_performed,\n            appointments.confirmation_status as appointment_confirmation_status,\n            appointments.cancelled as appointment_cancelled,\n            appointments.pushed_to_front_desk as appointment_pushed_to_front_dest,\n            appointments.comments as appointment_comments,\n            appointments.by_health_app as appointment_by_health_app,\n            appointments.date_list_id as appointment_date_list_id,\n            appointments.target_facility_id as appointment_target_facility_id,\n            appointments.origin_facility_id as appointment_origin_facility_id,\n            appointments.case_id as appointment_case_id,\n            appointments.case_type_id as appointment_case_type_id,\n            appointments.patient_id as appointment_patient_id,\n            appointments.type_id as appointment_type_id,\n            appointments.status_id as appointment_status_id,\n            appointments.priority_id as appointment_priority_id,\n            appointments.available_doctor_id as appointment_available_doctor_id,\n            appointments.available_speciality_id as appointment_available_speciality_id,\n            appointments.billable as appointment_billable,\n            appointments.pushed_to_front_desk_comments as appointment_pushed_to_front_desk_comments,\n            appointments.cancelled_comments as appointment_cancelled_comments,\n            appointments.is_speciality_base as appointment_is_speciality_base,\n            appointments.created_by as appointment_created_by,\n            appointments.updated_by as appointment_updated_by,\n            appointments.created_at as appointment_created_at,\n            appointments.updated_at as appointment_updated_at,\n            appointments.deleted_at as appointment_deleted_at,\n            appointments.is_redo as appointment_is_redo,\n            appointments.is_active as appointment_is_active,\n            appointments.is_soft_registered as appointment_is_soft_registered,\n            appointments.physician_id as appointment_physician_id,\n            appointments.technician_id as appointment_technician_id,\n\n            appointments.reading_provider_id as appointment_reading_provider_id,\n            appointments.cd_image as appointment_cd_image,\n            appointments.is_transportation as appointment_is_transportation,\n\n            kiosk_cases.id as patient_case_id,\n\n            billing_case_status.id as billing_case_status_id,\n            billing_case_status.name as billing_case_status_name,\n\n            kiosk_case_patient_session.id as kiosk_case_patient_session_id,\n            kiosk_case_patient_session.key as kiosk_case_patient_session_key,\n            kiosk_case_patient_session.status_id as kiosk_case_patient_session_status_id,\n            kiosk_case_patient_session.case_id as kiosk_case_patient_session_case_id,\n            kiosk_case_patient_session.date_of_check_in as kiosk_case_patient_session_date_of_check_in,\n            kiosk_case_patient_session.time_of_check_in as kiosk_case_patient_session_time_of_check_in,\n            kiosk_case_patient_session.date_of_check_out as kiosk_case_patient_session_date_of_check_out,\n            kiosk_case_patient_session.time_of_check_out as kiosk_case_patient_session_time_of_check_out,\n            kiosk_case_patient_session.created_by as kiosk_case_patient_session_created_by,\n            kiosk_case_patient_session.updated_by as kiosk_case_patient_session_updated_by,\n            kiosk_case_patient_session.created_at as kiosk_case_patient_session_created_at,\n            kiosk_case_patient_session.updated_at as kiosk_case_patient_session_updated_at,\n            kiosk_case_patient_session.deleted_at as kiosk_case_patient_session_deleted_at,\n            kiosk_case_patient_session.appointment_id as kiosk_case_patient_session_appointment_id,\n\n            kiosk_case_patient_session_statuses.name as kiosk_case_patient_session_statuses_name,\n            kiosk_case_patient_session_statuses.slug as kiosk_case_patient_session_statuses_slug,\n\n            kiosk_case_types.id as kiosk_case_types_id,\n            kiosk_case_types.key as kiosk_case_types_key,\n            kiosk_case_types.name as kiosk_case_types_name,\n            kiosk_case_types.slug as kiosk_case_types_slug,\n            kiosk_case_types.description as kiosk_case_types_description,\n            kiosk_case_types.comments as kiosk_case_types_comments,\n            kiosk_case_types.remainder_days as kiosk_case_types_remainder_days,\n            kiosk_case_types.created_by as kiosk_case_types_created_by,\n            kiosk_case_types.updated_by as kiosk_case_types_updated_by,\n            kiosk_case_types.created_at as kiosk_case_types_created_at,\n            kiosk_case_types.updated_at as kiosk_case_types_updated_at,\n            kiosk_case_types.deleted_at as kiosk_case_types_deleted_at,\n\n            sch_appointment_types.id as sch_appointment_types_id,\n            sch_appointment_types.name as sch_appointment_types_name,\n            sch_appointment_types.slug as sch_appointment_types_slug,\n            sch_appointment_types.description as sch_appointment_types_description,\n            sch_appointment_types.is_all_cpt_codes as sch_appointment_types_is_all_cpt_codes,\n            sch_appointment_types.enable_cpt_codes as sch_appointment_types_enable_cpt_codes,\n            sch_appointment_types.qualifier as sch_appointment_types_qualifier,\n            sch_appointment_types.created_by as sch_appointment_types_created_by,\n            sch_appointment_types.updated_by as sch_appointment_types_updated_by,\n            sch_appointment_types.created_at as sch_appointment_types_created_at,\n            sch_appointment_types.updated_at as sch_appointment_types_updated_at,\n            sch_appointment_types.deleted_at as sch_appointment_types_deleted_at,\n            sch_appointment_types.is_editable as sch_appointment_types_is_editable,\n            sch_appointment_types.avoid_checkedin as sch_appointment_types_avoid_checkedin,\n            sch_appointment_types.is_reading_provider as sch_appointment_types_is_reading_provider,\n\n            sch_appointment_statuses.id as sch_appointment_statuses_id,\n            sch_appointment_statuses.name as sch_appointment_statuses_name,\n            sch_appointment_statuses.slug as sch_appointment_statuses_slug,\n            sch_appointment_statuses.created_by as sch_appointment_statuses_created_by,\n            sch_appointment_statuses.updated_by as sch_appointment_statuses_updated_by,\n            sch_appointment_statuses.created_at as sch_appointment_statuses_created_at,\n            sch_appointment_statuses.updated_at as sch_appointment_statuses_updated_at,\n            sch_appointment_statuses.deleted_at as sch_appointment_statuses_deleted_at,\n\n            kiosk_patient.id as patient_id,\n            kiosk_patient.key as patient_key,\n            kiosk_patient.first_name as patient_first_name,\n            kiosk_patient.middle_name as patient_middle_name,\n            kiosk_patient.last_name as patient_last_name,\n            kiosk_patient.dob as patient_dob,\n            kiosk_patient.gender as patient_gender,\n            kiosk_patient.age as patient_age,\n            kiosk_patient.ssn as patient_ssn,\n            kiosk_patient.cell_phone as patient_cell_phone,\n            kiosk_patient.home_phone as patient_home_phone,\n            kiosk_patient.work_phone as patient_work_phone,\n            kiosk_patient.height_ft as patient_height_ft,\n            kiosk_patient.height_in as patient_height_in,\n            kiosk_patient.weight_lbs as patient_weight_lbs,\n            kiosk_patient.weight_kg as patient_weight_kg,\n            kiosk_patient.meritial_status as patient_meritial_status,\n            kiosk_patient.profile_avatar as patient_profile_avatar,\n            kiosk_patient.need_translator as patient_need_translator,\n            kiosk_patient.language as patient_language,\n            kiosk_patient.is_pregnant as patient_pregnant,\n            kiosk_patient.is_law_enforcement_agent as patient_is_law_enforcement_agent,\n            kiosk_patient.status as patient_status,\n            kiosk_patient.notes as patient_notes,\n            kiosk_patient.created_by as patient_created_by,\n            kiosk_patient.updated_by as patient_updated_by,\n            kiosk_patient.created_at as patient_created_at,\n            kiosk_patient.updated_at as patient_updated_at,\n            kiosk_patient.deleted_at as patient_deleted_at,\n            kiosk_patient.user_id as patient_user_id,\n            kiosk_patient.title as patient_title,\n            kiosk_patient.ethnicity as patient_ethnicity,\n            kiosk_patient.race as patient_race,\n            kiosk_patient.suffix as patient_suffix,\n            kiosk_patient.by_health_app as patient_by_health_app,\n            kiosk_patient.creation_source as patient_creation_source,\n            kiosk_patient.is_active as patient_is_active,\n            kiosk_patient.is_soft_registered as patient_is_soft_registered,\n\n            physician_clinics.id as physician_clinics_id,\n            physician_clinics.clinic_id as physician_clinics_clinic_id,\n            physician_clinics.clinic_locations_id as physician_clinic_location,\n            physician_clinics.physician_id as physician_clinics_physician_id,\n\n            physicians.id as physician_id,\n            physicians.first_name as physician_first_name,\n            physicians.middle_name as physician_middle_name,\n            physicians.last_name as physician_last_name,\n            physicians.cell_no as physician_cell_no,\n            physicians.email as physician_email,\n            physicians.npi_no as physician_npi_no,\n            physicians.license_no as physician_license_no,\n\n            clinics.id as clinic_id,\n            clinics.name as clinic_name,\n\n            clinic_locations.id as clinic_location_id,\n            clinic_locations.clinic_id as clinic_location_clinic_id,\n            clinic_locations.city as clinic_location_city,\n            clinic_locations.state as clinic_location_state,\n            clinic_locations.zip as clinic_location_zip,\n            clinic_locations.phone as clinic_location_phone,\n            clinic_locations.fax as clinic_location_fax,\n            clinic_locations.email as clinic_location_email,\n            clinic_locations.street_address as clinic_location_street_address,\n            clinic_locations.extension as clinic_location_extension,\n            clinic_locations.floor as clinic_location_floor,\n            clinic_locations.is_primary as clinic_location_is_primary,\n            clinic_locations.status as clinic_location_status,\n\n            technician.id as technician_id,\n            technician.email as technician_email,\n\n            technician_basic_info.id as technician_basic_info_id,\n            technician_basic_info.first_name as technician_first_name,\n            technician_basic_info.middle_name as technician_middle_name,\n            technician_basic_info.last_name as technician_last_name,\n            technician_basic_info.date_of_birth as technician_date_of_birth,\n            technician_basic_info.gender as technician_gender,\n            technician_basic_info.user_id as technician_user_id,\n            technician_basic_info.area_id as technician_area_id,\n            technician_basic_info.title as technician_title,\n            technician_basic_info.cell_no as technician_cell_no,\n            technician_basic_info.address as technician_address,\n            technician_basic_info.work_phone as technician_work_phone,\n            technician_basic_info.fax as technician_fax,\n            technician_basic_info.extension as technician_extension,\n            technician_basic_info.home_phone as technician_home_phone,\n            technician_basic_info.emergency_name as technician_emergency_name,\n            technician_basic_info.emergency_phone as technician_emergency_phone,\n            technician_basic_info.biography as technician_biography,\n            technician_basic_info.hiring_date as technician_hiring_date,\n            technician_basic_info.from as technician_from,\n            technician_basic_info.to as technician_to,\n            technician_basic_info.profile_pic as technician_profile_pic,\n            technician_basic_info.city as technician_city,\n            technician_basic_info.state as technician_state,\n            technician_basic_info.zip as technician_zip,\n            technician_basic_info.social_security as technician_social_security,\n            technician_basic_info.profile_pic_url as technician_profile_pic_url,\n            technician_basic_info.apartment_suite as technician_apartment_suite,\n            technician_basic_info.file_id as technician_file_id,\n            technician_basic_info.deleted_at as technician_deleted_at,\n\n\n            readingProvider.id as readingProvider_id,\n            readingProvider.email as readingProvider_email,\n\n            readingProvider_basic_info.id as readingProvider_basic_info_id,\n            readingProvider_basic_info.first_name as readingProvider_first_name,\n            readingProvider_basic_info.middle_name as readingProvider_middle_name,\n            readingProvider_basic_info.last_name as readingProvider_last_name,\n            readingProvider_basic_info.date_of_birth as readingProvider_date_of_birth,\n            readingProvider_basic_info.gender as readingProvider_gender,\n            readingProvider_basic_info.user_id as readingProvider_user_id,\n            readingProvider_basic_info.area_id as readingProvider_area_id,\n            readingProvider_basic_info.title as readingProvider_title,\n            readingProvider_basic_info.cell_no as readingProvider_cell_no,\n            readingProvider_basic_info.address as readingProvider_address,\n            readingProvider_basic_info.work_phone as readingProvider_work_phone,\n            readingProvider_basic_info.fax as readingProvider_fax,\n            readingProvider_basic_info.extension as readingProvider_extension,\n            readingProvider_basic_info.home_phone as readingProvider_home_phone,\n            readingProvider_basic_info.emergency_name as readingProvider_emergency_name,\n            readingProvider_basic_info.emergency_phone as readingProvider_emergency_phone,\n            readingProvider_basic_info.biography as readingProvider_biography,\n            readingProvider_basic_info.hiring_date as readingProvider_hiring_date,\n            readingProvider_basic_info.from as readingProvider_from,\n            readingProvider_basic_info.to as readingProvider_to,\n            readingProvider_basic_info.profile_pic as readingProvider_profile_pic,\n            readingProvider_basic_info.city as readingProvider_city,\n            readingProvider_basic_info.state as readingProvider_state,\n            readingProvider_basic_info.zip as readingProvider_zip,\n            readingProvider_basic_info.social_security as readingProvider_social_security,\n            readingProvider_basic_info.profile_pic_url as readingProvider_profile_pic_url,\n            readingProvider_basic_info.apartment_suite as readingProvider_apartment_suite,\n            readingProvider_basic_info.file_id as readingProvider_file_id,\n            readingProvider_basic_info.deleted_at as readingProvider_deleted_at,\n\n            billing_codes.id as billing_codes_id,\n            billing_codes.name as billing_codes_name,\n            billing_codes.type as billing_codes_type,\n            billing_codes.code_type_id as billing_codes_code_type_id,\n            billing_codes.description as billing_codes_description,\n            billing_codes.short_description as billing_codes_short_description,\n            billing_codes.long_description as billing_codes_long_description,\n            billing_codes.comments as billing_codes_comments,\n\n            availableSpeciality.id as availableSpeciality_id,\n            availableSpeciality.key as availableSpeciality_key,\n            availableSpeciality.start_date as availableSpeciality_start_date,\n            availableSpeciality.end_date as availableSpeciality_end_date,\n            availableSpeciality.end_date_for_recurrence as availableSpeciality_end_date_for_recurrence,\n            availableSpeciality.no_of_doctors as availableSpeciality_no_of_doctors,\n            availableSpeciality.no_of_slots as availableSpeciality_no_of_slots,\n            availableSpeciality.end_after_occurences as availableSpeciality_end_after_occurences,\n            availableSpeciality.number_of_entries as availableSpeciality_number_of_entries,\n            availableSpeciality.speciality_id as availableSpeciality_speciality_id,\n            availableSpeciality.facility_location_id as availableSpeciality_facility_location_id,\n            availableSpeciality.recurrence_ending_criteria_id as availableSpeciality_recurrence_ending_criteria_id,\n            availableSpeciality.deleted_at as availableSpeciality_deleted_at,\n\n            availableSpecialityDoctor.id as availableSpecialityDoctor_id,\n            availableSpecialityDoctor.key as availableSpecialityDoctor_key,\n            availableSpecialityDoctor.start_date as availableSpecialityDoctor_start_date,\n            availableSpecialityDoctor.end_date as availableSpecialityDoctor_end_date,\n            availableSpecialityDoctor.no_of_slots as availableSpecialityDoctor_no_of_slots,\n            availableSpecialityDoctor.doctor_id as availableSpecialityDoctor_doctor_id,\n            availableSpecialityDoctor.facility_location_id as availableSpecialityDoctor_facility_location_id,\n            availableSpecialityDoctor.available_speciality_id as availableSpecialityDoctor_available_speciality_id,\n            availableSpecialityDoctor.supervisor_id as availableSpecialityDoctor_supervisor_id,\n            availableSpecialityDoctor.is_provider_assignment as availableSpecialityDoctor_is_provider_assignment,\n\n            facilityLocation.id as facilityLocation_id,\n            facilityLocation.facility_id as facilityLocation_facility_id,\n            facilityLocation.name as facilityLocation_name,\n            facilityLocation.city as facilityLocation_city,\n            facilityLocation.state as facilityLocation_state,\n            facilityLocation.zip as facilityLocation_zip,\n            facilityLocation.region_id as facilityLocation_region_id,\n            facilityLocation.address as facilityLocation_address,\n            facilityLocation.phone as facilityLocation_phone,\n            facilityLocation.fax as facilityLocation_fax,\n            facilityLocation.email as facilityLocation_email,\n            facilityLocation.office_hours_start as facilityLocation_office_hours_start,\n            facilityLocation.office_hours_end as facilityLocation_office_hours_end,\n            facilityLocation.lat as facilityLocation_lat,\n            facilityLocation.long as facilityLocation_long,\n            facilityLocation.day_list as facilityLocation_day_list,\n            facilityLocation.floor as facilityLocation_floor,\n            facilityLocation.place_of_service_id as facilityLocation_place_of_service_id,\n            facilityLocation.qualifier as facilityLocation_qualifier,\n            facilityLocation.ext_no as facilityLocation_ext_no,\n            facilityLocation.cell_no as facilityLocation_cell_no,\n            facilityLocation.is_main as facilityLocation_is_main,\n            facilityLocation.same_as_provider as facilityLocation_same_as_provider,\n            facilityLocation.dean as facilityLocation_dean,\n\n            specialities.id as specialities_id,\n            specialities.name as specialities_name,\n            specialities.description as specialities_description,\n            specialities.time_slot as specialities_time_slot,\n            specialities.over_booking as specialities_over_booking,\n            specialities.has_app as specialities_has_app,\n            specialities.speciality_key as specialities_speciality_key,\n            specialities.comments as specialities_comments,\n            specialities.default_name as specialities_default_name,\n            specialities.qualifier as specialities_qualifier,\n            specialities.is_defualt as specialities_is_defualt,\n            specialities.is_available as specialities_is_available,\n            specialities.is_create_appointment as specialities_is_create_appointment,\n            specialities.is_editable as specialities_is_editable,\n\n            doctor.id as doctor_id,\n            doctor.email as doctor_email,\n            doctor.reset_key as doctor_reset_key,\n            doctor.status as doctor_status,\n            doctor.is_loggedIn as doctor_is_loggedIn,\n            doctor.remember_token as doctor_remember_token,\n\n            doctorBasicInfo.id as doctorBasicInfo_id,\n            doctorBasicInfo.first_name as doctorBasicInfo_first_name,\n            doctorBasicInfo.middle_name as doctorBasicInfo_middle_name,\n            doctorBasicInfo.last_name as doctorBasicInfo_last_name,\n            doctorBasicInfo.date_of_birth as doctorBasicInfo_date_of_birth,\n            doctorBasicInfo.gender as doctorBasicInfo_gender,\n            doctorBasicInfo.user_id as doctorBasicInfo_user_id,\n            doctorBasicInfo.area_id as doctorBasicInfo_area_id,\n            doctorBasicInfo.title as doctorBasicInfo_title,\n            doctorBasicInfo.cell_no as doctorBasicInfo_cell_no,\n            doctorBasicInfo.address as doctorBasicInfo_address,\n            doctorBasicInfo.work_phone as doctorBasicInfo_work_phone,\n            doctorBasicInfo.fax as doctorBasicInfo_fax,\n            doctorBasicInfo.extension as doctorBasicInfo_extension,\n            doctorBasicInfo.home_phone as doctorBasicInfo_home_phone,\n            doctorBasicInfo.emergency_name as doctorBasicInfo_emergency_name,\n            doctorBasicInfo.emergency_phone as doctorBasicInfo_emergency_phone,\n            doctorBasicInfo.biography as doctorBasicInfo_biography,\n            doctorBasicInfo.hiring_date as doctorBasicInfo_hiring_date,\n            doctorBasicInfo.from as doctorBasicInfo_from,\n            doctorBasicInfo.to as doctorBasicInfo_to,\n            doctorBasicInfo.profile_pic as doctorBasicInfo_profile_pic,\n            doctorBasicInfo.city as doctorBasicInfo_city,\n            doctorBasicInfo.state as doctorBasicInfo_state,\n            doctorBasicInfo.zip as doctorBasicInfo_zip,\n            doctorBasicInfo.social_security as doctorBasicInfo_social_security,\n            doctorBasicInfo.profile_pic_url as doctorBasicInfo_profile_pic_url,\n            doctorBasicInfo.apartment_suite as doctorBasicInfo_apartment_suite,\n\n            medicalIdentifier.id as medicalIdentifier_id,\n            medicalIdentifier.clinic_name as medicalIdentifier_clinic_name,\n\n            billingTitles.id as billingTitles_id,\n            billingTitles.name as billingTitles_name,\n            billingTitles.description as billingTitles_description,\n\n            facilities.id as facilities_id,\n            facilities.name as facilities_name,\n            facilities.slug as facilities_slug,\n            facilities.qualifier as facilities_qualifier\n\n            FROM sch_appointments as appointments\n\n            left join kiosk_cases on kiosk_cases.id = appointments.case_id and kiosk_cases.deleted_at IS NULL\n            left join billing_case_status on billing_case_status.id = kiosk_cases.status_id and billing_case_status.deleted_at IS NULL\n\n            left join kiosk_case_patient_session on kiosk_case_patient_session.appointment_id = appointments.id and kiosk_case_patient_session.deleted_at IS NULL\n            left join kiosk_case_patient_session_statuses on kiosk_case_patient_session_statuses.id = kiosk_case_patient_session.status_id and kiosk_case_patient_session_statuses.deleted_at IS NULL\n\n            left join kiosk_case_types on kiosk_case_types.id = appointments.case_type_id and kiosk_case_types.deleted_at IS NULL\n\n            left join sch_appointment_types on sch_appointment_types.id = appointments.type_id and sch_appointment_types.deleted_at IS NULL\n\n            left join sch_appointment_statuses on sch_appointment_statuses.id = appointments.status_id and sch_appointment_statuses.deleted_at IS NULL\n\n            inner join kiosk_patient on kiosk_patient.id = appointments.patient_id and kiosk_patient.deleted_at IS NULL\n\n            left join physician_clinics on physician_clinics.id = appointments.physician_id and physician_clinics.deleted_at IS NULL\n            left join physicians on physicians.id = physician_clinics.physician_id and physicians.deleted_at IS NULL\n            left join clinics on clinics.id = physician_clinics.clinic_id and clinics.deleted_at IS NULL\n            left join clinic_locations on clinic_locations.id = physician_clinics.clinic_locations_id and clinic_locations.deleted_at IS NULL\n\n            left join users as technician on technician.id = appointments.technician_id and technician.deleted_at IS NULL\n            left join user_basic_info as technician_basic_info on technician_basic_info.user_id = technician.id and technician_basic_info.deleted_at IS NULL\n\n            left join users as readingProvider on readingProvider.id = appointments.reading_provider_id and readingProvider.deleted_at IS NULL\n            left join user_basic_info as readingProvider_basic_info on readingProvider_basic_info.user_id = readingProvider.id and readingProvider_basic_info.deleted_at IS NULL\n\n            left join sch_transportations on sch_transportations.appointment_id = appointments.id and sch_transportations.deleted_at IS NULL\n\n            left join sch_appointment_cpt_codes on sch_appointment_cpt_codes.appointment_id = appointments.id and sch_appointment_cpt_codes.deleted_at IS NULL\n            left join billing_codes on billing_codes.id = sch_appointment_cpt_codes.billing_code_id and billing_codes.deleted_at IS NULL\n\n\n            ${m} join sch_available_specialities as availableSpeciality on availableSpeciality.id = appointments.available_speciality_id and availableSpeciality.deleted_at IS NULL\n            left join facility_locations as facilityLocation on facilityLocation.id = availableSpeciality.facility_location_id and facilityLocation.deleted_at IS NULL\n            left join specialities on specialities.id = availableSpeciality.speciality_id and specialities.deleted_at IS NULL\n\n            left join sch_available_doctors as availableSpecialityDoctor on availableSpecialityDoctor.id = appointments.available_doctor_id and availableSpecialityDoctor.deleted_at IS NULL\n            left join users as doctor on doctor.id = availableSpecialityDoctor.doctor_id and doctor.deleted_at IS NULL\n            left join user_basic_info as doctorBasicInfo on doctorBasicInfo.user_id = doctor.id and doctorBasicInfo.deleted_at IS NULL\n            left join medical_identifiers as medicalIdentifier on medicalIdentifier.user_id = doctor.id and medicalIdentifier.deleted_at IS NULL\n            left join billing_titles as billingTitles on billingTitles.id = medicalIdentifier.billing_title_id and billingTitles.deleted_at IS NULL\n            left join facilities on facilities.id = facilityLocation.facility_id and facilities.deleted_at IS NULL\n            ${h}\n            GROUP BY appointments.id\n            ORDER BY appointment_scheduled_date_time DESC\n            ${p})`},this.getGetPatientCancelledAppointmentsMapping=(e,t,i)=>null==e?void 0:e.map((e=>{var a,n,o,s,l,d,_,r,c,p,u,m,y;const h=null==t?void 0:t.find((t=>(null==t?void 0:t.id)===(null==e?void 0:e.appointment_id)));let f={},v={},g={},b={},S={},I={},D={},w={},O={},T={},A={},N={},C={};e.medicalIdentifier_id&&(N={id:e.medicalIdentifier_id,clinic_name:e.medicalIdentifier_clinic_name}),e.billingTitles_id&&(C={id:e.billingTitles_id,name:e.billingTitles_name,description:e.billingTitles_description}),(null==e?void 0:e.doctorBasicInfo_id)&&(w={id:null==e?void 0:e.doctorBasicInfo_id,first_name:null==e?void 0:e.doctorBasicInfo_first_name,middle_name:null==e?void 0:e.doctorBasicInfo_middle_name,last_name:null==e?void 0:e.doctorBasicInfo_last_name,date_of_birth:null==e?void 0:e.doctorBasicInfo_date_of_birth,gender:null==e?void 0:e.doctorBasicInfo_gender,user_id:null==e?void 0:e.doctorBasicInfo_user_id,area_id:null==e?void 0:e.doctorBasicInfo_area_id,title:null==e?void 0:e.doctorBasicInfo_title,cell_no:null==e?void 0:e.doctorBasicInfo_cell_no,address:null==e?void 0:e.doctorBasicInfo_address,work_phone:null==e?void 0:e.doctorBasicInfo_work_phone,fax:null==e?void 0:e.doctorBasicInfo_fax,extension:null==e?void 0:e.doctorBasicInfo_extension,home_phone:null==e?void 0:e.doctorBasicInfo_home_phone,emergency_name:null==e?void 0:e.doctorBasicInfo_emergency_name,emergency_phone:null==e?void 0:e.doctorBasicInfo_emergency_phone,biography:null==e?void 0:e.doctorBasicInfo_biography,hiring_date:null==e?void 0:e.doctorBasicInfo_hiring_date,from:null==e?void 0:e.doctorBasicInfo_from,to:null==e?void 0:e.doctorBasicInfo_to,profile_pic:null==e?void 0:e.doctorBasicInfo_profile_pic,city:null==e?void 0:e.doctorBasicInfo_city,state:null==e?void 0:e.doctorBasicInfo_state,zip:null==e?void 0:e.doctorBasicInfo_zip,social_security:null==e?void 0:e.doctorBasicInfo_social_security,profile_pic_url:null==e?void 0:e.doctorBasicInfo_profile_pic_url,apartment_suite:null==e?void 0:e.doctorBasicInfo_apartment_suite}),(null==e?void 0:e.appointment_id)&&(D={id:null==e?void 0:e.appointment_id,key:null==e?void 0:e.appointment_key,scheduled_date_time:null==e?void 0:e.appointment_scheduled_date_time,evaluation_date_time:null==e?void 0:e.appointment_evaluation_date_time,time_slots:null==e?void 0:e.appointment_time_slot,appointment_title:null==e?void 0:e.appointment_title,action_performed:null==e?void 0:e.appointment_action_performed,confirmation_status:null==e?void 0:e.appointment_confirmation_status,cancelled:null==e?void 0:e.appointment_cancelled,pushed_to_front_desk:null==e?void 0:e.appointment_pushed_to_front_dest,comments:null==e?void 0:e.appointment_comments,by_health_app:null==e?void 0:e.appointment_by_health_app,date_list_id:null==e?void 0:e.appointment_date_list_id,target_facility_id:null==e?void 0:e.appointment_target_facility_id,origin_facility_id:null==e?void 0:e.appointment_origin_facility_id,case_id:null==e?void 0:e.appointment_case_id,case_type_id:null==e?void 0:e.appointment_case_type_id,patient_id:null==e?void 0:e.appointment_patient_id,type_id:null==e?void 0:e.appointment_type_id,status_id:null==e?void 0:e.appointment_status_id,priority_id:null==e?void 0:e.appointment_priority_id,available_doctor_id:null==e?void 0:e.appointment_available_doctor_id,available_speciality_id:null==e?void 0:e.appointment_available_speciality_id,billable:null==e?void 0:e.appointment_billable,pushed_to_front_desk_comments:null==e?void 0:e.appointment_pushed_to_front_desk_comments,cancelled_comments:null==e?void 0:e.appointment_cancelled_comments,is_speciality_base:null==e?void 0:e.appointment_is_speciality_base,created_by:null==e?void 0:e.appointment_created_by,updated_by:null==e?void 0:e.appointment_updated_by,created_at:null==e?void 0:e.appointment_created_at,updated_at:null==e?void 0:e.appointment_updated_at,deleted_at:null==e?void 0:e.appointment_deleted_at,is_redo:null==e?void 0:e.appointment_is_redo,is_active:null==e?void 0:e.appointment_is_active,is_soft_registered:null==e?void 0:e.appointment_is_soft_registered,physician_id:null==e?void 0:e.appointment_physician_id,technician_id:null==e?void 0:e.appointment_technician_id,reading_provider_id:null==e?void 0:e.appointment_reading_provider_id,cd_image:null==e?void 0:e.appointment_cd_image,is_transportation:null==e?void 0:e.appointment_is_transportation}),(null==e?void 0:e.patient_id)&&(O={age:null==e?void 0:e.patient_age,cell_phone:null==e?void 0:e.patient_cell_phone,created_at:null==e?void 0:e.patient_created_at,created_by:null==e?void 0:e.patient_created_by,deleted_at:null==e?void 0:e.patient_deleted_at,dob:null==e?void 0:e.patient_dob,first_name:null==e?void 0:e.patient_first_name,gender:null==e?void 0:e.patient_gender,height_ft:null==e?void 0:e.patient_height_ft,height_in:null==e?void 0:e.patient_height_in,home_phone:null==e?void 0:e.patient_home_phone,id:null==e?void 0:e.patient_id,is_law_enforcement_agent:null==e?void 0:e.patient_is_law_enforcement_agent,is_pregnant:null==e?void 0:e.patient_is_pregnant,key:null==e?void 0:e.patient_key,language:null==e?void 0:e.patient_language,last_name:null==e?void 0:e.patient_last_name,meritial_status:null==e?void 0:e.patient_meritial_status,middle_name:null==e?void 0:e.patient_middle_name,need_translator:null==e?void 0:e.patient_need_translator,notes:null==e?void 0:e.patient_notes,profile_avatar:null==e?void 0:e.patient_profile_avatar,ssn:null==e?void 0:e.patient_ssn,status:null==e?void 0:e.patient_status,updated_at:null==e?void 0:e.patient_updated_at,updated_by:null==e?void 0:e.patient_updated_by,weight_kg:null==e?void 0:e.patient_weight_kg,weight_lbs:null==e?void 0:e.patient_weight_lbs,work_phone:null==e?void 0:e.patient_work_phone}),(null==e?void 0:e.appointment_status_id)&&(A={created_at:null==e?void 0:e.sch_appointment_statuses_created_at,created_by:null==e?void 0:e.sch_appointment_statuses_created_by,deleted_at:null==e?void 0:e.sch_appointment_statuses_deleted_at,id:null==e?void 0:e.sch_appointment_statuses_id,name:null==e?void 0:e.sch_appointment_statuses_name,slug:null==e?void 0:e.sch_appointment_statuses_slug,updated_at:null==e?void 0:e.sch_appointment_statuses_updated_at,updated_by:null==e?void 0:e.sch_appointment_statuses_updated_by}),(null==e?void 0:e.availableSpeciality_id)&&(f={id:null==e?void 0:e.availableSpeciality_id,key:null==e?void 0:e.availableSpeciality_key,start_date:null==e?void 0:e.availableSpeciality_start_date,end_date:null==e?void 0:e.availableSpeciality_end_date,end_date_for_recurrence:null==e?void 0:e.availableSpeciality_end_date_for_recurrence,no_of_doctors:null==e?void 0:e.availableSpeciality_no_of_doctors,no_of_slots:null==e?void 0:e.availableSpeciality_no_of_slots,end_after_occurences:null==e?void 0:e.availableSpeciality_end_after_occurences,number_of_entries:null==e?void 0:e.availableSpeciality_number_of_entries,speciality_id:null==e?void 0:e.availableSpeciality_speciality_id,facility_location_id:null==e?void 0:e.availableSpeciality_facility_location_id,recurrence_ending_criteria_id:null==e?void 0:e.availableSpeciality_recurrence_ending_criteria_id,deleted_at:null==e?void 0:e.availableSpeciality_deleted_at}),(null==e?void 0:e.availableSpecialityDoctor_id)&&(v={id:null==e?void 0:e.availableSpecialityDoctor_id,key:null==e?void 0:e.availableSpecialityDoctor_key,start_date:null==e?void 0:e.availableSpecialityDoctor_start_date,end_date:null==e?void 0:e.availableSpecialityDoctor_end_date,no_of_slots:null==e?void 0:e.availableSpecialityDoctor_no_of_slots,doctor_id:null==e?void 0:e.availableSpecialityDoctor_doctor_id,facility_location_id:null==e?void 0:e.availableSpecialityDoctor_facility_location_id,available_speciality_id:null==e?void 0:e.availableSpecialityDoctor_available_speciality_id,supervisor_id:null==e?void 0:e.availableSpecialityDoctor_supervisor_id,is_provider_assignment:null==e?void 0:e.availableSpecialityDoctor_is_provider_assignment}),(null==e?void 0:e.doctor_id)&&(S={id:null==e?void 0:e.doctor_id,email:null==e?void 0:e.doctor_email,reset_key:null==e?void 0:e.doctor_reset_key,status:null==e?void 0:e.doctor_status,is_loggedIn:null==e?void 0:e.doctor_is_loggedIn,remember_token:null==e?void 0:e.doctor_remember_token}),(null==e?void 0:e.facilityLocation_id)&&(g={id:null==e?void 0:e.facilityLocation_id,facility_id:null==e?void 0:e.facilityLocation_facility_id,name:null==e?void 0:e.facilityLocation_name,city:null==e?void 0:e.facilityLocation_city,state:null==e?void 0:e.facilityLocation_state,zip:null==e?void 0:e.facilityLocation_zip,region_id:null==e?void 0:e.facilityLocation_region_id,address:null==e?void 0:e.facilityLocation_address,phone:null==e?void 0:e.facilityLocation_phone,fax:null==e?void 0:e.facilityLocation_fax,email:null==e?void 0:e.facilityLocation_email,office_hours_start:null==e?void 0:e.facilityLocation_office_hours_start,office_hours_end:null==e?void 0:e.facilityLocation_office_hours_end,lat:null==e?void 0:e.facilityLocation_lat,long:null==e?void 0:e.facilityLocation_long,day_list:null==e?void 0:e.facilityLocation_day_list,floor:null==e?void 0:e.facilityLocation_floor,place_of_service_id:null==e?void 0:e.facilityLocation_place_of_service_id,qualifier:null==e?void 0:e.facilityLocation_qualifier,ext_no:null==e?void 0:e.facilityLocation_ext_no,cell_no:null==e?void 0:e.facilityLocation_cell_no,is_main:null==e?void 0:e.facilityLocation_is_main,same_as_provider:null==e?void 0:e.facilityLocation_same_as_provider,dean:null==e?void 0:e.facilityLocation_dean}),(null==e?void 0:e.specialities_id)&&(I={id:null==e?void 0:e.specialities_id,name:null==e?void 0:e.specialities_name,description:null==e?void 0:e.specialities_description,time_slot:null==e?void 0:e.specialities_time_slot,over_booking:null==e?void 0:e.specialities_over_booking,has_app:null==e?void 0:e.specialities_has_app,speciality_key:null==e?void 0:e.specialities_speciality_key,comments:null==e?void 0:e.specialities_comments,default_name:null==e?void 0:e.specialities_default_name,qualifier:null==e?void 0:e.specialities_qualifier,is_defualt:null==e?void 0:e.specialities_is_defualt,is_available:null==e?void 0:e.specialities_is_available,is_create_appointment:null==e?void 0:e.specialities_is_create_appointment,is_editable:null==e?void 0:e.specialities_is_editable}),(null==e?void 0:e.facilities_id)&&(b={created_at:null==e?void 0:e.facilities_created_at,created_by:null==e?void 0:e.facilities_created_by,deleted_at:null==e?void 0:e.facilities_deleted_at,id:null==e?void 0:e.facilities_id,name:null==e?void 0:e.facilities_name,slug:null==e?void 0:e.facilities_slug,qualifier:null==e?void 0:e.facilities_qualifier,updated_at:null==e?void 0:e.facilities_updated_at,updated_by:null==e?void 0:e.facilities_updated_by}),(null==e?void 0:e.appointment_type_id)&&(T={id:null==e?void 0:e.sch_appointment_types_id,name:null==e?void 0:e.sch_appointment_types_name,slug:null==e?void 0:e.sch_appointment_types_slug,description:null==e?void 0:e.sch_appointment_types_description,is_all_cpt_codes:null==e?void 0:e.sch_appointment_types_is_all_cpt_codes,enable_cpt_codes:null==e?void 0:e.sch_appointment_types_enable_cpt_codes,qualifier:null==e?void 0:e.sch_appointment_types_qualifier,created_by:null==e?void 0:e.sch_appointment_types_created_by,updated_by:null==e?void 0:e.sch_appointment_types_updated_by,created_at:null==e?void 0:e.sch_appointment_types_created_at,updated_at:null==e?void 0:e.sch_appointment_types_updated_at,deleted_at:null==e?void 0:e.sch_appointment_types_deleted_at,is_editable:null==e?void 0:e.sch_appointment_types_is_editable,avoid_checkedin:null==e?void 0:e.sch_appointment_types_avoid_checkedin,is_reading_provider:null==e?void 0:e.sch_appointment_types_is_reading_provider});const R=(null==e?void 0:e.physician_clinics_id)?{physician:{clinic_location_id:null==e?void 0:e.clinic_location_id,physician_clinic_id:null==e?void 0:e.physician_clinics_id,id:null==e?void 0:e.clinic_id,name:null==e?void 0:e.clinic_name,city:null==e?void 0:e.clinic_location_city,clinic_id:null==e?void 0:e.clinic_location_clinic_id,email:null==e?void 0:e.physician_email,extension:null==e?void 0:e.clinic_location_extension,fax:null==e?void 0:e.clinic_location_fax,floor:null==e?void 0:e.clinic_location_floor,is_primary:null==e?void 0:e.clinic_location_is_primary,phone:null==e?void 0:e.clinic_location_phone,state:null==e?void 0:e.clinic_location_state,status:null==e?void 0:e.clinic_location_status,street_address:null==e?void 0:e.clinic_location_street_address,zip:null==e?void 0:e.clinic_location_zip,cell_no:null==e?void 0:e.physician_cell_no,first_name:null==e?void 0:e.physician_first_name,last_name:null==e?void 0:e.physician_last_name,license_no:null==e?void 0:e.physician_license_no,middle_name:null==e?void 0:e.physician_middle_name,npi_no:null==e?void 0:e.physician_npi_no}}:null;let E,L;return v&&Object.keys(v).length&&(E=null!==(n=null===(a=null==i?void 0:i.find((e=>e.object_id===(null==v?void 0:v.facility_location_id)&&"facility_location"===e.type.slug)))||void 0===a?void 0:a.code)&&void 0!==n?n:"#9d9d9d"),f&&Object.keys(f).length&&(L=null!==(s=null===(o=null==i?void 0:i.find((e=>e.object_id===f.speciality_id&&"speciality"===e.type.slug)))||void 0===o?void 0:o.code)&&void 0!==s?s:"#9d9d9d"),Object.assign(Object.assign({},D),{facility_location_code:E,speciality_code:L,physician_clinic:R,available_speciality:e.availableSpeciality_id?Object.assign(Object.assign({},f),{facilityLocation:e.facilityLocation_id?Object.assign(Object.assign({},g),{facility:e.facilities_id?b:null}):null,speciality:e.specialities_id?I:null}):null,available_doctor:e.availableSpecialityDoctor_id?Object.assign(Object.assign({},v),{doctor:e.doctor_id?Object.assign(Object.assign({billingTitles:e.billingTitles_id?C:null},S),{doctorBasicInfo:e.doctorBasicInfo_id?w:null,medicalIdentifier:e.medicalIdentifier_id?N:null}):null}):null,reading_provider_id:null==e?void 0:e.appointment_reading_provider_id,reading_provider:(null==e?void 0:e.appointment_reading_provider_id)?{first_name:null!==(l=null==e?void 0:e.readingProvider_first_name)&&void 0!==l?l:null,id:null==e?void 0:e.appointment_reading_provider_id,last_name:null!==(d=null==e?void 0:e.readingProvider_last_name)&&void 0!==d?d:null,middle_name:null!==(_=null==e?void 0:e.readingProvider_middle_name)&&void 0!==_?_:null}:null,patient:e.patient_id?O:null,appointmentType:e.appointment_type_id?T:null,appointmentStatus:e.appointment_status_id?A:null,appointment_status:null!==(r=null==A?void 0:A.name)&&void 0!==r?r:null,appointment_status_slug:null!==(c=null==A?void 0:A.slug)&&void 0!==c?c:null,transportation:null!==(p=null==h?void 0:h.transportations)&&void 0!==p?p:[],appointmentCptCodes:null!==(u=null==h?void 0:h.appointmentCptCodes)&&void 0!==u?u:[],visit_status_name:null!==(m=null==e?void 0:e.kiosk_case_patient_session_statuses_name)&&void 0!==m?m:null,visit_status_slug:null!==(y=null==e?void 0:e.kiosk_case_patient_session_statuses_slug)&&void 0!==y?y:null})})),this.rawQueryForAppointmentPushedToFrontDesk=e=>{const{caseIds:t,facilityLocationIds:i,startDateString:a,endDateString:n,appointmentTypeIds:o,doctorIds:s,specialityIds:l,caseTypeIds:d,page:_,perPage:r,paginate:c}=e;let p="";const u=[];c&&(p=`LIMIT ${(_-1)*r} , ${r}`);let m="left";l&&(null==l?void 0:l.length)&&(u.push(`specialities.id in (${String(l)})`),u.push(`availableSpeciality.speciality_id in (${String(l)})`),m="inner"),s&&(null==s?void 0:s.length)&&u.push(`availableSpecialityDoctor.doctor_id in (${String(s)})`),i&&(null==i?void 0:i.length)&&u.push(`appointments.target_facility_id in (${String(i)})`),o&&(null==o?void 0:o.length)&&u.push(`appointments.type_id in (${String(o)})`),t&&(null==t?void 0:t.length)&&u.push(`appointments.case_id in (${String(t)})`),d&&(null==d?void 0:d.length)&&u.push(`caseType.id in (${String(d)})`),u.push("(appointments.deleted_at IS NULL"),u.push("(appointments.pushed_to_front_desk = true"),a&&n&&u.push(`appointments.updated_at BETWEEN '${a}' AND '${n}'))`);let y=0,h="";for(const e of u)y+=1,1==y&&(h="where"),h=y!=u.length?`${h} ${e} and`:`${h} ${e}`;return`(SELECT\n        appointments.id as appointment_id,\n        appointments.key as appointment_key,\n        appointments.scheduled_date_time as appointment_scheduled_date_time,\n        appointments.evaluation_date_time as appointment_evaluation_date_time,\n        appointments.time_slots as appointment_time_slot,\n        appointments.appointment_title as appointment_title,\n        appointments.action_performed as appointment_action_performed,\n        appointments.confirmation_status as appointment_confirmation_status,\n        appointments.cancelled as appointment_cancelled,\n        appointments.pushed_to_front_desk as appointment_pushed_to_front_dest,\n        appointments.comments as appointment_comments,\n        appointments.by_health_app as appointment_by_health_app,\n        appointments.date_list_id as appointment_date_list_id,\n        appointments.target_facility_id as appointment_target_facility_id,\n        appointments.origin_facility_id as appointment_origin_facility_id,\n        appointments.case_id as appointment_case_id,\n        appointments.case_type_id as appointment_case_type_id,\n        appointments.patient_id as appointment_patient_id,\n        appointments.type_id as appointment_type_id,\n        appointments.status_id as appointment_status_id,\n        appointments.priority_id as appointment_priority_id,\n        appointments.available_doctor_id as appointment_available_doctor_id,\n        appointments.available_speciality_id as appointment_available_speciality_id,\n        appointments.billable as appointment_billable,\n        appointments.pushed_to_front_desk_comments as appointment_pushed_to_front_desk_comments,\n        appointments.cancelled_comments as appointment_cancelled_comments,\n        appointments.is_speciality_base as appointment_is_speciality_base,\n        appointments.created_by as appointment_created_by,\n        appointments.updated_by as appointment_updated_by,\n        appointments.created_at as appointment_created_at,\n        appointments.updated_at as appointment_updated_at,\n        appointments.deleted_at as appointment_deleted_at,\n        appointments.is_redo as appointment_is_redo,\n        appointments.is_active as appointment_is_active,\n        appointments.is_soft_registered as appointment_is_soft_registered,\n        appointments.physician_id as appointment_physician_id,\n        appointments.technician_id as appointment_technician_id,\n        appointments.reading_provider_id as appointment_reading_provider_id,\n        appointments.cd_image as appointment_cd_image,\n        appointments.is_transportation as appointment_is_transportation,\n\n        availableSpeciality.id as availableSpeciality_id,\n        availableSpeciality.key as availableSpeciality_key,\n        availableSpeciality.start_date as availableSpeciality_start_date,\n        availableSpeciality.end_date as availableSpeciality_end_date,\n        availableSpeciality.end_date_for_recurrence as availableSpeciality_end_date_for_recurrence,\n        availableSpeciality.no_of_doctors as availableSpeciality_no_of_doctors,\n        availableSpeciality.no_of_slots as availableSpeciality_no_of_slots,\n        availableSpeciality.end_after_occurences as availableSpeciality_end_after_occurences,\n        availableSpeciality.number_of_entries as availableSpeciality_number_of_entries,\n        availableSpeciality.speciality_id as availableSpeciality_speciality_id,\n        availableSpeciality.facility_location_id as availableSpeciality_facility_location_id,\n        availableSpeciality.recurrence_ending_criteria_id as availableSpeciality_recurrence_ending_criteria_id,\n        availableSpeciality.deleted_at as availableSpeciality_deleted_at,\n\n        availableSpecialityDoctor.id as availableSpecialityDoctor_id,\n        availableSpecialityDoctor.key as availableSpecialityDoctor_key,\n        availableSpecialityDoctor.start_date as availableSpecialityDoctor_start_date,\n        availableSpecialityDoctor.end_date as availableSpecialityDoctor_end_date,\n        availableSpecialityDoctor.no_of_slots as availableSpecialityDoctor_no_of_slots,\n        availableSpecialityDoctor.doctor_id as availableSpecialityDoctor_doctor_id,\n        availableSpecialityDoctor.facility_location_id as availableSpecialityDoctor_facility_location_id,\n        availableSpecialityDoctor.available_speciality_id as availableSpecialityDoctor_available_speciality_id,\n        availableSpecialityDoctor.supervisor_id as availableSpecialityDoctor_supervisor_id,\n        availableSpecialityDoctor.is_provider_assignment as availableSpecialityDoctor_is_provider_assignment,\n\n        doctor.id as doctor_id,\n        doctor.email as doctor_email,\n        doctor.reset_key as doctor_reset_key,\n        doctor.status as doctor_status,\n        doctor.is_loggedIn as doctor_is_loggedIn,\n        doctor.remember_token as doctor_remember_token,\n\n        doctorBasicInfo.id as doctorBasicInfo_id,\n        doctorBasicInfo.first_name as doctorBasicInfo_first_name,\n        doctorBasicInfo.middle_name as doctorBasicInfo_middle_name,\n        doctorBasicInfo.last_name as doctorBasicInfo_last_name,\n        doctorBasicInfo.date_of_birth as doctorBasicInfo_date_of_birth,\n        doctorBasicInfo.gender as doctorBasicInfo_gender,\n        doctorBasicInfo.user_id as doctorBasicInfo_user_id,\n        doctorBasicInfo.area_id as doctorBasicInfo_area_id,\n        doctorBasicInfo.title as doctorBasicInfo_title,\n        doctorBasicInfo.cell_no as doctorBasicInfo_cell_no,\n        doctorBasicInfo.address as doctorBasicInfo_address,\n        doctorBasicInfo.work_phone as doctorBasicInfo_work_phone,\n        doctorBasicInfo.fax as doctorBasicInfo_fax,\n        doctorBasicInfo.extension as doctorBasicInfo_extension,\n        doctorBasicInfo.home_phone as doctorBasicInfo_home_phone,\n        doctorBasicInfo.emergency_name as doctorBasicInfo_emergency_name,\n        doctorBasicInfo.emergency_phone as doctorBasicInfo_emergency_phone,\n        doctorBasicInfo.biography as doctorBasicInfo_biography,\n        doctorBasicInfo.hiring_date as doctorBasicInfo_hiring_date,\n        doctorBasicInfo.from as doctorBasicInfo_from,\n        doctorBasicInfo.to as doctorBasicInfo_to,\n        doctorBasicInfo.profile_pic as doctorBasicInfo_profile_pic,\n        doctorBasicInfo.city as doctorBasicInfo_city,\n        doctorBasicInfo.state as doctorBasicInfo_state,\n        doctorBasicInfo.zip as doctorBasicInfo_zip,\n        doctorBasicInfo.social_security as doctorBasicInfo_social_security,\n        doctorBasicInfo.profile_pic_url as doctorBasicInfo_profile_pic_url,\n        doctorBasicInfo.apartment_suite as doctorBasicInfo_apartment_suite,\n\n        medicalIdentifier.id as medicalIdentifier_id,\n        medicalIdentifier.clinic_name as medicalIdentifier_clinic_name,\n\n        billingTitles.id as billingTitles_id,\n        billingTitles.name as billingTitles_name,\n        billingTitles.description as billingTitles_description,\n        \n        facilityLocation.id as facilityLocation_id,\n        facilityLocation.facility_id as facilityLocation_facility_id,\n        facilityLocation.name as facilityLocation_name,\n        facilityLocation.city as facilityLocation_city,\n        facilityLocation.state as facilityLocation_state,\n        facilityLocation.zip as facilityLocation_zip,\n        facilityLocation.region_id as facilityLocation_region_id,\n        facilityLocation.address as facilityLocation_address,\n        facilityLocation.phone as facilityLocation_phone,\n        facilityLocation.fax as facilityLocation_fax,\n        facilityLocation.email as facilityLocation_email,\n        facilityLocation.office_hours_start as facilityLocation_office_hours_start,\n        facilityLocation.office_hours_end as facilityLocation_office_hours_end,\n        facilityLocation.lat as facilityLocation_lat,\n        facilityLocation.long as facilityLocation_long,\n        facilityLocation.day_list as facilityLocation_day_list,\n        facilityLocation.floor as facilityLocation_floor,\n        facilityLocation.place_of_service_id as facilityLocation_place_of_service_id,\n        facilityLocation.qualifier as facilityLocation_qualifier,\n        facilityLocation.ext_no as facilityLocation_ext_no,\n        facilityLocation.cell_no as facilityLocation_cell_no,\n        facilityLocation.is_main as facilityLocation_is_main,\n        facilityLocation.same_as_provider as facilityLocation_same_as_provider,\n        facilityLocation.dean as facilityLocation_dean,\n\n        facilities.created_at AS facilities_created_at,\n        facilities.created_by AS facilities_created_by,\n        facilities.deleted_at AS facilities_deleted_at,\n        facilities.id AS facilities_id,\n        facilities.name AS facilities_name,\n        facilities.slug AS facilities_slug,\n        facilities.qualifier AS facilities_qualifier,\n        facilities.updated_at AS facilities_updated_at,\n        facilities.updated_by AS facilities_updated_by,\n\n        specialities.id as specialities_id,\n        specialities.name as specialities_name,\n        specialities.description as specialities_description,\n        specialities.time_slot as specialities_time_slot,\n        specialities.over_booking as specialities_over_booking,\n        specialities.has_app as specialities_has_app,\n        specialities.speciality_key as specialities_speciality_key,\n        specialities.comments as specialities_comments,\n        specialities.default_name as specialities_default_name,\n        specialities.qualifier as specialities_qualifier,\n        specialities.is_defualt as specialities_is_defualt,\n        specialities.is_available as specialities_is_available,\n        specialities.is_create_appointment as specialities_is_create_appointment,\n        specialities.is_editable as specialities_is_editable,\n\n        caseTypes.id as caseTypes_id,\n        caseTypes.key as caseTypes_key,\n        caseTypes.name as caseTypes_name,\n        caseTypes.slug as caseTypes_slug,\n        caseTypes.description as caseTypes_description,\n        caseTypes.comments as caseTypes_comments,\n        caseTypes.remainder_days as caseTypes_remainder_days,\n        caseTypes.created_by as caseTypes_created_by,\n        caseTypes.updated_by as caseTypes_udpated_by,\n        caseTypes.created_at as caseTypes_created_at,\n        caseTypes.updated_at as caseTypes_updated_at,\n        caseTypes.deleted_at as caseTypes_deleted_at,\n\n        targetFacilityLocation.id as targetFacilityLocation_id,\n        targetFacilityLocation.facility_id as targetFacilityLocation_facility_id,\n        targetFacilityLocation.name as targetFacilityLocation_name,\n        targetFacilityLocation.city as targetFacilityLocation_city,\n        targetFacilityLocation.state as targetFacilityLocation_state,\n        targetFacilityLocation.zip as targetFacilityLocation_zip,\n        targetFacilityLocation.region_id as targetFacilityLocation_region_id,\n        targetFacilityLocation.address as targetFacilityLocation_address,\n        targetFacilityLocation.phone as targetFacilityLocation_phone,\n        targetFacilityLocation.fax as targetFacilityLocation_fax,\n        targetFacilityLocation.email as targetFacilityLocation_email,\n        targetFacilityLocation.office_hours_start as targetFacilityLocation_office_hours_start,\n        targetFacilityLocation.office_hours_end as targetFacilityLocation_office_hours_end,\n        targetFacilityLocation.lat as targetFacilityLocation_lat,\n        targetFacilityLocation.long as targetFacilityLocation_long,\n        targetFacilityLocation.day_list as targetFacilityLocation_day_list,\n        targetFacilityLocation.floor as targetFacilityLocation_floor,\n        targetFacilityLocation.place_of_service_id as targetFacilityLocation_place_of_service_id,\n        targetFacilityLocation.qualifier as targetFacilityLocation_qualifier,\n        targetFacilityLocation.ext_no as targetFacilityLocation_ext_no,\n        targetFacilityLocation.cell_no as targetFacilityLocation_cell_no,\n        targetFacilityLocation.is_main as targetFacilityLocation_is_main,\n        targetFacilityLocation.same_as_provider as targetFacilityLocation_same_as_provider,\n        targetFacilityLocation.created_by as targetFacilityLocation_created_by,\n        targetFacilityLocation.updated_by as targetFacilityLocation_updated_by,\n        targetFacilityLocation.created_at as targetFacilityLocation_created_at,\n        targetFacilityLocation.updated_at as targetFacilityLocation_updated_at,\n        targetFacilityLocation.deleted_at as targetFacilityLocation_deleted_at,\n        targetFacilityLocation.dean as targetFacilityLocation_dean,\n\n        targetFacilities.created_at AS targetFacilities_created_at,\n        targetFacilities.created_by AS targetFacilities_created_by,\n        targetFacilities.deleted_at AS targetFacilities_deleted_at,\n        targetFacilities.id AS targetFacilities_id,\n        targetFacilities.name AS targetFacilities_name,\n        targetFacilities.slug AS targetFacilities_slug,\n        targetFacilities.qualifier AS targetFacilities_qualifier,\n        targetFacilities.updated_at AS targetFacilities_updated_at,\n        targetFacilities.updated_by AS targetFacilities_updated_by,\n\n        originFacilityLocation.id as originFacilityLocation_id,\n        originFacilityLocation.facility_id as originFacilityLocation_facility_id,\n        originFacilityLocation.name as originFacilityLocation_name,\n        originFacilityLocation.city as originFacilityLocation_city,\n        originFacilityLocation.state as originFacilityLocation_state,\n        originFacilityLocation.zip as originFacilityLocation_zip,\n        originFacilityLocation.region_id as originFacilityLocation_region_id,\n        originFacilityLocation.address as originFacilityLocation_address,\n        originFacilityLocation.phone as originFacilityLocation_phone,\n        originFacilityLocation.fax as originFacilityLocation_fax,\n        originFacilityLocation.email as originFacilityLocation_email,\n        originFacilityLocation.office_hours_start as originFacilityLocation_office_hours_start,\n        originFacilityLocation.office_hours_end as originFacilityLocation_office_hours_end,\n        originFacilityLocation.lat as originFacilityLocation_lat,\n        originFacilityLocation.long as originFacilityLocation_long,\n        originFacilityLocation.day_list as originFacilityLocation_day_list,\n        originFacilityLocation.floor as originFacilityLocation_floor,\n        originFacilityLocation.place_of_service_id as originFacilityLocation_place_of_service_id,\n        originFacilityLocation.qualifier as originFacilityLocation_qualifier,\n        originFacilityLocation.ext_no as originFacilityLocation_ext_no,\n        originFacilityLocation.cell_no as originFacilityLocation_cell_no,\n        originFacilityLocation.is_main as originFacilityLocation_is_main,\n        originFacilityLocation.same_as_provider as originFacilityLocation_same_as_provider,\n        originFacilityLocation.created_by as originFacilityLocation_created_by,\n        originFacilityLocation.updated_by as originFacilityLocation_updated_by,\n        originFacilityLocation.created_at as originFacilityLocation_created_at,\n        originFacilityLocation.updated_at as originFacilityLocation_updated_at,\n        originFacilityLocation.deleted_at as originFacilityLocation_deleted_at,\n        originFacilityLocation.dean as originFacilityLocation_dean,\n\n        originFacilities.created_at AS originFacilities_created_at,\n        originFacilities.created_by AS originFacilities_created_by,\n        originFacilities.deleted_at AS originFacilities_deleted_at,\n        originFacilities.id AS originFacilities_id,\n        originFacilities.name AS originFacilities_name,\n        originFacilities.slug AS originFacilities_slug,\n        originFacilities.qualifier AS originFacilities_qualifier,\n        originFacilities.updated_at AS originFacilities_updated_at,\n        originFacilities.updated_by AS originFacilities_updated_by,\n\n        patient.age AS patient_age,\n        patient.cell_phone AS patient_cell_phone,\n        patient.created_at AS patient_created_at,\n        patient.created_by AS patient_created_by,\n        patient.deleted_at AS patient_deleted_at,\n        patient.dob AS patient_dob,\n        patient.first_name AS patient_first_name,\n        patient.gender AS patient_gender,\n        patient.height_ft AS patient_height_ft,\n        patient.height_in AS patient_height_in,\n        patient.home_phone AS patient_home_phone,\n        patient.id AS patient_id,\n        patient.is_law_enforcement_agent AS patient_is_law_enforcement_agent,\n        patient.is_pregnant AS patient_is_pregnant,\n        patient.key AS patient_key,\n        patient.language AS patient_language,\n        patient.last_name AS patient_last_name,\n        patient.meritial_status AS patient_meritial_status,\n        patient.middle_name AS patient_middle_name,\n        patient.need_translator AS patient_need_translator,\n        patient.notes AS patient_notes,\n        patient.profile_avatar AS patient_profile_avatar,\n        patient.ssn AS patient_ssn,\n        patient.status AS patient_status,\n        patient.updated_at AS patient_updated_at,\n        patient.updated_by AS patient_updated_by,\n        patient.weight_kg AS patient_weight_kg,\n        patient.weight_lbs AS patient_weight_lbs,\n        patient.work_phone AS patient_work_phone,\n\n        appointmentType.id as appointmentType_id,\n        appointmentType.name as appointmentType_name,\n        appointmentType.slug as appointmentType_slug,\n        appointmentType.description as appointmentType_description,\n        appointmentType.is_all_cpt_codes as appointmentType_is_all_cpt_codes,\n        appointmentType.enable_cpt_codes as appointmentType_enable_cpt_codes,\n        appointmentType.qualifier as appointmentType_qualifier,\n        appointmentType.created_by as appointmentType_created_by,\n        appointmentType.updated_by as appointmentType_updated_by,\n        appointmentType.created_at as appointmentType_created_at,\n        appointmentType.updated_at as appointmentType_updated_at,\n        appointmentType.deleted_at as appointmentType_deleted_at,\n        appointmentType.is_editable as appointmentType_is_editable,\n        appointmentType.avoid_checkedin as appointmentType_avoid_checkedin,\n        appointmentType.is_reading_provider as appointmentType_is_reading_provider,\n\n        appointmentStatus.created_at AS appointmentStatus_created_at,\n        appointmentStatus.created_by AS appointmentStatus_created_by,\n        appointmentStatus.deleted_at AS appointmentStatus_deleted_at,\n        appointmentStatus.id AS appointmentStatus_id,\n        appointmentStatus.name AS appointmentStatus_name,\n        appointmentStatus.slug AS appointmentStatus_slug,\n        appointmentStatus.updated_at AS appointmentStatus_updated_at,\n        appointmentStatus.updated_by AS appointmentStatus_updated_by,\n\n\n        updatedBy.created_at AS updatedBy_created_at,\n        updatedBy.created_by AS updatedBy_created_by,\n        updatedBy.deleted_at AS updatedBy_deleted_at,\n        updatedBy.email AS updatedBy_email,\n        updatedBy.id AS updatedBy_id,\n        updatedBy.is_loggedin AS updatedBy_is_loggedIn,\n        updatedBy.remember_token AS updatedBy_remember_token,\n        updatedBy.reset_key AS updatedBy_reset_key,\n        updatedBy.status AS updatedBy_status,\n        updatedBy.updated_at AS updatedBy_updated_at,\n        updatedBy.updated_by AS updatedBy_updated_by,\n\n\n        updatedByUserBasicInfo.address AS updatedByUserBasicInfo_address,\n        updatedByUserBasicInfo.apartment_suite AS updatedByUserBasicInfo_apartment_suite,\n        updatedByUserBasicInfo.area_id AS updatedByUserBasicInfo_area_id,\n        updatedByUserBasicInfo.biography AS updatedByUserBasicInfo_biography,\n        updatedByUserBasicInfo.cell_no AS updatedByUserBasicInfo_cell_no,\n        updatedByUserBasicInfo.city AS updatedByUserBasicInfo_city,\n        updatedByUserBasicInfo.created_at AS updatedByUserBasicInfo_created_at,\n        updatedByUserBasicInfo.created_by AS updatedByUserBasicInfo_created_by,\n        updatedByUserBasicInfo.date_of_birth AS updatedByUserBasicInfo_date_of_birth,\n        updatedByUserBasicInfo.deleted_at AS updatedByUserBasicInfo_deleted_at,\n        updatedByUserBasicInfo.department_id AS updatedByUserBasicInfo_department_id,\n        updatedByUserBasicInfo.designation_id AS updatedByUserBasicInfo_designation_id,\n        updatedByUserBasicInfo.emergency_phone AS updatedByUserBasicInfo_emergency_phone,\n        updatedByUserBasicInfo.employed_by_id AS updatedByUserBasicInfo_employed_by_id,\n        updatedByUserBasicInfo.employment_type_id AS updatedByUserBasicInfo_employment_type_id,\n        updatedByUserBasicInfo.extension AS updatedByUserBasicInfo_extension,\n        updatedByUserBasicInfo.fax AS updatedByUserBasicInfo_fax,\n        updatedByUserBasicInfo.file_id AS updatedByUserBasicInfo_file_id,\n        updatedByUserBasicInfo.first_name AS updatedByUserBasicInfo_first_name,\n        updatedByUserBasicInfo.from AS updatedByUserBasicInfo_from,\n        updatedByUserBasicInfo.gender AS updatedByUserBasicInfo_gender,\n        updatedByUserBasicInfo.hiring_date AS updatedByUserBasicInfo_hiring_date,\n        updatedByUserBasicInfo.id AS updatedByUserBasicInfo_id,\n        updatedByUserBasicInfo.last_name AS updatedByUserBasicInfo_last_name,\n        updatedByUserBasicInfo.middle_name AS updatedByUserBasicInfo_middle_name,\n        updatedByUserBasicInfo.profile_pic AS updatedByUserBasicInfo_profile_pic,\n        updatedByUserBasicInfo.profile_pic_url AS updatedByUserBasicInfo_profile_pic_url,\n        updatedByUserBasicInfo.social_security AS updatedByUserBasicInfo_social_security,\n        updatedByUserBasicInfo.state AS updatedByUserBasicInfo_state,\n        updatedByUserBasicInfo.title AS updatedByUserBasicInfo_title,\n        updatedByUserBasicInfo.to AS updatedByUserBasicInfo_to,\n        updatedByUserBasicInfo.updated_at AS updatedByUserBasicInfo_updated_at,\n        updatedByUserBasicInfo.updated_by AS updatedByUserBasicInfo_updated_by,\n        updatedByUserBasicInfo.user_id AS updatedByUserBasicInfo_user_id,\n        updatedByUserBasicInfo.work_phone AS updatedByUserBasicInfo_work_phone,\n        updatedByUserBasicInfo.zip AS updatedByUserBasicInfo_zip\n        FROM sch_appointments AS appointments\n\n        ${m} join sch_available_specialities as availableSpeciality on availableSpeciality.id = appointments.available_speciality_id and availableSpeciality.deleted_at IS NULL\n\n        left join sch_available_doctors as availableSpecialityDoctor on availableSpecialityDoctor.id = appointments.available_doctor_id and availableSpecialityDoctor.deleted_at IS NULL\n        left join users as doctor on doctor.id = availableSpecialityDoctor.doctor_id and doctor.deleted_at IS NULL\n        left join user_basic_info as doctorBasicInfo on doctorBasicInfo.user_id = doctor.id and doctorBasicInfo.deleted_at IS NULL\n        left join medical_identifiers as medicalIdentifier on medicalIdentifier.user_id = doctor.id and medicalIdentifier.deleted_at IS NULL\n        left join billing_titles as billingTitles on billingTitles.id = medicalIdentifier.billing_title_id and billingTitles.deleted_at IS NULL\n        \n        left join facility_locations as facilityLocation on facilityLocation.id = availableSpeciality.facility_location_id and facilityLocation.deleted_at IS NULL\n        left join facilities on facilities.id = facilityLocation.facility_id and facilities.deleted_at IS NULL\n        ${m} join specialities on specialities.id = availableSpeciality.speciality_id and specialities.deleted_at IS NULL\n\n        inner join kiosk_case_types as caseTypes on caseTypes.id = appointments.case_type_id and caseTypes.deleted_at IS NULL\n\n        left join facility_locations as targetFacilityLocation on targetFacilityLocation.id = appointments.target_facility_id and targetFacilityLocation.deleted_at IS NULL\n        left join facilities as targetFacilities on targetFacilities.id = targetFacilityLocation.facility_id and targetFacilities.deleted_at IS NULL\n        left join facility_locations as originFacilityLocation on originFacilityLocation.id = appointments.origin_facility_id and originFacilityLocation.deleted_at IS NULL\n        left join facilities as originFacilities on originFacilities.id = originFacilityLocation.facility_id and originFacilities.deleted_at IS NULL\n\n        left join kiosk_patient as patient on appointments.patient_id = patient.id AND patient.deleted_at IS NULL\n\n        left join sch_appointment_types as appointmentType on appointmentType.id = appointments.type_id and appointmentType.deleted_at IS NULL\n\n        left join sch_appointment_statuses as appointmentStatus ON appointments.status_id = appointmentStatus.id and appointmentStatus.deleted_at IS NULL\n\n        inner join users as updatedBy on appointments.updated_by = updatedBy.id AND updatedBy.deleted_at IS NULL\n\n        left join user_basic_info as updatedByUserBasicInfo on updatedBy.id = updatedByUserBasicInfo.user_id AND updatedByUserBasicInfo.deleted_at IS NULL\n\n        ${h}\n        group BY appointments.id\n        order  BY appointments.updated_at DESC\n        ${p})`},this.rawQueryForAppointmentPushedToFrontDeskCount=e=>{const{caseIds:t,facilityLocationIds:i,startDateString:a,endDateString:n,appointmentTypeIds:o,doctorIds:s,specialityIds:l,caseTypeIds:d}=e,_=[];let r="left";l&&(null==l?void 0:l.length)&&(_.push(`specialities.id in (${String(l)})`),_.push(`availableSpeciality.speciality_id in (${String(l)})`),r="inner"),s&&(null==s?void 0:s.length)&&_.push(`availableSpecialityDoctor.doctor_id in (${String(s)})`),i&&(null==i?void 0:i.length)&&(_.push(`appointments.target_facility_id in (${String(i)})`),_.push(`targetFacilityLocation.id in (${String(i)})`)),t&&(null==t?void 0:t.length)&&_.push(`appointments.case_id in (${String(t)})`),o&&(null==o?void 0:o.length)&&_.push(`appointments.type_id in (${String(o)})`),d&&(null==d?void 0:d.length)&&_.push(`caseType.id in (${String(d)})`),_.push("(appointments.deleted_at IS NULL"),_.push("(appointments.pushed_to_front_desk = true"),a&&n&&_.push(`appointments.updated_at BETWEEN '${a}' AND '${n}'))`);let c=0,p="";for(const e of _)c+=1,1==c&&(p="where"),p=c!=_.length?`${p} ${e} and`:`${p} ${e}`;return`(SELECT\n            COUNT(DISTINCT appointments.id) as total_appointment\n            FROM sch_appointments AS appointments\n\n            ${r} join sch_available_specialities as availableSpeciality on availableSpeciality.id = appointments.available_speciality_id and availableSpeciality.deleted_at IS NULL\n            left join sch_available_doctors as availableSpecialityDoctor on availableSpecialityDoctor.id = appointments.available_doctor_id and availableSpecialityDoctor.deleted_at IS NULL\n            left join users as doctor on doctor.id = availableSpecialityDoctor.doctor_id and doctor.deleted_at IS NULL\n            left join user_basic_info as doctorBasicInfo on doctorBasicInfo.user_id = doctor.id and doctorBasicInfo.deleted_at IS NULL\n            left join facility_locations as facilityLocation on facilityLocation.id = availableSpeciality.facility_location_id and facilityLocation.deleted_at IS NULL\n            left join facilities on facilities.id = facilityLocation.facility_id and facilities.deleted_at IS NULL\n            ${r} join specialities on specialities.id = availableSpeciality.speciality_id and specialities.deleted_at IS NULL\n\n            inner join kiosk_case_types as caseTypes on caseTypes.id = appointments.case_type_id and caseTypes.deleted_at IS NULL\n\n            left join facility_locations as targetFacilityLocation on targetFacilityLocation.id = appointments.target_facility_id and targetFacilityLocation.deleted_at IS NULL\n            left join facilities as targetFacilities on targetFacilities.id = targetFacilityLocation.facility_id and targetFacilities.deleted_at IS NULL\n            left join facility_locations as originFacilityLocation on originFacilityLocation.id = appointments.origin_facility_id and originFacilityLocation.deleted_at IS NULL\n            left join facilities as originFacilities on originFacilities.id = originFacilityLocation.facility_id and originFacilities.deleted_at IS NULL\n\n            left join kiosk_patient as patient on appointments.patient_id = patient.id AND patient.deleted_at IS NULL\n\n            left join sch_appointment_types as appointmentType on appointmentType.id = appointments.type_id and appointmentType.deleted_at IS NULL\n\n            left join sch_appointment_statuses as appointmentStatus ON appointments.status_id = appointmentStatus.id and appointmentStatus.deleted_at IS NULL\n\n            inner join users as updatedBy on appointments.updated_by = updatedBy.id AND updatedBy.deleted_at IS NULL\n\n            left join user_basic_info as updatedByUserBasicInfo on updatedBy.id = updatedByUserBasicInfo.user_id AND updatedByUserBasicInfo.deleted_at IS NULL\n\n            ${p}\n            group BY appointments.id\n            order  BY appointments.updated_at DESC\n        )`},this.rawQueryForCancelledAppointment=e=>{const{facilityLocationIds:t,specialityIds:i,providerIds:a,dateFrom:n,dateTo:o,comments:s,page:l,perPage:d,caseIds:_,paginate:r}=e;let c="";const p=[];r&&(c=`limit ${(l-1)*d} , ${d}`);let u="left";i&&i.length&&(p.push(`availableSpeciality.speciality_id in (${String(i)})`),u="inner"),t&&t.length&&p.push(`availableSpeciality.facility_location_id in (${String(t)})`),a&&a.length&&p.push(`availableSpecialityDoctor.doctor_id in (${String(a)})`),p.push("(appointments.deleted_at IS NULL"),p.push("(appointments.cancelled = true"),s&&s.length&&p.push(`appointments.comments LIKE '%${s}%'`),!n&&o&&p.push(`appointments.updated_at <= '${o}'))`),n&&!o&&p.push(`appointments.updated_at >= '${n}'))`),n&&o&&p.push(`appointments.updated_at BETWEEN '${n}' AND '${o}'))`),_&&_.length&&p.push(`appointments.case_id in (${String(_)})`);let m=0,y="";for(const e of p)m+=1,1==m&&(y="where"),y=m!=p.length?`${y} ${e} and`:`${y} ${e}`;const h=`(SELECT\n        appointments.id as appointment_id,\n        appointments.key as appointment_key,\n        appointments.scheduled_date_time as appointment_scheduled_date_time,\n        appointments.evaluation_date_time as appointment_evaluation_date_time,\n        appointments.time_slots as appointment_time_slot,\n        appointments.appointment_title as appointment_title,\n        appointments.action_performed as appointment_action_performed,\n        appointments.confirmation_status as appointment_confirmation_status,\n        appointments.cancelled as appointment_cancelled,\n        appointments.pushed_to_front_desk as appointment_pushed_to_front_dest,\n        appointments.comments as appointment_comments,\n        appointments.by_health_app as appointment_by_health_app,\n        appointments.date_list_id as appointment_date_list_id,\n        appointments.target_facility_id as appointment_target_facility_id,\n        appointments.origin_facility_id as appointment_origin_facility_id,\n        appointments.case_id as appointment_case_id,\n        appointments.case_type_id as appointment_case_type_id,\n        appointments.patient_id as appointment_patient_id,\n        appointments.type_id as appointment_type_id,\n        appointments.status_id as appointment_status_id,\n        appointments.priority_id as appointment_priority_id,\n        appointments.available_doctor_id as appointment_available_doctor_id,\n        appointments.available_speciality_id as appointment_available_speciality_id,\n        appointments.billable as appointment_billable,\n        appointments.pushed_to_front_desk_comments as appointment_pushed_to_front_desk_comments,\n        appointments.cancelled_comments as appointment_cancelled_comments,\n        appointments.is_speciality_base as appointment_is_speciality_base,\n        appointments.created_by as appointment_created_by,\n        appointments.updated_by as appointment_updated_by,\n        appointments.created_at as appointment_created_at,\n        appointments.updated_at as appointment_updated_at,\n        appointments.deleted_at as appointment_deleted_at,\n        appointments.is_redo as appointment_is_redo,\n        appointments.is_active as appointment_is_active,\n        appointments.is_soft_registered as appointment_is_soft_registered,\n        appointments.physician_id as appointment_physician_id,\n        appointments.technician_id as appointment_technician_id,\n        appointments.reading_provider_id as appointment_reading_provider_id,\n        appointments.cd_image as appointment_cd_image,\n        appointments.is_transportation as appointment_is_transportation,\n\n        availableSpeciality.id as availableSpeciality_id,\n        availableSpeciality.key as availableSpeciality_key,\n        availableSpeciality.start_date as availableSpeciality_start_date,\n        availableSpeciality.end_date as availableSpeciality_end_date,\n        availableSpeciality.end_date_for_recurrence as availableSpeciality_end_date_for_recurrence,\n        availableSpeciality.no_of_doctors as availableSpeciality_no_of_doctors,\n        availableSpeciality.no_of_slots as availableSpeciality_no_of_slots,\n        availableSpeciality.end_after_occurences as availableSpeciality_end_after_occurences,\n        availableSpeciality.number_of_entries as availableSpeciality_number_of_entries,\n        availableSpeciality.speciality_id as availableSpeciality_speciality_id,\n        availableSpeciality.facility_location_id as availableSpeciality_facility_location_id,\n        availableSpeciality.recurrence_ending_criteria_id as availableSpeciality_recurrence_ending_criteria_id,\n        availableSpeciality.deleted_at as availableSpeciality_deleted_at,\n\n        availableSpecialityDoctor.id as availableSpecialityDoctor_id,\n        availableSpecialityDoctor.key as availableSpecialityDoctor_key,\n        availableSpecialityDoctor.start_date as availableSpecialityDoctor_start_date,\n        availableSpecialityDoctor.end_date as availableSpecialityDoctor_end_date,\n        availableSpecialityDoctor.no_of_slots as availableSpecialityDoctor_no_of_slots,\n        availableSpecialityDoctor.doctor_id as availableSpecialityDoctor_doctor_id,\n        availableSpecialityDoctor.facility_location_id as availableSpecialityDoctor_facility_location_id,\n        availableSpecialityDoctor.available_speciality_id as availableSpecialityDoctor_available_speciality_id,\n        availableSpecialityDoctor.supervisor_id as availableSpecialityDoctor_supervisor_id,\n        availableSpecialityDoctor.is_provider_assignment as availableSpecialityDoctor_is_provider_assignment,\n\n        doctor.id as doctor_id,\n        doctor.email as doctor_email,\n        doctor.reset_key as doctor_reset_key,\n        doctor.status as doctor_status,\n        doctor.is_loggedIn as doctor_is_loggedIn,\n        doctor.remember_token as doctor_remember_token,\n\n        doctorBasicInfo.id as doctorBasicInfo_id,\n        doctorBasicInfo.first_name as doctorBasicInfo_first_name,\n        doctorBasicInfo.middle_name as doctorBasicInfo_middle_name,\n        doctorBasicInfo.last_name as doctorBasicInfo_last_name,\n        doctorBasicInfo.date_of_birth as doctorBasicInfo_date_of_birth,\n        doctorBasicInfo.gender as doctorBasicInfo_gender,\n        doctorBasicInfo.user_id as doctorBasicInfo_user_id,\n        doctorBasicInfo.area_id as doctorBasicInfo_area_id,\n        doctorBasicInfo.title as doctorBasicInfo_title,\n        doctorBasicInfo.cell_no as doctorBasicInfo_cell_no,\n        doctorBasicInfo.address as doctorBasicInfo_address,\n        doctorBasicInfo.work_phone as doctorBasicInfo_work_phone,\n        doctorBasicInfo.fax as doctorBasicInfo_fax,\n        doctorBasicInfo.extension as doctorBasicInfo_extension,\n        doctorBasicInfo.home_phone as doctorBasicInfo_home_phone,\n        doctorBasicInfo.emergency_name as doctorBasicInfo_emergency_name,\n        doctorBasicInfo.emergency_phone as doctorBasicInfo_emergency_phone,\n        doctorBasicInfo.biography as doctorBasicInfo_biography,\n        doctorBasicInfo.hiring_date as doctorBasicInfo_hiring_date,\n        doctorBasicInfo.from as doctorBasicInfo_from,\n        doctorBasicInfo.to as doctorBasicInfo_to,\n        doctorBasicInfo.profile_pic as doctorBasicInfo_profile_pic,\n        doctorBasicInfo.city as doctorBasicInfo_city,\n        doctorBasicInfo.state as doctorBasicInfo_state,\n        doctorBasicInfo.zip as doctorBasicInfo_zip,\n        doctorBasicInfo.social_security as doctorBasicInfo_social_security,\n        doctorBasicInfo.profile_pic_url as doctorBasicInfo_profile_pic_url,\n        doctorBasicInfo.apartment_suite as doctorBasicInfo_apartment_suite,\n\n        medicalIdentifier.id as medicalIdentifier_id,\n        medicalIdentifier.clinic_name as medicalIdentifier_clinic_name,\n\n        billingTitles.id as billingTitles_id,\n        billingTitles.name as billingTitles_name,\n        billingTitles.description as billingTitles_description,\n\n        facilityLocation.id as facilityLocation_id,\n        facilityLocation.facility_id as facilityLocation_facility_id,\n        facilityLocation.name as facilityLocation_name,\n        facilityLocation.city as facilityLocation_city,\n        facilityLocation.state as facilityLocation_state,\n        facilityLocation.zip as facilityLocation_zip,\n        facilityLocation.region_id as facilityLocation_region_id,\n        facilityLocation.address as facilityLocation_address,\n        facilityLocation.phone as facilityLocation_phone,\n        facilityLocation.fax as facilityLocation_fax,\n        facilityLocation.email as facilityLocation_email,\n        facilityLocation.office_hours_start as facilityLocation_office_hours_start,\n        facilityLocation.office_hours_end as facilityLocation_office_hours_end,\n        facilityLocation.lat as facilityLocation_lat,\n        facilityLocation.long as facilityLocation_long,\n        facilityLocation.day_list as facilityLocation_day_list,\n        facilityLocation.floor as facilityLocation_floor,\n        facilityLocation.place_of_service_id as facilityLocation_place_of_service_id,\n        facilityLocation.qualifier as facilityLocation_qualifier,\n        facilityLocation.ext_no as facilityLocation_ext_no,\n        facilityLocation.cell_no as facilityLocation_cell_no,\n        facilityLocation.is_main as facilityLocation_is_main,\n        facilityLocation.same_as_provider as facilityLocation_same_as_provider,\n        facilityLocation.dean as facilityLocation_dean,\n\n        facilities.created_at AS facilities_created_at,\n        facilities.created_by AS facilities_created_by,\n        facilities.deleted_at AS facilities_deleted_at,\n        facilities.id AS facilities_id,\n        facilities.name AS facilities_name,\n        facilities.slug AS facilities_slug,\n        facilities.qualifier AS facilities_qualifier,\n        facilities.updated_at AS facilities_updated_at,\n        facilities.updated_by AS facilities_updated_by,\n\n        specialities.id as specialities_id,\n        specialities.name as specialities_name,\n        specialities.description as specialities_description,\n        specialities.time_slot as specialities_time_slot,\n        specialities.over_booking as specialities_over_booking,\n        specialities.has_app as specialities_has_app,\n        specialities.speciality_key as specialities_speciality_key,\n        specialities.comments as specialities_comments,\n        specialities.default_name as specialities_default_name,\n        specialities.qualifier as specialities_qualifier,\n        specialities.is_defualt as specialities_is_defualt,\n        specialities.is_available as specialities_is_available,\n        specialities.is_create_appointment as specialities_is_create_appointment,\n        specialities.is_editable as specialities_is_editable,\n\n        patient.age AS patient_age,\n        patient.cell_phone AS patient_cell_phone,\n        patient.created_at AS patient_created_at,\n        patient.created_by AS patient_created_by,\n        patient.deleted_at AS patient_deleted_at,\n        patient.dob AS patient_dob,\n        patient.first_name AS patient_first_name,\n        patient.gender AS patient_gender,\n        patient.height_ft AS patient_height_ft,\n        patient.height_in AS patient_height_in,\n        patient.home_phone AS patient_home_phone,\n        patient.id AS patient_id,\n        patient.is_law_enforcement_agent AS patient_is_law_enforcement_agent,\n        patient.is_pregnant AS patient_is_pregnant,\n        patient.key AS patient_key,\n        patient.language AS patient_language,\n        patient.last_name AS patient_last_name,\n        patient.meritial_status AS patient_meritial_status,\n        patient.middle_name AS patient_middle_name,\n        patient.need_translator AS patient_need_translator,\n        patient.notes AS patient_notes,\n        patient.profile_avatar AS patient_profile_avatar,\n        patient.ssn AS patient_ssn,\n        patient.status AS patient_status,\n        patient.updated_at AS patient_updated_at,\n        patient.updated_by AS patient_updated_by,\n        patient.weight_kg AS patient_weight_kg,\n        patient.weight_lbs AS patient_weight_lbs,\n        patient.work_phone AS patient_work_phone,\n\n\n        appointmentStatus.created_at AS appointmentStatus_created_at,\n        appointmentStatus.created_by AS appointmentStatus_created_by,\n        appointmentStatus.deleted_at AS appointmentStatus_deleted_at,\n        appointmentStatus.id AS appointmentStatus_id,\n        appointmentStatus.name AS appointmentStatus_name,\n        appointmentStatus.slug AS appointmentStatus_slug,\n        appointmentStatus.updated_at AS appointmentStatus_updated_at,\n        appointmentStatus.updated_by AS appointmentStatus_updated_by,\n\n\n        updatedBy.created_at AS updatedBy_created_at,\n        updatedBy.created_by AS updatedBy_created_by,\n        updatedBy.deleted_at AS updatedBy_deleted_at,\n        updatedBy.email AS updatedBy_email,\n        updatedBy.id AS updatedBy_id,\n        updatedBy.is_loggedin AS updatedBy_is_loggedIn,\n        updatedBy.password AS updatedBy_password,\n        updatedBy.remember_token AS updatedBy_remember_token,\n        updatedBy.reset_key AS updatedBy_reset_key,\n        updatedBy.status AS updatedBy_status,\n        updatedBy.updated_at AS updatedBy_updated_at,\n        updatedBy.updated_by AS updatedBy_updated_by,\n\n\n        updatedByUserBasicInfo.address AS updatedByUserBasicInfo_address,\n        updatedByUserBasicInfo.apartment_suite AS updatedByUserBasicInfo_apartment_suite,\n        updatedByUserBasicInfo.area_id AS updatedByUserBasicInfo_area_id,\n        updatedByUserBasicInfo.biography AS updatedByUserBasicInfo_biography,\n        updatedByUserBasicInfo.cell_no AS updatedByUserBasicInfo_cell_no,\n        updatedByUserBasicInfo.city AS updatedByUserBasicInfo_city,\n        updatedByUserBasicInfo.created_at AS updatedByUserBasicInfo_created_at,\n        updatedByUserBasicInfo.created_by AS updatedByUserBasicInfo_created_by,\n        updatedByUserBasicInfo.date_of_birth AS updatedByUserBasicInfo_date_of_birth,\n        updatedByUserBasicInfo.deleted_at AS updatedByUserBasicInfo_deleted_at,\n        updatedByUserBasicInfo.department_id AS updatedByUserBasicInfo_department_id,\n        updatedByUserBasicInfo.designation_id AS updatedByUserBasicInfo_designation_id,\n        updatedByUserBasicInfo.emergency_phone AS updatedByUserBasicInfo_emergency_phone,\n        updatedByUserBasicInfo.employed_by_id AS updatedByUserBasicInfo_employed_by_id,\n        updatedByUserBasicInfo.employment_type_id AS updatedByUserBasicInfo_employment_type_id,\n        updatedByUserBasicInfo.extension AS updatedByUserBasicInfo_extension,\n        updatedByUserBasicInfo.fax AS updatedByUserBasicInfo_fax,\n        updatedByUserBasicInfo.file_id AS updatedByUserBasicInfo_file_id,\n        updatedByUserBasicInfo.first_name AS updatedByUserBasicInfo_first_name,\n        updatedByUserBasicInfo.from AS updatedByUserBasicInfo_from,\n        updatedByUserBasicInfo.gender AS updatedByUserBasicInfo_gender,\n        updatedByUserBasicInfo.hiring_date AS updatedByUserBasicInfo_hiring_date,\n        updatedByUserBasicInfo.id AS updatedByUserBasicInfo_id,\n        updatedByUserBasicInfo.last_name AS updatedByUserBasicInfo_last_name,\n        updatedByUserBasicInfo.middle_name AS updatedByUserBasicInfo_middle_name,\n        updatedByUserBasicInfo.profile_pic AS updatedByUserBasicInfo_profile_pic,\n        updatedByUserBasicInfo.profile_pic_url AS updatedByUserBasicInfo_profile_pic_url,\n        updatedByUserBasicInfo.social_security AS updatedByUserBasicInfo_social_security,\n        updatedByUserBasicInfo.state AS updatedByUserBasicInfo_state,\n        updatedByUserBasicInfo.title AS updatedByUserBasicInfo_title,\n        updatedByUserBasicInfo.to AS updatedByUserBasicInfo_to,\n        updatedByUserBasicInfo.updated_at AS updatedByUserBasicInfo_updated_at,\n        updatedByUserBasicInfo.updated_by AS updatedByUserBasicInfo_updated_by,\n        updatedByUserBasicInfo.user_id AS updatedByUserBasicInfo_user_id,\n        updatedByUserBasicInfo.work_phone AS updatedByUserBasicInfo_work_phone,\n        updatedByUserBasicInfo.zip AS updatedByUserBasicInfo_zip\n        FROM sch_appointments AS appointments\n\n        ${u} join sch_available_specialities as availableSpeciality on availableSpeciality.id = appointments.available_speciality_id and availableSpeciality.deleted_at IS NULL\n        left join sch_available_doctors as availableSpecialityDoctor on availableSpecialityDoctor.id = appointments.available_doctor_id and availableSpecialityDoctor.deleted_at IS NULL\n        left join users as doctor on doctor.id = availableSpecialityDoctor.doctor_id and doctor.deleted_at IS NULL\n        left join user_basic_info as doctorBasicInfo on doctorBasicInfo.user_id = doctor.id and doctorBasicInfo.deleted_at IS NULL\n        left join medical_identifiers as medicalIdentifier on medicalIdentifier.user_id = doctor.id and medicalIdentifier.deleted_at IS NULL\n        left join billing_titles as billingTitles on billingTitles.id = medicalIdentifier.billing_title_id and billingTitles.deleted_at IS NULL\n        ${t&&t.length?"inner":"left"} join facility_locations as facilityLocation on facilityLocation.id = availableSpeciality.facility_location_id and facilityLocation.deleted_at IS NULL\n        left join facilities on facilities.id = facilityLocation.facility_id and facilities.deleted_at IS NULL\n        ${u} join specialities on specialities.id = availableSpeciality.speciality_id and specialities.deleted_at IS NULL\n\n        ${i&&i.length?"inner":"left"} join kiosk_patient AS patient ON appointments.patient_id = patient.id AND patient.deleted_at IS NULL\n\n        left join sch_appointment_statuses AS appointmentStatus ON appointments.status_id = appointmentStatus.id AND appointmentStatus.deleted_at IS NULL\n\n        ${i&&i.length?"inner":"left"} join users AS updatedBy ON appointments.updated_by = updatedBy.id AND updatedBy.deleted_at IS NULL\n\n        left join user_basic_info AS updatedByUserBasicInfo ON updatedBy.id = updatedByUserBasicInfo.user_id AND updatedByUserBasicInfo.deleted_at IS NULL\n\n        ${y}\n        group BY appointments.id\n        order BY appointments.updated_at DESC\n        ${c})`;return console.log("finalWhereFilter cancel",y),h},this.rawQueryForCancelledAppointmentCount=e=>{const{facilityLocationIds:t,specialityIds:i,providerIds:a,dateFrom:n,dateTo:o,comments:s,caseIds:l}=e,d=[];let _="left";i&&i.length&&(d.push(`availableSpeciality.speciality_id in (${String(i)})`),_="inner"),t&&t.length&&d.push(`availableSpeciality.facility_location_id in (${String(t)})`),a&&a.length&&d.push(`availableSpecialityDoctor.doctor_id in (${String(a)})`),d.push("(appointments.deleted_at IS NULL"),d.push("(appointments.cancelled = true"),s&&s.length&&d.push(`appointments.comments LIKE '%${s}%'`),!n&&o&&d.push(`appointments.updated_at <= '${o}'))`),n&&!o&&d.push(`appointments.updated_at >= '${n}'))`),n&&o&&d.push(`appointments.updated_at BETWEEN '${n}' AND '${o}'))`),l&&l.length&&d.push(`appointments.case_id in (${String(l)})`);let r=0,c="";for(const e of d)r+=1,1==r&&(c="where"),c=r!=d.length?`${c} ${e} and`:`${c} ${e}`;return`(SELECT\n            COUNT(DISTINCT appointments.id) as total_appointment\n            FROM sch_appointments AS appointments\n\n            ${_} join sch_available_specialities as availableSpeciality on availableSpeciality.id = appointments.available_speciality_id and availableSpeciality.deleted_at IS NULL\n            left join sch_available_doctors as availableSpecialityDoctor on availableSpecialityDoctor.id = appointments.available_doctor_id and availableSpecialityDoctor.deleted_at IS NULL\n            left join users as doctor on doctor.id = availableSpecialityDoctor.doctor_id and doctor.deleted_at IS NULL\n            left join user_basic_info as doctorBasicInfo on doctorBasicInfo.user_id = doctor.id and doctorBasicInfo.deleted_at IS NULL\n            left join facility_locations as facilityLocation on facilityLocation.id = availableSpeciality.facility_location_id and facilityLocation.deleted_at IS NULL\n            left join facilities on facilities.id = facilityLocation.facility_id and facilities.deleted_at IS NULL\n            ${_} join specialities on specialities.id = availableSpeciality.speciality_id and specialities.deleted_at IS NULL\n\n            left join kiosk_patient AS patient ON appointments.patient_id = patient.id AND patient.deleted_at IS NULL\n            left join sch_appointment_statuses AS appointmentStatus ON appointments.status_id = appointmentStatus.id AND appointmentStatus.deleted_at IS NULL\n            left join users AS updatedBy ON appointments.updated_by = updatedBy.id AND updatedBy.deleted_at IS NULL\n            left join user_basic_info AS updatedByUserBasicInfo ON updatedBy.id = updatedByUserBasicInfo.user_id AND updatedByUserBasicInfo.deleted_at IS NULL\n\n            ${c}\n            GROUP BY appointments.id\n            )`},this.rawQueryForGetAllPatientAppointments=e=>{const{page:t,perPage:i,paginate:a,patientId:n,isCancelledAppointments:o,appointmentStatusId:s,endDateString:l,startDateString:d,practiceLocationId:_,specialityId:r,caseId:c,visitStatusId:p}=e;let u="";const m=[];a&&(u=`limit ${(t-1)*i} , ${i}`);let y="left",h="left";o&&m.push(`appointments.cancelled = ${o}`),d&&l&&m.push(`appointments.scheduled_date_time between '${d}' and '${l}'`),c&&m.push(`appointments.case_id = ${c}`),s&&m.push(`appointments.status_id = ${s}`),n&&m.push(`appointments.patient_id = ${n}`),r&&(m.push(`specialities.id = ${String(r)}`),m.push(`availableSpeciality.speciality_id = ${String(r)}`),y="inner"),_&&m.push(`availableSpeciality.facility_location_id = (${_})`),p&&(m.push(`visitStatus.id = ${p}`),h="inner"),m.push("appointments.deleted_at IS NULL"),m.push("appointments.pushed_to_front_desk = false");let f=0,v="";for(const e of m)f+=1,1==f&&(v="where"),v=f!=m.length?`${v} ${e} and`:`${v} ${e}`;return`(SELECT\n        appointments.id as appointment_id,\n        appointments.key as appointment_key,\n        appointments.scheduled_date_time as appointment_scheduled_date_time,\n        appointments.evaluation_date_time as appointment_evaluation_date_time,\n        appointments.time_slots as appointment_time_slot,\n        appointments.appointment_title as appointment_title,\n        appointments.action_performed as appointment_action_performed,\n        appointments.confirmation_status as appointment_confirmation_status,\n        appointments.cancelled as appointment_cancelled,\n        appointments.pushed_to_front_desk as appointment_pushed_to_front_dest,\n        appointments.comments as appointment_comments,\n        appointments.by_health_app as appointment_by_health_app,\n        appointments.date_list_id as appointment_date_list_id,\n        appointments.target_facility_id as appointment_target_facility_id,\n        appointments.origin_facility_id as appointment_origin_facility_id,\n        appointments.case_id as appointment_case_id,\n        appointments.case_type_id as appointment_case_type_id,\n        appointments.patient_id as appointment_patient_id,\n        appointments.type_id as appointment_type_id,\n        appointments.status_id as appointment_status_id,\n        appointments.priority_id as appointment_priority_id,\n        appointments.available_doctor_id as appointment_available_doctor_id,\n        appointments.available_speciality_id as appointment_available_speciality_id,\n        appointments.billable as appointment_billable,\n        appointments.pushed_to_front_desk_comments as appointment_pushed_to_front_desk_comments,\n        appointments.cancelled_comments as appointment_cancelled_comments,\n        appointments.is_speciality_base as appointment_is_speciality_base,\n        appointments.created_by as appointment_created_by,\n        appointments.updated_by as appointment_updated_by,\n        appointments.created_at as appointment_created_at,\n        appointments.updated_at as appointment_updated_at,\n        appointments.deleted_at as appointment_deleted_at,\n        appointments.is_redo as appointment_is_redo,\n        appointments.is_active as appointment_is_active,\n        appointments.is_soft_registered as appointment_is_soft_registered,\n        appointments.physician_id as appointment_physician_id,\n        appointments.technician_id as appointment_technician_id,\n        appointments.reading_provider_id as appointment_reading_provider_id,\n        appointments.cd_image as appointment_cd_image,\n        appointments.is_transportation as appointment_is_transportation,\n\n        caseType.id as caseType_id,\n        caseType.key as caseType_key,\n        caseType.name as caseType_name,\n        caseType.slug as caseType_slug,\n        caseType.description as caseType_description,\n        caseType.comments as caseType_comments,\n        caseType.remainder_days as caseType_remainder_days,\n\n        availableSpeciality.id as availableSpeciality_id,\n        availableSpeciality.key as availableSpeciality_key,\n        availableSpeciality.start_date as availableSpeciality_start_date,\n        availableSpeciality.end_date as availableSpeciality_end_date,\n        availableSpeciality.end_date_for_recurrence as availableSpeciality_end_date_for_recurrence,\n        availableSpeciality.no_of_doctors as availableSpeciality_no_of_doctors,\n        availableSpeciality.no_of_slots as availableSpeciality_no_of_slots,\n        availableSpeciality.end_after_occurences as availableSpeciality_end_after_occurences,\n        availableSpeciality.number_of_entries as availableSpeciality_number_of_entries,\n        availableSpeciality.speciality_id as availableSpeciality_speciality_id,\n        availableSpeciality.facility_location_id as availableSpeciality_facility_location_id,\n        availableSpeciality.recurrence_ending_criteria_id as availableSpeciality_recurrence_ending_criteria_id,\n        availableSpeciality.deleted_at as availableSpeciality_deleted_at,\n\n        availableSpecialityDoctor.id as availableSpecialityDoctor_id,\n        availableSpecialityDoctor.key as availableSpecialityDoctor_key,\n        availableSpecialityDoctor.start_date as availableSpecialityDoctor_start_date,\n        availableSpecialityDoctor.end_date as availableSpecialityDoctor_end_date,\n        availableSpecialityDoctor.no_of_slots as availableSpecialityDoctor_no_of_slots,\n        availableSpecialityDoctor.doctor_id as availableSpecialityDoctor_doctor_id,\n        availableSpecialityDoctor.facility_location_id as availableSpecialityDoctor_facility_location_id,\n        availableSpecialityDoctor.available_speciality_id as availableSpecialityDoctor_available_speciality_id,\n        availableSpecialityDoctor.supervisor_id as availableSpecialityDoctor_supervisor_id,\n        availableSpecialityDoctor.is_provider_assignment as availableSpecialityDoctor_is_provider_assignment,\n\n        doctor.id as doctor_id,\n        doctor.email as doctor_email,\n        doctor.reset_key as doctor_reset_key,\n        doctor.status as doctor_status,\n        doctor.is_loggedIn as doctor_is_loggedIn,\n        doctor.remember_token as doctor_remember_token,\n\n        doctorBasicInfo.id as doctorBasicInfo_id,\n        doctorBasicInfo.first_name as doctorBasicInfo_first_name,\n        doctorBasicInfo.middle_name as doctorBasicInfo_middle_name,\n        doctorBasicInfo.last_name as doctorBasicInfo_last_name,\n        doctorBasicInfo.date_of_birth as doctorBasicInfo_date_of_birth,\n        doctorBasicInfo.gender as doctorBasicInfo_gender,\n        doctorBasicInfo.user_id as doctorBasicInfo_user_id,\n        doctorBasicInfo.area_id as doctorBasicInfo_area_id,\n        doctorBasicInfo.title as doctorBasicInfo_title,\n        doctorBasicInfo.cell_no as doctorBasicInfo_cell_no,\n        doctorBasicInfo.address as doctorBasicInfo_address,\n        doctorBasicInfo.work_phone as doctorBasicInfo_work_phone,\n        doctorBasicInfo.fax as doctorBasicInfo_fax,\n        doctorBasicInfo.extension as doctorBasicInfo_extension,\n        doctorBasicInfo.home_phone as doctorBasicInfo_home_phone,\n        doctorBasicInfo.emergency_name as doctorBasicInfo_emergency_name,\n        doctorBasicInfo.emergency_phone as doctorBasicInfo_emergency_phone,\n        doctorBasicInfo.biography as doctorBasicInfo_biography,\n        doctorBasicInfo.hiring_date as doctorBasicInfo_hiring_date,\n        doctorBasicInfo.from as doctorBasicInfo_from,\n        doctorBasicInfo.to as doctorBasicInfo_to,\n        doctorBasicInfo.profile_pic as doctorBasicInfo_profile_pic,\n        doctorBasicInfo.city as doctorBasicInfo_city,\n        doctorBasicInfo.state as doctorBasicInfo_state,\n        doctorBasicInfo.zip as doctorBasicInfo_zip,\n        doctorBasicInfo.social_security as doctorBasicInfo_social_security,\n        doctorBasicInfo.profile_pic_url as doctorBasicInfo_profile_pic_url,\n        doctorBasicInfo.apartment_suite as doctorBasicInfo_apartment_suite,\n\n        medicalIdentifier.id as medicalIdentifier_id,\n        medicalIdentifier.clinic_name as medicalIdentifier_clinic_name,\n\n        billingTitles.id as billingTitles_id,\n        billingTitles.name as billingTitles_name,\n        billingTitles.description as billingTitles_description,\n\n        facilityLocation.id as facilityLocation_id,\n        facilityLocation.facility_id as facilityLocation_facility_id,\n        facilityLocation.name as facilityLocation_name,\n        facilityLocation.city as facilityLocation_city,\n        facilityLocation.state as facilityLocation_state,\n        facilityLocation.zip as facilityLocation_zip,\n        facilityLocation.region_id as facilityLocation_region_id,\n        facilityLocation.address as facilityLocation_address,\n        facilityLocation.phone as facilityLocation_phone,\n        facilityLocation.fax as facilityLocation_fax,\n        facilityLocation.email as facilityLocation_email,\n        facilityLocation.office_hours_start as facilityLocation_office_hours_start,\n        facilityLocation.office_hours_end as facilityLocation_office_hours_end,\n        facilityLocation.lat as facilityLocation_lat,\n        facilityLocation.long as facilityLocation_long,\n        facilityLocation.day_list as facilityLocation_day_list,\n        facilityLocation.floor as facilityLocation_floor,\n        facilityLocation.place_of_service_id as facilityLocation_place_of_service_id,\n        facilityLocation.qualifier as facilityLocation_qualifier,\n        facilityLocation.ext_no as facilityLocation_ext_no,\n        facilityLocation.cell_no as facilityLocation_cell_no,\n        facilityLocation.is_main as facilityLocation_is_main,\n        facilityLocation.same_as_provider as facilityLocation_same_as_provider,\n        facilityLocation.dean as facilityLocation_dean,\n\n        facilities.created_at AS facilities_created_at,\n        facilities.created_by AS facilities_created_by,\n        facilities.deleted_at AS facilities_deleted_at,\n        facilities.id AS facilities_id,\n        facilities.name AS facilities_name,\n        facilities.slug AS facilities_slug,\n        facilities.qualifier AS facilities_qualifier,\n        facilities.updated_at AS facilities_updated_at,\n        facilities.updated_by AS facilities_updated_by,\n\n        specialities.id as specialities_id,\n        specialities.name as specialities_name,\n        specialities.description as specialities_description,\n        specialities.time_slot as specialities_time_slot,\n        specialities.over_booking as specialities_over_booking,\n        specialities.has_app as specialities_has_app,\n        specialities.speciality_key as specialities_speciality_key,\n        specialities.comments as specialities_comments,\n        specialities.default_name as specialities_default_name,\n        specialities.qualifier as specialities_qualifier,\n        specialities.is_defualt as specialities_is_defualt,\n        specialities.is_available as specialities_is_available,\n        specialities.is_create_appointment as specialities_is_create_appointment,\n        specialities.is_editable as specialities_is_editable,\n\n        appointmentStatus.created_at AS appointmentStatus_created_at,\n        appointmentStatus.created_by AS appointmentStatus_created_by,\n        appointmentStatus.deleted_at AS appointmentStatus_deleted_at,\n        appointmentStatus.id AS appointmentStatus_id,\n        appointmentStatus.name AS appointmentStatus_name,\n        appointmentStatus.slug AS appointmentStatus_slug,\n        appointmentStatus.updated_at AS appointmentStatus_updated_at,\n        appointmentStatus.updated_by AS appointmentStatus_updated_by,\n\n        patientSessions.id AS patientSessions_id,\n        patientSessions.key AS patientSessions_key,\n        patientSessions.status_id AS patientSessions_status_id,\n        patientSessions.case_id AS patientSessions_case_id,\n        patientSessions.appointment_id AS patientSessions_appointment_id,\n        patientSessions.date_of_check_in AS patientSessions_date_of_check_in,\n        patientSessions.time_of_check_in AS patientSessions_time_of_check_in,\n        patientSessions.date_of_check_out AS patientSessions_date_of_check_out,\n        patientSessions.time_of_check_out AS patientSessions_time_of_check_out,\n        patientSessions.created_by AS patientSessions_created_by,\n        patientSessions.updated_by AS patientSessions_updated_by,\n        patientSessions.created_at AS patientSessions_created_at,\n        patientSessions.updated_at AS patientSessions_updated_at,\n        patientSessions.deleted_at AS patientSessions_deleted_at,\n\n        visitStatus.name AS visitStatus_name,\n        visitStatus.id AS visitStatus_id,\n        visitStatus.slug AS visitStatus_slug\n        FROM sch_appointments AS appointments\n\n        left join kiosk_case_types as caseType on caseType.id = appointments.case_type_id and caseType.deleted_at IS NULL\n        ${y} join sch_available_specialities as availableSpeciality on availableSpeciality.id = appointments.available_speciality_id and availableSpeciality.deleted_at IS NULL\n        left join sch_available_doctors as availableSpecialityDoctor on availableSpecialityDoctor.id = appointments.available_doctor_id and availableSpecialityDoctor.deleted_at IS NULL\n        left join users as doctor on doctor.id = availableSpecialityDoctor.doctor_id and doctor.deleted_at IS NULL\n        left join user_basic_info as doctorBasicInfo on doctorBasicInfo.user_id = doctor.id and doctorBasicInfo.deleted_at IS NULL\n        left join medical_identifiers as medicalIdentifier on medicalIdentifier.user_id = doctor.id and medicalIdentifier.deleted_at IS NULL\n        left join billing_titles as billingTitles on billingTitles.id = medicalIdentifier.billing_title_id and billingTitles.deleted_at IS NULL\n        left join facility_locations as facilityLocation on facilityLocation.id = availableSpeciality.facility_location_id and facilityLocation.deleted_at IS NULL\n        left join facilities on facilities.id = facilityLocation.facility_id and facilities.deleted_at IS NULL\n        ${y} join specialities on specialities.id = availableSpeciality.speciality_id and specialities.deleted_at IS NULL\n        left join sch_appointment_statuses AS appointmentStatus ON appointments.status_id = appointmentStatus.id AND appointmentStatus.deleted_at IS NULL\n        left join kiosk_case_patient_session AS patientSessions ON patientSessions.appointment_id = appointments.id\n        ${h} join kiosk_case_patient_session_statuses AS visitStatus ON visitStatus.id = patientSessions.status_id AND visitStatus.deleted_at IS NULL\n\n        ${v}\n        group BY appointments.id\n        order BY appointments.updated_at DESC\n        ${u})`},this.rawQueryForGetAllPatientAppointmentsCount=e=>{const{page:t,perPage:i,paginate:a,patientId:n,isCancelledAppointments:o,appointmentStatusId:s,endDateString:l,startDateString:d,practiceLocationId:_,specialityId:r,caseId:c,visitStatusId:p}=e;let u="";const m=[];a&&(u=`limit ${(t-1)*i} , ${i}`);let y="left",h="left";o&&m.push(`appointments.cancelled = ${o}`),d&&l&&m.push(`appointments.scheduled_date_time between '${d}' and '${l}'`),c&&m.push(`appointments.case_id = ${c}`),s&&m.push(`appointments.status_id = ${s}`),n&&m.push(`appointments.patient_id = ${n}`),r&&(m.push(`specialities.id = ${String(r)}`),m.push(`availableSpeciality.speciality_id = ${String(r)}`),y="inner"),_&&m.push(`availableSpeciality.facility_location_id = (${_})`),p&&(m.push(`visitStatus.id = ${p}`),h="inner"),m.push("appointments.deleted_at IS NULL"),m.push("appointments.pushed_to_front_desk = false");let f=0,v="";for(const e of m)f+=1,1==f&&(v="where"),v=f!=m.length?`${v} ${e} and`:`${v} ${e}`;return`(SELECT\n\n            COUNT(DISTINCT appointments.id) as total_appointment\n            FROM sch_appointments as appointments\n\n\n            ${y} join sch_available_specialities as availableSpeciality on availableSpeciality.id = appointments.available_speciality_id and availableSpeciality.deleted_at IS NULL\n            left join sch_available_doctors as availableSpecialityDoctor on availableSpecialityDoctor.id = appointments.available_doctor_id and availableSpecialityDoctor.deleted_at IS NULL\n            left join users as doctor on doctor.id = availableSpecialityDoctor.doctor_id and doctor.deleted_at IS NULL\n            left join user_basic_info as doctorBasicInfo on doctorBasicInfo.user_id = doctor.id and doctorBasicInfo.deleted_at IS NULL\n            left join facility_locations as facilityLocation on facilityLocation.id = availableSpeciality.facility_location_id and facilityLocation.deleted_at IS NULL\n            left join facilities on facilities.id = facilityLocation.facility_id and facilities.deleted_at IS NULL\n            ${y} join specialities on specialities.id = availableSpeciality.speciality_id and specialities.deleted_at IS NULL\n            left join kiosk_case_patient_session AS patientSessions ON patientSessions.appointment_id = appointments.id\n            ${h} join kiosk_case_patient_session_statuses AS visitStatus ON visitStatus.id = patientSessions.status_id AND visitStatus.deleted_at IS NULL\n\n            ${v}\n            group BY appointments.id\n            order BY appointments.updated_at DESC\n            ${u})`},this.generateWhereClauseForGenericAPI=e=>{const{patientStatusIds:t,facilityLocationIds:i,specialityIds:a,doctorIds:n,patientId:o,patientName:s,appointmentTypeIds:l,appointmentStatusIds:d,caseTypeIds:_,caseIds:r,startDate:c,endDate:p,appointmentListingType:u,comments:m,filterType:y,paginate:h,page:f,perPage:v,createdAt:g,updatedAt:b,createdByIds:S,updatedByIds:I}=e;let D="";const w=[];if(h&&(D=`LIMIT ${(f-1)*v} , ${v}`),a&&a.length&&w.push(`sch_available_specialities.speciality_id in (${String(a)})`),(null==t?void 0:t.length)&&w.push(`kiosk_case_patient_session.status_id in (${String(t)})`),(null==i?void 0:i.length)&&"RESCHEDULED"!==u&&w.push(`sch_available_specialities.facility_location_id in (${String(i)})`),n&&n.length&&w.push(`sch_available_doctors.doctor_id in (${String(n)})`),o&&w.push(`sch_appointments.patient_id in (${String(o)})`),s){const e=s.replace(/\s+/g," ").trim();w.push(`(kiosk_patient.first_name LIKE '%${e}%' or kiosk_patient.last_name LIKE '%${e}%' or kiosk_patient.middle_name LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%' or CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.first_name) LIKE '%${e}%' or CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.first_name) LIKE '%${e}%'  or CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.middle_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or CONCAT(kiosk_patient.first_name, ' ', kiosk_patient.last_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%' or CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.first_name, ' ', kiosk_patient.last_name) LIKE '%${e}%' or  CONCAT(kiosk_patient.middle_name, ' ', kiosk_patient.last_name, ' ', kiosk_patient.first_name) LIKE '%${e}%' or  CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.middle_name, ' ', kiosk_patient.first_name) LIKE '%${e}%' or  CONCAT(kiosk_patient.last_name, ' ', kiosk_patient.first_name, ' ', kiosk_patient.middle_name) LIKE '%${e}%')`)}l&&l.length&&w.push(`sch_appointments.type_id in (${String(l)})`),d&&d.length&&w.push(`sch_appointments.status_id in (${String(d)})`),_&&_.length&&w.push(`sch_appointments.case_type_id in (${String(_)})`),r&&r.length&&w.push(`sch_appointments.case_id in (${String(r)})`),m&&m.length&&w.push(`sch_appointments.comments LIKE '%${m}%'`),I&&w.push(`sch_appointments.updated_by IN (${String(I)})`),S&&w.push(`sch_appointments.created_by IN (${String(S)})`),b&&w.push(`sch_appointments.updated_at BETWEEN '${new Date(new Date(b).setUTCHours(0,0,0,0)).toISOString()}' AND '${new Date(new Date(b).setUTCHours(23,59,59,999)).toISOString()}'`),g&&w.push(`sch_appointments.created_at BETWEEN '${new Date(new Date(g).setUTCHours(0,0,0,0)).toISOString()}' AND '${new Date(new Date(g).setUTCHours(23,59,59,999)).toISOString()}'`),"CANCELLED"!==u&&"RESCHEDULED"!==u||(c&&p?w.push(`sch_appointments.updated_at BETWEEN '${c}' AND '${p}'`):!c&&p?w.push(`sch_appointments.updated_at <= '${p}'`):c&&!p&&w.push(`sch_appointments.updated_at >= '${c}'`)),w.push("sch_appointments.deleted_at IS NULL"),"CANCELLED"==u?(w.push("sch_appointments.cancelled = true"),w.push("sch_appointments.pushed_to_front_desk = 0")):"RESCHEDULED"==u?(w.push("sch_appointments.pushed_to_front_desk = true"),w.push("sch_appointments.cancelled = 0"),(null==i?void 0:i.length)&&w.push(`sch_appointments.target_facility_id in (${String(i)})`)):"SCHEDULED"==u?(w.push(`sch_appointments.scheduled_date_time BETWEEN '${c}' AND '${p}'`),w.push("sch_appointments.cancelled = 0"),w.push("sch_appointments.pushed_to_front_desk = 0")):(w.push("sch_appointments.cancelled = 0"),w.push("sch_appointments.pushed_to_front_desk = 0"));let O=0,T="";for(const e of w)O+=1,1==O&&(T="where"),T=O!=w.length?`${T} ${e} ${y}`:`${T} ${e}`;return{whereClause:T,requiredCondition:"left",requiredConditionForDoctor:"left",applyLimit:D}}}};Ln=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[])],Ln);var kn=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))},Pn=function(e,t){var i={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(i[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(a=Object.getOwnPropertySymbols(e);n<a.length;n++)t.indexOf(a[n])<0&&Object.prototype.propertyIsEnumerable.call(e,a[n])&&(i[a[n]]=e[a[n]])}return i};const jn=ra.Op,Bn=i(517);let Un=class extends Ln{constructor(e,t,i,a,n,o,s,l,d,_,r,c,p,m,y,h,f,v,b,S,I,D,w,O,T,A,N,C){super(),this.__repo=e,this.__userRepo=t,this.__userFacilityRepo=i,this.__modelHasRolesRepo=a,this.__appoitmentTypeRepo=n,this.__appointmentStatusRepo=o,this.__casePatientSessionStatusesRepo=s,this.__specialityRepo=l,this.__availableSpecialityRepo=d,this.__unAvailableDoctorRepo=_,this.__facilityLocationRepo=r,this.__availableDoctorRepo=c,this.__caseTypesRepo=p,this.__medicalIdentifierRepo=m,this.__recurrenceEndingCriteriaRepo=y,this.__colorCodeRepo=h,this.__recurrenceDateListRepo=f,this.__appointmentPrioritiesRepo=v,this.__visitSessionRepo=b,this.__kioskContactPersonRepo=S,this.__kioskContactPersonTypesRepo=I,this.__casePatientSessionRepo=D,this.__kioskCaseRepo=w,this.__transportationsRepo=O,this.__schAppointmentCptCodesRepo=T,this.__ptSessionRepo=A,this.__billingCodesRepo=N,this.http=C,this.createAppSession=(e,t)=>kn(this,void 0,void 0,(function*(){const{speciality_key:i,case_id:a,doctor_id:n,patient_id:o,visit_session_id:s}=e,l=this.__getSpecialityEnvironment[i],d={headers:{Authorization:t}};return l&&(yield this.__http.post(`${process.env[l]}/medical-session/create-appointment-session`,{case_id:a,doctor_id:n,patient_id:o,session_type:1,visit_session_id:s},d)),!0})),this.activateAppointment=(e,t)=>kn(this,void 0,void 0,(function*(){const{case_id:i,patient_id:a,user_id:n}=e,o=this.shallowCopy(yield this.__repo.updateByColumnMatched({cancelled:!1,case_id:i,deleted_at:null,is_active:!1,patient_id:a,pushed_to_front_desk:!1},{is_active:!0,updated_at:new Date,updated_by:n})),s={headers:{Authorization:t}};return this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-soft-patient-listing`,{},s),o})),this.autoResolveAppointments=(e,t)=>kn(this,void 0,void 0,(function*(){const{appointment_ids:t,user_id:i=Number(process.env.USERID),unavailibility_end_date:a,same_clinic:n}=e,o=this.shallowCopy(yield this.__availableDoctorRepo.findAll({deleted_at:null},{include:[{as:"appointments",model:He,where:{cancelled:null,deleted_at:null,id:{[jn.in]:t},pushed_to_front_desk:null}},{as:"doctor",attributes:{exclude:["password"]},model:le},{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:it,required:!1,where:{deleted_at:null}}]})),s=o.map((e=>e.appointments.reduce(((e,t)=>e+1),0))).reduce(((e,t)=>e+t),0);if(!o||t.length!==s)throw un("NO_SAME_APPOINTMENT");const{doctor_id:l}=o[0],d=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,user_id:l,[jn.or]:[{speciality_id:{[jn.ne]:0}},{speciality_id:{[jn.ne]:null}}]})),_=yield this.findFacilityLocations(l,i),r=a?new Date(a):new Date(o[o.length-1].end_date),c=new Date(new Date(r).setMonth(r.getMonth()+2)),p=this.shallowCopy(yield this.__availableDoctorRepo.findAll({deleted_at:null,doctor_id:l,end_date:c,facility_location_id:{[jn.in]:_},start_date:r},{include:[{as:"appointments",model:He,where:{cancelled:null,deleted_at:null,id:{[jn.in]:t},pushed_to_front_desk:null}},{as:"doctor",attributes:{exclude:["password"]},model:le},{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:it,required:!1,where:{deleted_at:null}}],order:[["start_date","ASC"]]}));if(!p.length)throw un("NO_OTHER_ASSIGNMENTS_FOUND");let u=[];for(const e of p)for(const t of o)u=this.findAvailableSlots(n,e,t);return{clinics:_,endDate:c,location:d,startDate:r,toBeResolvedAssignments:o}})),this.cancelAppointments=(e,t)=>kn(this,void 0,void 0,(function*(){var i;const{appointment_ids:a,cancelled_comments:n,user_id:o=Number(process.env.USERID),request_from_php:s,trigger_socket:l=!1,is_redo:d}=e,_={headers:{Authorization:t}};let r,c,p=1;const u={appointment_ids:[...a]};let m;const y=this.shallowCopy(yield this.__appoitmentTypeRepo.findOne({slug:"initial_evaluation"})),h=this.shallowCopy(yield this.__appointmentStatusRepo.findAll({[jn.or]:[{slug:"scheduled"},{slug:"re_scheduled"},{slug:"arrived"},{slug:"completed"}]})).map((e=>e.id)),f=this.shallowCopy(yield this.__repo.findAll({id:a,type_id:y.id},{include:{as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null}}}));if(f&&f.length){const e=f.map((e=>e.availableSpeciality.speciality_id)),t=f.map((e=>e.case_id)),n=f.map((e=>e.patient_id)),o=this.shallowCopy(yield this.__repo.findOne({id:{[jn.ne]:a},case_id:t,patient_id:n,deleted_at:null,cancelled:!1,pushed_to_front_desk:!1,status_id:h,type_id:{[jn.ne]:y.id}},{include:[{as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null,speciality_id:e}},{as:"case",attributes:["id","is_transferring_case"],model:ti,required:!1,where:{deleted_at:null}}]}));if(o&&Object.keys(o).length&&!(null===(i=o.case)||void 0===i?void 0:i.is_transferring_case))throw un("PATIENT_APPOINTMENT_EXIST")}if(s)r=[...a],p=0;else{const e=yield this.__http.post(`${process.env.VISIT_DESK_URL}vd/visit_session/appointment-exists`,Object.assign({},u),_);c=e.result.data,r=a.filter((e=>!c.includes(e))),m={include:[{as:"availableDoctor",include:[{as:"doctor",attributes:["id"],include:{as:"userBasicInfo",attributes:["first_name","last_name"],model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",attributes:["id"],include:{as:"speciality",attributes:["id","name"],model:ue,required:!1,where:{deleted_at:null}},model:it,required:!1,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null}},{as:"patient",attributes:["first_name","last_name"],model:Et,required:!0,where:{deleted_at:null}},{as:"caseType",attributes:["name","slug"],model:Wt,required:!0,where:{deleted_at:null}},{as:"availableSpeciality",attributes:["id"],include:{as:"speciality",attributes:["id","name"],model:ue,required:!1,where:{deleted_at:null}},model:it,required:!1,where:{deleted_at:null}},{as:"appointmentType",attributes:["name","slug"],model:J},{as:"appointmentVisit",attributes:["visit_date"],model:Ke},{as:"case",model:ti,include:[{as:"casePurposeOfVisit",model:ri},{as:"caseAccidentInformation",attributes:[[(0,ra.fn)("datediff",(0,ra.fn)("NOW"),(0,ra.col)("accident_date")),"no_of_days"]],model:ui}]}]}}if(r&&r.length){const{status:e}=this.shallowCopy(yield this.__http.put(`${process.env.KIOSK_URL}case-patient-session/remove-patient-sessions`,{appointment_ids:r,trigger_socket:!0,request_from_sch:!0},_));if(200!==e)throw un("ERROR_FROM_KIOSK");yield this.__repo.updateByIds(r,{cancelled:1,cancelled_comments:n,origin_facility_id:null,pushed_to_front_desk:0,target_facility_id:null,updated_at:new Date,updated_by:o,is_redo:p}),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:r,email_title:"Appointment Cancelled"},_);const i=yield this.getAppointmentById({appointment_id:r,user_id:o},t);l||this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:i,action_point:"deleted",deleted_appointment_ids:r},_)}const v=this.shallowCopy(yield this.__repo.findAll({id:a},Object.assign({},m))),g=v.map((e=>e.case_id));return c&&c.length?{data:v,socketData:v,message:`Case No. ${String(g)} have visits, Please delete first`}:{data:null,socketData:v,message:"Appointment Cancelled Successfully!",status:!0}})),this.cancelAppointmentsDeleteAssignments=(e,t,i)=>kn(this,void 0,void 0,(function*(){const{appointment_ids:a,available_doctor_ids:n,user_id:o=Number(process.env.USERID)}=e;yield Promise.all([this.__repo.updateByIds(a,{cancelled:1,updated_at:new Date,updated_by:o,is_redo:0},i),this.__recurrenceDateListRepo.updateByColumnMatched({available_doctor_id:n,deleted_at:null},{deleted_at:new Date,updated_by:o},i),this.__availableDoctorRepo.updateByIds(n,{deleted_at:new Date,updated_by:o},i)]);const s={headers:{Authorization:t}},l=yield this.getAppointmentById({appointment_id:a,user_id:o},t,i);return this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:l,action_point:"deleted",deleted_appointment_ids:a},s),{data:null,message:"Appointments cancelled Successfully!",status:!0}})),this.cancelSoftPatientAppointment=(e,t)=>kn(this,void 0,void 0,(function*(){const{patient_ids:i,user_id:a}=e,n={appointment_ids:this.shallowCopy(yield this.__repo.findAll({patient_id:i,deleted_at:null,cancelled:0,pushed_to_front_desk:0})).map((e=>e.id)),user_id:a,request_from_php:!0};return this.cancelAppointments(n,t)})),this.checkAppointmentsByCase=(e,t)=>kn(this,void 0,void 0,(function*(){const{case_ids:t}=e,i=this.shallowCopy(yield this.__repo.findAll({cancelled:!1,case_id:{[jn.in]:[...t]},deleted_at:null,pushed_to_front_desk:!1},{attributes:["case_id"]})).map((e=>e.case_id));return this.filterUnique(i)})),this.checkInitial=(e,t)=>kn(this,void 0,void 0,(function*(){var t;const{patient_id:i,case_id:a,speciality_id:n}=e,o=this.shallowCopy(yield this.__appoitmentTypeRepo.findOne({slug:"initial_evaluation"})),{id:s}=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({slug:"no_show"})),l=this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:a,deleted_at:null,patient_id:i,pushed_to_front_desk:!1,status_id:{[jn.ne]:s},type_id:o.id},{attributes:["available_doctor_id"],include:[{as:"availableDoctor",include:[{as:"availableSpeciality",attributes:["speciality_id"],model:it,required:!1,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",attributes:["speciality_id"],model:it,required:!1,where:{deleted_at:null}}]})),{available_doctor_id:d,availableDoctor:_,availableSpeciality:r}=l||{};return d&&(null===(t=null==_?void 0:_.availableSpeciality)||void 0===t?void 0:t.speciality_id)===n||(null==r?void 0:r.speciality_id)===n?{initial_check:!0}:{initial_check:!1}})),this.createBackDatedAppointments=(e,t)=>kn(this,void 0,void 0,(function*(){const{appointment_type_id:i,case_id:a,case_type_id:n,comments:o,billable:s,confirmation_status:l,doctor_id:d,is_speciality_base:_,facility_location_id:r,patient_id:c,priority_id:p,speciality_id:u,start_date_time:m,time_slot:y,user_id:h=Number(process.env.USERID),days:f,end_date_for_recurrence:v,recurrence_ending_criteria_id:b,end_after_occurences:S,is_soft_registered:I,cd_image:D,reading_provider_id:w}=e;if(!d)throw un("APPOINTMENT_WITHOUT_DOCTOR");const{is_active:O}=this.shallowCopy(yield this.__kioskCaseRepo.findById(a));if(!O)throw un("APPOINTMENT_CAN_NOT_CREATED_ON_PREVIOUS_DATE");const T=I||!1;let A=null,N=null;const C={headers:{Authorization:t}},{slug:R}=this.shallowCopy(yield this.__caseTypesRepo.findById(n)),E=this.shallowCopy(yield this.__appoitmentTypeRepo.findAll({deleted_at:null},{})).map((e=>e.id));if(!(null==E?void 0:E.includes(i)))throw un("INVALID_APPOINTMENT_TYPE_ID");const L=this.shallowCopy(yield this.__appoitmentTypeRepo.findOne({slug:"initial_evaluation"}));if((f||v||b||S)&&i===L.id)throw un("NO_APPOINTMENT_CREATED_RECCURENCE");const k=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({deleted_at:null,slug:"completed"})),P=this.shallowCopy(yield this.__specialityRepo.findOne({deleted_at:null,id:u}));if(!P&&!Object.keys(P).length)throw un("NO_SPECIALITY_FOUND");let j,B;if(b){j=this.shallowCopy(yield this.__recurrenceEndingCriteriaRepo.findById(b));const{slug:e}=j;B=null!=e?e:""}const{time_slot:U}=P||{},q=!!v,F=f&&f.length?f:[0,1,2,3,4,5,6],M=yield this[this.__formatDatesCriteriaMethod[`${q}`]]({daysList:F,endDateString:new Date(m),endingCriteria:B,numberOfRecurrsion:S,recurrenceEndDateString:v,startDateString:m}),$=M&&M.length?M:[new Date(m)],V=y||U,x=y?y/U:1,{is_transferring_case:K}=this.shallowCopy(yield this.__kioskCaseRepo.findOne({id:a},{attributes:["is_transferring_case"]}));return Promise.all($.map((e=>kn(this,void 0,void 0,(function*(){var f,v,b,S,I;const O=new Date(e);null==O||O.setMinutes((null==O?void 0:O.getMinutes())+V);const E={include:[{as:"availableDoctor",include:{as:"doctor",attributes:{exclude:["password"]},include:{as:"userFacilities",model:Ie,required:!1,where:{deleted_at:null,speciality_id:u}},model:le,required:!1,where:{deleted_at:null}},model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null,speciality_id:u}}]},j={cancelled:!1,case_id:a,deleted_at:null,patient_id:c,pushed_to_front_desk:!1,type_id:1};let B=!1,U=!1;const q=this.shallowCopy(yield this.__repo.findAll(Object.assign({},j),Object.assign({},E))),{id:F}=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({slug:"no_show"})),M=q.find((e=>{var t,i;return(e.availableSpeciality||(null===(i=null===(t=e.availableDoctor)||void 0===t?void 0:t.doctor)||void 0===i?void 0:i.userFacilities.length))&&e.status_id!==F}));if(M&&Object.keys(M).length&&(M.availableSpeciality||(null===(v=null===(f=M.availableDoctor)||void 0===f?void 0:f.doctor)||void 0===v?void 0:v.userFacilities))){const{available_doctor_id:t,availableDoctor:i,scheduled_date_time:a,availableSpeciality:n}=Object.assign({},M),o=null===(S=null===(b=null==i?void 0:i.doctor)||void 0===b?void 0:b.userFacilities)||void 0===S?void 0:S.map((e=>null==e?void 0:e.speciality_id)),s=null==o?void 0:o.includes(u);B=!(!(t&&s||(null==n?void 0:n.speciality_id)===u)||null===M.evaluation_date_time),B=M.status_id!==F,U=!!(B&&new Date(a).getTime()<new Date(e).getTime())}if(i===L.id&&B)throw un("PATIENT_ALREADY_HAVE_INITIAL_EVALUATION_ASSIGNMENT");if(i!==L.id&&!B&&!K)throw un("NO_INITIAL_EVALUATION_ASSIGNMENT");if(i===L.id&&!B||i!==L.id&&B||K){if(!B&&(B||U)&&!K)throw un("APPOINTMENT_CAN_NOT_DONE_BEFORE_INITIAL_EVALUATION");if(yield this.checkExitAppointment(a,P,i,m,y,F))throw un("APPOINTMENT_ALREADY_EXIST");const f=this.shallowCopy(yield this.__medicalIdentifierRepo.findOne({deleted_at:null,user_id:d,wcb_auth:!0}));if(!("worker_compensation"!==R||f&&Object.keys(f).length))throw un("PROVIDER_DOES_NOT_HAVE_WC_AUTH");const v=this.shallowCopy(yield this.__availableDoctorRepo.findOne({deleted_at:null,doctor_id:d,facility_location_id:r},{include:{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[jn.gte]:O},start_date:{[jn.lte]:e}}}}));if(!v||!Object.keys(v).length)throw un("ASSIGNMENT_NOT_FOUND");const{dateList:b}=v||{},S={available_speciality_id:null==v?void 0:v.available_speciality_id,date_list_id:b[0].id,end_date:b[0].end_date,id:v.id,no_of_slots:v.no_of_slots,start_date:b[0].start_date},E=new Date(e),L=this.getTimeSlotOfAssignment(S);E.setMinutes(E.getMinutes()+L*x);const j=this.shallowCopy(yield this.__repo.findAll({available_doctor_id:S.id,cancelled:!1,deleted_at:null,pushed_to_front_desk:!1})),q=this.getFreeSlotsForAssignment(S,j,P.over_booking+1,L),M=null==q?void 0:q.find((t=>{const i=new Date(t.startDateTime),a=new Date(t.startDateTime);if(a.setMinutes(a.getMinutes()+L),i.getTime()<=e.getTime()&&e.getTime()<a.getTime()&&t.count>0)return t}));if(!M||!Object.keys(M).length)throw un("NO_SLOTS_REMAINING");const $=this.shallowCopy(yield this.__unAvailableDoctorRepo.findOne({[jn.or]:[{[jn.and]:[{approval_status:1,deleted_at:null,doctor_id:d,end_date:{[jn.gt]:E},start_date:{[jn.lte]:e}}]},{[jn.and]:[{approval_status:1,deleted_at:null,doctor_id:d,start_date:{[jn.gte]:e,[jn.lt]:E}}]}]}));if($&&Object.keys($).length)throw un("NO_PROVIDER_AVAILABLE");const V=this.shallowCopy(yield this.__repo.create({available_doctor_id:null==S?void 0:S.id,available_speciality_id:null==S?void 0:S.available_speciality_id,billable:s,case_id:a,case_type_id:n,chartNo:c,comments:o,confirmation_status:l,created_by:h,date_list_id:null==S?void 0:S.date_list_id,is_speciality_base:_,patient_id:c,priority_id:p||null,scheduled_date_time:e,status_id:k.id,time_slots:L*x,type_id:i,is_soft_registered:T,is_active:!T,cd_image:null!=D?D:null,reading_provider:w}));let z;try{const e=this.shallowCopy(yield this.__http.get(`${process.env.KIOSK_URL}case-patient-session-statuses`,Object.assign(Object.assign({},C),{params:{slug:"checked_out"}}))),{result:{data:t}}=e||{};z=yield this.__http.post(`${process.env.KIOSK_URL}case-patient-session`,{case_id:a,status_id:null===(I=t[0])||void 0===I?void 0:I.id,appointment_id:V.id,trigger_socket:!0},C)}catch(e){throw yield this.deleteAppointmentById(V.id,h),e}const{result:{data:G}}=z,H={appointment_id:V.id,appointment_type_id:i,case_id:a,created_by:h,doctor_id:d,facility_location_id:r,patient_id:c,speciality_id:u,visit_date:new Date(m),visit_session_state_id:1};let Y;try{Y=yield this.__http.post(`${process.env.VISIT_DESK_URL}vd/visit_session/create`,Object.assign({},H),C)}catch(e){throw yield this.deleteAppointmentById(V.id,h),yield this.deleteKioskSessionByAppointmentId(G.id,h),e}const{result:{data:{id:W}}}=Y,{speciality_key:Q}=yield this.__specialityRepo.findOne({deleted_at:null,id:u}),J=this.__getSpecialityName[Q];J&&(yield this.__http.post(`${process.env[J]}/medical-session/create-backdate-appointment-session`,{appointment_type_id:null==V?void 0:V.type_id,case_id:a,doctor_id:d,patient_id:c,session_type:1,visit_session_id:W},C));const X=this.shallowCopy(yield this.__repo.findOne({id:V.id},{include:[{as:"appointmentStatus",model:g,required:!1,where:{deleted_at:null}},{as:"patient",model:Et,required:!1,where:{deleted_at:null}},{as:"caseType",model:Wt,required:!1,where:{deleted_at:null}}]})),Z=new Date(X.scheduled_date_time);Z.setMinutes(Z.getMinutes()+X.time_slots),A=this.shallowCopy(yield this.__kioskContactPersonTypesRepo.findOne({slug:"self"})),N=this.shallowCopy(yield this.__kioskContactPersonRepo.findOne({case_id:X.case_id,contact_person_type_id:A.id,deleted_at:null}));const ee=yield this.getAppointmentById({appointment_id:[X.id],user_id:h},t);return this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:ee,action_point:"created"},C),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:[X.id]},C),V}throw Error("Something went wrong")})))))})),this.createBackDatedAppointmentsV1=(e,t)=>kn(this,void 0,void 0,(function*(){var i;const{appointment_type_id:a,case_id:n,case_type_id:o,comments:s,billable:l,confirmation_status:d,doctor_id:_,is_speciality_base:r,facility_location_id:c,patient_id:p,priority_id:u,speciality_id:m,start_date_time:y,time_slot:h,user_id:f,is_soft_registered:v,cpt_codes:b,transportation:S,technician_id:I,template_id:D,template_type:w,is_transportation:O,physician_id:T,reading_provider_id:A,cd_image:N,time_zone:C}=e;if(!_)throw un("APPOINTMENT_WITHOUT_DOCTOR");const{is_active:R}=this.shallowCopy(yield this.__kioskCaseRepo.findById(n));if(!R)throw un("APPOINTMENT_CAN_NOT_CREATED_ON_PREVIOUS_DATE");const E=v||!1;let L=null,k=null;const P={headers:{Authorization:t}},{slug:j}=this.shallowCopy(yield this.__caseTypesRepo.findById(o));if(!(yield this.__appoitmentTypeRepo.findOne({deleted_at:null,id:a},{})))throw un("INVALID_APPOINTMENT_TYPE_ID");const B=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({deleted_at:null,slug:"completed"})),U=this.shallowCopy(yield this.__specialityRepo.findOne({deleted_at:null,id:m},{include:[{as:"specialityVisitType",model:Y,where:{speciality_id:m,appointment_type_id:a,deleted_at:null}}]}));if(!U&&!Object.keys(U).length)throw un("NO_SPECIALITY_FOUND");const{is_transferring_case:q}=this.shallowCopy(yield this.__kioskCaseRepo.findOne({id:n},{attributes:["is_transferring_case"]})),{time_slot:F}=U||{};let M,$=[];const V=h||F,x=h?h/F:1,K={formatDates:[new Date(y)],startDateTime:y,cptCodes:b,desiredTimeSlot:V,doctorId:_,specialityId:m,caseId:n,patientId:p,time_zone:C,speciality:U,facilityLocationId:c},z=yield this.multipleAppointmentsAgainstCptCode(K);for(const e of z){const{startDateTime:y,cptCodes:v}=e,b=new Date(y);try{const e=yield _a.transaction();try{const t=new Date(b);null==t||t.setMinutes((null==t?void 0:t.getMinutes())+V);const{id:i}=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({slug:"no_show"})),g=yield this.checkExitAppointment(n,U,a,y,h,i),I=this.shallowCopy(yield this.__medicalIdentifierRepo.findOne({deleted_at:null,user_id:_,wcb_auth:!0}));if(!("worker_compensation"!==j||I&&Object.keys(I).length))throw un("PROVIDER_DOES_NOT_HAVE_WC_AUTH");const D=this.shallowCopy(yield this.__availableDoctorRepo.findOne({deleted_at:null,doctor_id:_,facility_location_id:c},{include:[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[jn.gte]:t},start_date:{[jn.lte]:b}}},{as:"availableSpeciality",model:it,required:!0,where:{speciality_id:m,deleted_at:null}}]}));if(!D||!Object.keys(D).length)throw un("ASSIGNMENT_NOT_FOUND");const{dateList:w}=D||{},C={available_speciality_id:null==D?void 0:D.available_speciality_id,date_list_id:w[0].id,end_date:w[0].end_date,id:D.id,no_of_slots:w[0].no_of_slots,start_date:w[0].start_date},R=new Date(b),L=this.getTimeSlotOfAssignment(C);R.setMinutes(R.getMinutes()+L*x);const k=this.shallowCopy(yield this.__repo.findAll({available_doctor_id:C.id,cancelled:!1,deleted_at:null,pushed_to_front_desk:!1})),F=this.getFreeSlotsForAssignment(C,k,U.over_booking+1,L),$=null==F?void 0:F.find((e=>{const t=new Date(e.startDateTime),i=new Date(e.startDateTime);if(i.setMinutes(i.getMinutes()+L),t.getTime()<=b.getTime()&&b.getTime()<i.getTime()&&e.count>0)return e}));if(!$||!Object.keys($).length)throw un("NO_SLOTS_REMAINING");const K=this.shallowCopy(yield this.__unAvailableDoctorRepo.findOne({[jn.or]:[{[jn.and]:[{approval_status:1,deleted_at:null,doctor_id:_,end_date:{[jn.gt]:R},start_date:{[jn.lte]:b}}]},{[jn.and]:[{approval_status:1,deleted_at:null,doctor_id:_,start_date:{[jn.gte]:b,[jn.lt]:R}}]}]}));if(K&&Object.keys(K).length)throw un("NO_PROVIDER_AVAILABLE");const z={caseId:n,patientId:p,appointmentTypeId:a,specialityId:m,noShowId:i,config:P};yield this.checkVisitTypes(z,q,g),M=this.shallowCopy(yield this.__repo.create({available_doctor_id:null==C?void 0:C.id,available_speciality_id:null==C?void 0:C.available_speciality_id,billable:l,case_id:n,case_type_id:o,chartNo:p,comments:s,confirmation_status:d,created_by:f,date_list_id:null==C?void 0:C.date_list_id,is_speciality_base:r,patient_id:p,priority_id:u||null,scheduled_date_time:b,status_id:B.id,time_slots:L*x,type_id:a,is_soft_registered:E,is_active:!E,is_transportation:null!=O?O:null,physician_id:null!=T?T:null,reading_provider_id:A,cd_image:N},e)),S&&S.length&&(yield this.addTransportations(M.id,S,e)),v&&v.length&&(yield this.addAppointmentsCptCodes(M.id,v,e)),yield e.commit()}catch(t){throw yield e.rollback(),t}let C;try{const e=this.shallowCopy(yield this.__http.get(`${process.env.KIOSK_URL}case-patient-session-statuses`,Object.assign(Object.assign({},P),{params:{slug:"checked_out"}}))),{result:{data:t}}=e||{};C=yield this.__http.post(`${process.env.KIOSK_URL}case-patient-session`,{case_id:n,status_id:null===(i=t[0])||void 0===i?void 0:i.id,appointment_id:M.id,trigger_socket:!0},P)}catch(e){throw yield this.deleteAppointmentById(M.id,f),e}const{result:{data:R}}=C;let F;try{const e={appointment_id:M.id,appointment_type_id:a,case_id:n,created_by:f,doctor_id:_,facility_location_id:c,patient_id:p,speciality_id:m,visit_date:new Date(y),visit_session_state_id:1,technician_id:I,template_id:D,template_type:w};F=yield this.__http.post(`${process.env.VISIT_DESK_URL}vd/visit_session/create`,Object.assign({},e),P)}catch(e){throw yield this.deleteAppointmentById(M.id,f),yield this.deleteKioskSessionByAppointmentId(R.id,f),e}const{result:{data:{id:K}}}=F,{speciality_key:z,name:G}=yield this.__specialityRepo.findOne({deleted_at:null,id:m}),H=this.__getSpecialityName[z];H&&(yield this.__http.post(`${process.env[H]}/medical-session/create-backdate-appointment-session`,{appointment_type_id:null==M?void 0:M.type_id,case_id:n,doctor_id:_,patient_id:p,session_type:1,visit_session_id:K},P)),"medical_doctor"==z&&(yield this.__http.post(`${process.env.FRONT_DESK_URL}md/medical_sessions/save`,{appointment_id:M.id,doctorId:_,provider_id:_,patientId:p,caseId:n,speciality:G,speciality_id:m,facility_location_id:c,finalize_visit:!1,technician_id:null!=I?I:null,template_id:D,template_type:w,appointment_type_id:null==M?void 0:M.type_id},P));const Y=this.shallowCopy(yield this.__repo.findOne({id:M.id},{include:[{as:"appointmentStatus",model:g,required:!1,where:{deleted_at:null}},{as:"patient",model:Et,required:!1,where:{deleted_at:null}},{as:"caseType",model:Wt,required:!1,where:{deleted_at:null}}]})),W=new Date(Y.scheduled_date_time);W.setMinutes(W.getMinutes()+Y.time_slots),L=this.shallowCopy(yield this.__kioskContactPersonTypesRepo.findOne({slug:"self"})),k=this.shallowCopy(yield this.__kioskContactPersonRepo.findOne({case_id:Y.case_id,contact_person_type_id:L.id,deleted_at:null})),k&&k.email&&this.sentEmailForAppointment({appointmentId:Y.id,appointmentStatus:Y.appointmentStatus.name,caseId:Y.case_id,caseType:Y.caseType.name,confirmationStatus:Y.confirmation_status,email:k.email,emailTitle:"Create Appointment",endDateTime:new Date(W),patientLastName:Y.patient.last_name,reason:"created",scheduledDateTime:new Date(Y.scheduled_date_time),timeSlot:Y.time_slots}),this.__http.emailGenator(`${process.env.EMAIL_TEMPLATE_GENERATOR_URL}appointment/generate-data-with-multiple-context`,{appointment_ids:[Y.id],email_title:"Appointment Created"},P);const Q=yield this.getAppointmentById({appointment_id:[Y.id],user_id:f},t);this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:Q,action_point:"created"},P),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:[Y.id]},P),$.push(M)}catch(e){throw e}}let G=yield this.checkErrorMultipleCptAppointments(b,z,!0,_,U);return Object.assign(Object.assign({msg_alert_1:G},$[0]),{other_appointments:$.length>1?$.slice(1,$.length):[]})})),this.deleteAppointments=(e,t)=>kn(this,void 0,void 0,(function*(){const{appointment_ids:i,comments:a,case_ids:n,from_kiosk:o,user_id:s=Number(process.env.USERID)}=e,l=yield this.__repo.updateByIds(i,{cancelled:0,comments:a,deleted_at:new Date,origin_facility_id:null,pushed_to_front_desk:0,target_facility_id:null,updated_at:new Date,updated_by:s}),d={headers:{Authorization:t}};this.__http.emailGenator(`${process.env.EMAIL_TEMPLATE_GENERATOR_URL}appointment/generate-data-with-multiple-context`,{appointment_ids:i,email_title:"Appointment Deleted"},d),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:i},d);const _=yield this.getAppointmentById({appointment_id:i,user_id:s},t);return this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:_,action_point:"deleted",deleted_appointment_ids:i},d),yield this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments`,{},d),l})),this.forwardAppointmentsToFD=(e,t)=>kn(this,void 0,void 0,(function*(){const{appointment_ids:i,user_id:a,origin_clinic_id:n,target_clinic_id:o,pushed_to_front_desk_comments:s}=e,l=[],d=this.shallowCopy(yield this.__appoitmentTypeRepo.findOne({slug:"initial_evaluation"})),_=this.shallowCopy(yield this.__appointmentStatusRepo.findAll({[jn.or]:[{slug:"scheduled"},{slug:"re_scheduled"},{slug:"arrived"},{slug:"completed"}]},{attributes:["id"]})).map((e=>e.id)),r=this.shallowCopy(yield this.__repo.findAll({id:i,type_id:d.id},{include:{as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null}}}));if(r&&r.length){const e=r.map((e=>e.availableSpeciality.speciality_id)),t=r.map((e=>e.case_id)),a=r.map((e=>e.patient_id)),n=this.shallowCopy(yield this.__repo.findOne({id:{[jn.ne]:i},case_id:t,patient_id:a,deleted_at:null,cancelled:!1,pushed_to_front_desk:!1,status_id:_,type_id:{[jn.ne]:d.id}},{include:{as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null,speciality_id:e}}}));if(n&&Object.keys(n).length)throw un("PATIENT_APPOINTMENT_EXIST")}n&&o&&([].push(n),n!==o&&l.push(o));const c=this.shallowCopy(yield this.__modelHasRolesRepo.findOne({model_id:a},{include:{model:he,as:"role",required:!1}})),{role:p,role:{slug:u}}=c;if(p&&"super_admin"!==u&&this.shallowCopy(yield this.__userFacilityRepo.findAll({facility_location_id:{[jn.in]:l},user_id:a,deleted_at:null},{logging:!0})).length!==l.length)throw un("NO_SUPER_ADMIN");const m={headers:{Authorization:t}},{status:y}=yield this.__http.put(`${process.env.KIOSK_URL}case-patient-session/remove-patient-sessions`,{appointment_ids:i,trigger_socket:!0},m);if(200!==y)throw un("ERROR_FROM_KIOSK");const h=yield this.__repo.updateByIds(i,{origin_facility_id:n,target_facility_id:o,pushed_to_front_desk:1,pushed_to_front_desk_comments:s,updated_by:a,updated_at:new Date,cancelled:0}),f=yield this.getAppointmentById({appointment_id:i,user_id:a},t);return this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:f,action_point:"deleted",deleted_appointment_ids:i},m),this.__http.emailGenator(`${process.env.EMAIL_TEMPLATE_GENERATOR_URL}appointment/generate-data-with-multiple-context`,{appointment_ids:i,email_title:"Appointment Forwarded to Frontdesk"},m),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:i},m),h})),this.getAll=(e,t)=>kn(this,void 0,void 0,(function*(){const{page:t,per_page:i,id:a}=e||{};if(a)return this.__repo.findById(a,{include:[{as:"dateList",include:[{as:"availableDoctor",include:[{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:it,required:!1,where:{deleted_at:null}},{as:"facilityLocations",include:{as:"facility",model:Ut,required:!1,where:{deleted_at:null}},model:Oe,required:!1,where:{deleted_at:null}},{as:"doctor",attributes:{exclude:["password"]},include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:[{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},{as:"facilityLocation",include:{as:"facility",model:Ut,required:!1},model:Oe,required:!1,where:{deleted_at:null}}],model:it,required:!1,where:{deleted_at:null}}],model:qe,required:!0,where:{deleted_at:null}},{as:"appointmentStatus",model:g,required:!1,where:{deleted_at:null}},{as:"appointmentType",model:J,required:!1,where:{deleted_at:null}}]});const n=null!=t?t:1,o=null!=i?i:20;return this.__repo.customAppointmentpaginate({},n,o,{})})),this.getAppointments=(e,t)=>kn(this,void 0,void 0,(function*(){const{appointment_type:i,filters:a,page:n,paginate:o,user_id:s=Number(process.env.USERID),per_page:l}=e,{end_date:d,patient_ids:_,patient_name:r,case_ids:c,doctor_ids:p,facility_location_ids:u,start_date:m,appointment_type_ids:y,appointment_status_ids:h,speciality_ids:f,case_type_ids:v,patient_status_ids:g,created_by_ids:b,updated_by_ids:S,created_at:I,updated_at:D,comments:w,filter_with_or:O}=a,T=null==i?void 0:i.toUpperCase();if(!["CANCELLED","SCHEDULED","RESCHEDULED","PATIENT"].includes(T))throw new Error("Invalid Listing type provided!");const A=O?"or":"and",N=this[this.__genericAppointmentListing[`${T}`]]({}),C=this.generateWhereClauseForGenericAPI({createdAt:I,createdByIds:b,updatedAt:D,updatedByIds:S,patientStatusIds:g,facilityLocationIds:u,specialityIds:f,doctorIds:p,patientId:_,patientName:r,appointmentTypeIds:y,appointmentStatusIds:h,caseTypeIds:v,caseIds:c,startDate:m,endDate:d,appointmentListingType:T,comments:w,filterType:A,page:n,perPage:l,paginate:o}),R=this.generateGenericAppointmentRawQueryCount(C),[E]=this.shallowCopy(yield _a.query(R)),[L]=E,k=this.generateGenericAppointmentRawQuery(Object.assign(Object.assign({},C),{dynamicQueryClause:N})),[P]=this.shallowCopy(yield _a.query(k)),j={headers:{Authorization:t}};return c&&c.length&&this.__http.put(`${process.env.KIOSK_URL}case/search-count`,{ids:c},j),o?{docs:P,page_number:n,pages:Math.ceil(L.total_count/l),total:L.total_count}:P})),this.getAllAppointmentPushedToFrontDesk=(e,t)=>kn(this,void 0,void 0,(function*(){const{facility_location_ids:i,start_date:a,appointment_type_ids:n,doctor_ids:o,speciality_ids:s,case_type_ids:l,end_date:d,user_id:_=Number(process.env.USERID),per_page:r,page:c,case_ids:p}=e,u={headers:{Authorization:t}},m=new Date(a),y=new Date(d),h={deleted_at:null,pushed_to_front_desk:!0,target_facility_id:{[jn.in]:i},updated_at:{[jn.gte]:m,[jn.lte]:y}};if(p&&p.length){h.case_id={[jn.in]:p};const{status:e}=yield this.__http.put(`${process.env.KIOSK_URL}case/search-count`,{ids:p},u);if(200!==e)throw un("ERROR_WHILE_UPDATING_STATUS")}n&&n.length&&(h.type_id={[jn.in]:n});const f={deleted_at:null};(null==s?void 0:s.length)&&(f.id={[jn.in]:s});const v={deleted_at:null};(null==l?void 0:l.length)&&(v.id={[jn.in]:l});const b={deleted_at:null};(null==o?void 0:o.length)&&(b.id={[jn.in]:o});const S=r||10,I=c||1,D=this.shallowCopy(yield this.__repo.customAppointmentpaginate({where:Object.assign({},h)},I,S,null,{include:[{as:"dateList",include:[{as:"availableDoctor",include:[{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!(!s||!s.length),where:Object.assign({},f)},model:it,required:!(!s||!s.length),where:{deleted_at:null}},{as:"doctor",attributes:{exclude:["password"]},include:[{as:"userBasicInfo",attributes:["id","first_name","last_name","middle_name","user_id"],model:Ce,required:!1,where:{deleted_at:null}},{model:Mt,attributes:["id"],required:!1,include:{as:"billingTitle",required:!1,attributes:["id","name"],model:xt,where:{deleted_at:null}},where:{deleted_at:null}}],model:le,required:!0,where:Object.assign({},b)}],model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!(!s||!s.length),where:Object.assign({},f)},model:it,required:!1,where:{deleted_at:null}}],model:qe,required:!0,where:{deleted_at:null}},{as:"caseType",model:Wt,required:!0,where:Object.assign({},v)},{as:"targetFacility",include:{as:"facility",model:Ut,required:!1,where:{deleted_at:null}},model:Oe,required:!1,where:{deleted_at:null}},{as:"originFacility",include:{as:"facility",model:Ut,required:!1,where:{deleted_at:null}},model:Oe,required:!1,where:{deleted_at:null}},{as:"patient",attributes:["id","first_name","last_name","middle_name","profile_avatar","dob"],model:Et,required:!1},{as:"appointmentType",attributes:["id","name","slug","qualifier"],model:J,required:!1,where:{deleted_at:null}},{as:"appointmentStatus",attributes:["id","name","slug"],model:g,required:!1,where:{deleted_at:null}},{as:"updatedBy",include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!0,where:{deleted_at:null}}],order:[["updated_at","DESC"]]})),{docs:w,no_of_pages:O,total:T,page_number:A,is_last:N}=D||{};return w&&w.length?{docs:w,page_number:A,is_last:N,pages:O,total:T}:[]})),this.getAllAppointmentPushedToFrontDeskV1=(e,t)=>kn(this,void 0,void 0,(function*(){const{facility_location_ids:i,start_date:a,appointment_type_ids:n,doctor_ids:o,speciality_ids:s,case_type_ids:l,end_date:d,user_id:_=Number(process.env.USERID),per_page:r,page:c,paginate:p,case_ids:u}=e,m={headers:{Authorization:t}};if(u&&u.length){const{status:e}=yield this.__http.put(`${process.env.KIOSK_URL}case/search-count`,{ids:u},m);if(200!==e)throw un("ERROR_WHILE_UPDATING_STATUS")}const y=this.rawQueryForAppointmentPushedToFrontDeskCount({caseIds:u,facilityLocationIds:i,startDateString:a,endDateString:d,appointmentTypeIds:n,doctorIds:o,specialityIds:s,caseTypeIds:l,page:c,perPage:r,paginate:!1}),[h]=this.shallowCopy(yield _a.query(y)),f=h.length,v=this.rawQueryForAppointmentPushedToFrontDesk({caseIds:u,facilityLocationIds:i,startDateString:a,endDateString:d,appointmentTypeIds:n,doctorIds:o,specialityIds:s,caseTypeIds:l,page:c,perPage:r,paginate:p}),[g]=this.shallowCopy(yield _a.query(v)),b=this.filterNonNull(null==g?void 0:g.map((e=>{let t={},i={},a={},n={},o={},s={},l={},d={},_={},r={},c={},p={},u={},m={},y={},h={},f={},v={},g={},b={};return e.medicalIdentifier_id&&(g={id:e.medicalIdentifier_id,clinic_name:e.medicalIdentifier_clinic_name}),e.billingTitles_id&&(b={id:e.billingTitles_id,name:e.billingTitles_name,description:e.billingTitles_description}),(null==e?void 0:e.updatedBy_id)&&(_={created_at:null==e?void 0:e.updatedBy_created_at,created_by:null==e?void 0:e.updatedBy_created_by,deleted_at:null==e?void 0:e.updatedBy_deleted_at,email:null==e?void 0:e.updatedBy_email,id:null==e?void 0:e.updatedBy_id,is_loggedin:null==e?void 0:e.updatedBy_is_loggedIn,remember_token:null==e?void 0:e.updatedBy_remember_token,reset_key:null==e?void 0:e.updatedBy_reset_key,status:null==e?void 0:e.updatedBy_status,updated_at:null==e?void 0:e.updatedBy_updated_at,updated_by:null==e?void 0:e.updatedBy_updated_by}),(null==e?void 0:e.updatedByUserBasicInfo_id)&&(r={address:null==e?void 0:e.updatedByUserBasicInfo_address,apartment_suite:null==e?void 0:e.updatedByUserBasicInfo_apartment_suite,area_id:null==e?void 0:e.updatedByUserBasicInfo_area_id,biography:null==e?void 0:e.updatedByUserBasicInfo_biography,cell_no:null==e?void 0:e.updatedByUserBasicInfo_cell_no,city:null==e?void 0:e.updatedByUserBasicInfo_city,created_at:null==e?void 0:e.updatedByUserBasicInfo_created_at,created_by:null==e?void 0:e.updatedByUserBasicInfo_created_by,date_of_birth:null==e?void 0:e.updatedByUserBasicInfo_date_of_birth,deleted_at:null==e?void 0:e.updatedByUserBasicInfo_deleted_at,department_id:null==e?void 0:e.updatedByUserBasicInfo_department_id,designation_id:null==e?void 0:e.updatedByUserBasicInfo_designation_id,emergency_phone:null==e?void 0:e.updatedByUserBasicInfo_emergency_phone,employed_by_id:null==e?void 0:e.updatedByUserBasicInfo_employed_by_id,employment_type_id:null==e?void 0:e.updatedByUserBasicInfo_employment_type_id,extension:null==e?void 0:e.updatedByUserBasicInfo_extension,fax:null==e?void 0:e.updatedByUserBasicInfo_fax,file_id:null==e?void 0:e.updatedByUserBasicInfo_file_id,first_name:null==e?void 0:e.updatedByUserBasicInfo_first_name,from:null==e?void 0:e.updatedByUserBasicInfo_from,gender:null==e?void 0:e.updatedByUserBasicInfo_gender,hiring_date:null==e?void 0:e.updatedByUserBasicInfo_hiring_date,id:null==e?void 0:e.updatedByUserBasicInfo_id,last_name:null==e?void 0:e.updatedByUserBasicInfo_last_name,middle_name:null==e?void 0:e.updatedByUserBasicInfo_middle_name,profile_pic:null==e?void 0:e.updatedByUserBasicInfo_profile_pic,profile_pic_url:null==e?void 0:e.updatedByUserBasicInfo_profile_pic_url,social_security:null==e?void 0:e.updatedByUserBasicInfo_social_security,state:null==e?void 0:e.updatedByUserBasicInfo_state,title:null==e?void 0:e.updatedByUserBasicInfo_title,to:null==e?void 0:e.updatedByUserBasicInfo_to,updated_at:null==e?void 0:e.updatedByUserBasicInfo_updated_at,updated_by:null==e?void 0:e.updatedByUserBasicInfo_updated_by,user_id:null==e?void 0:e.updatedByUserBasicInfo_user_id,work_phone:null==e?void 0:e.updatedByUserBasicInfo_work_phone,zip:null==e?void 0:e.updatedByUserBasicInfo_zip}),(null==e?void 0:e.doctorBasicInfo_id)&&(d={id:null==e?void 0:e.doctorBasicInfo_id,first_name:null==e?void 0:e.doctorBasicInfo_first_name,middle_name:null==e?void 0:e.doctorBasicInfo_middle_name,last_name:null==e?void 0:e.doctorBasicInfo_last_name,date_of_birth:null==e?void 0:e.doctorBasicInfo_date_of_birth,gender:null==e?void 0:e.doctorBasicInfo_gender,user_id:null==e?void 0:e.doctorBasicInfo_user_id,area_id:null==e?void 0:e.doctorBasicInfo_area_id,title:null==e?void 0:e.doctorBasicInfo_title,cell_no:null==e?void 0:e.doctorBasicInfo_cell_no,address:null==e?void 0:e.doctorBasicInfo_address,work_phone:null==e?void 0:e.doctorBasicInfo_work_phone,fax:null==e?void 0:e.doctorBasicInfo_fax,extension:null==e?void 0:e.doctorBasicInfo_extension,home_phone:null==e?void 0:e.doctorBasicInfo_home_phone,emergency_name:null==e?void 0:e.doctorBasicInfo_emergency_name,emergency_phone:null==e?void 0:e.doctorBasicInfo_emergency_phone,biography:null==e?void 0:e.doctorBasicInfo_biography,hiring_date:null==e?void 0:e.doctorBasicInfo_hiring_date,from:null==e?void 0:e.doctorBasicInfo_from,to:null==e?void 0:e.doctorBasicInfo_to,profile_pic:null==e?void 0:e.doctorBasicInfo_profile_pic,city:null==e?void 0:e.doctorBasicInfo_city,state:null==e?void 0:e.doctorBasicInfo_state,zip:null==e?void 0:e.doctorBasicInfo_zip,social_security:null==e?void 0:e.doctorBasicInfo_social_security,profile_pic_url:null==e?void 0:e.doctorBasicInfo_profile_pic_url,apartment_suite:null==e?void 0:e.doctorBasicInfo_apartment_suite}),(null==e?void 0:e.appointment_id)&&(l={id:null==e?void 0:e.appointment_id,key:null==e?void 0:e.appointment_key,scheduled_date_time:null==e?void 0:e.appointment_scheduled_date_time,evaluation_date_time:null==e?void 0:e.appointment_evaluation_date_time,time_slots:null==e?void 0:e.appointment_time_slot,appointment_title:null==e?void 0:e.appointment_title,action_performed:null==e?void 0:e.appointment_action_performed,confirmation_status:null==e?void 0:e.appointment_confirmation_status,cancelled:null==e?void 0:e.appointment_cancelled,pushed_to_front_desk:null==e?void 0:e.appointment_pushed_to_front_dest,comments:null==e?void 0:e.appointment_comments,by_health_app:null==e?void 0:e.appointment_by_health_app,date_list_id:null==e?void 0:e.appointment_date_list_id,target_facility_id:null==e?void 0:e.appointment_target_facility_id,origin_facility_id:null==e?void 0:e.appointment_origin_facility_id,case_id:null==e?void 0:e.appointment_case_id,case_type_id:null==e?void 0:e.appointment_case_type_id,patient_id:null==e?void 0:e.appointment_patient_id,type_id:null==e?void 0:e.appointment_type_id,status_id:null==e?void 0:e.appointment_status_id,priority_id:null==e?void 0:e.appointment_priority_id,available_doctor_id:null==e?void 0:e.appointment_available_doctor_id,available_speciality_id:null==e?void 0:e.appointment_available_speciality_id,billable:null==e?void 0:e.appointment_billable,pushed_to_front_desk_comments:null==e?void 0:e.appointment_pushed_to_front_desk_comments,cancelled_comments:null==e?void 0:e.appointment_cancelled_comments,is_speciality_base:null==e?void 0:e.appointment_is_speciality_base,created_by:null==e?void 0:e.appointment_created_by,updated_by:null==e?void 0:e.appointment_updated_by,created_at:null==e?void 0:e.appointment_created_at,updated_at:null==e?void 0:e.appointment_updated_at,deleted_at:null==e?void 0:e.appointment_deleted_at,is_redo:null==e?void 0:e.appointment_is_redo,is_active:null==e?void 0:e.appointment_is_active,is_soft_registered:null==e?void 0:e.appointment_is_soft_registered,physician_id:null==e?void 0:e.appointment_physician_id,technician_id:null==e?void 0:e.appointment_technician_id,reading_provider_id:null==e?void 0:e.appointment_reading_provider_id,cd_image:null==e?void 0:e.appointment_cd_image,is_transportation:null==e?void 0:e.appointment_is_transportation}),(null==e?void 0:e.patient_id)&&(c={age:null==e?void 0:e.patient_age,cell_phone:null==e?void 0:e.patient_cell_phone,created_at:null==e?void 0:e.patient_created_at,created_by:null==e?void 0:e.patient_created_by,deleted_at:null==e?void 0:e.patient_deleted_at,dob:null==e?void 0:e.patient_dob,first_name:null==e?void 0:e.patient_first_name,gender:null==e?void 0:e.patient_gender,height_ft:null==e?void 0:e.patient_height_ft,height_in:null==e?void 0:e.patient_height_in,home_phone:null==e?void 0:e.patient_home_phone,id:null==e?void 0:e.patient_id,is_law_enforcement_agent:null==e?void 0:e.patient_is_law_enforcement_agent,is_pregnant:null==e?void 0:e.patient_is_pregnant,key:null==e?void 0:e.patient_key,language:null==e?void 0:e.patient_language,last_name:null==e?void 0:e.patient_last_name,meritial_status:null==e?void 0:e.patient_meritial_status,middle_name:null==e?void 0:e.patient_middle_name,need_translator:null==e?void 0:e.patient_need_translator,notes:null==e?void 0:e.patient_notes,profile_avatar:null==e?void 0:e.patient_profile_avatar,ssn:null==e?void 0:e.patient_ssn,status:null==e?void 0:e.patient_status,updated_at:null==e?void 0:e.patient_updated_at,updated_by:null==e?void 0:e.patient_updated_by,weight_kg:null==e?void 0:e.patient_weight_kg,weight_lbs:null==e?void 0:e.patient_weight_lbs,work_phone:null==e?void 0:e.patient_work_phone}),(null==e?void 0:e.appointmentStatus_id)&&(u={created_at:null==e?void 0:e.appointmentStatus_created_at,created_by:null==e?void 0:e.appointmentStatus_created_by,deleted_at:null==e?void 0:e.appointmentStatus_deleted_at,id:null==e?void 0:e.appointmentStatus_id,name:null==e?void 0:e.appointmentStatus_name,slug:null==e?void 0:e.appointmentStatus_slug,updated_at:null==e?void 0:e.appointmentStatus_updated_at,updated_by:null==e?void 0:e.appointmentStatus_updated_by}),(null==e?void 0:e.availableSpeciality_id)&&(t={id:null==e?void 0:e.availableSpeciality_id,key:null==e?void 0:e.availableSpeciality_key,start_date:null==e?void 0:e.availableSpeciality_start_date,end_date:null==e?void 0:e.availableSpeciality_end_date,end_date_for_recurrence:null==e?void 0:e.availableSpeciality_end_date_for_recurrence,no_of_doctors:null==e?void 0:e.availableSpeciality_no_of_doctors,no_of_slots:null==e?void 0:e.availableSpeciality_no_of_slots,end_after_occurences:null==e?void 0:e.availableSpeciality_end_after_occurences,number_of_entries:null==e?void 0:e.availableSpeciality_number_of_entries,speciality_id:null==e?void 0:e.availableSpeciality_speciality_id,facility_location_id:null==e?void 0:e.availableSpeciality_facility_location_id,recurrence_ending_criteria_id:null==e?void 0:e.availableSpeciality_recurrence_ending_criteria_id,deleted_at:null==e?void 0:e.availableSpeciality_deleted_at}),(null==e?void 0:e.availableSpecialityDoctor_id)&&(i={id:null==e?void 0:e.availableSpecialityDoctor_id,key:null==e?void 0:e.availableSpecialityDoctor_key,start_date:null==e?void 0:e.availableSpecialityDoctor_start_date,end_date:null==e?void 0:e.availableSpecialityDoctor_end_date,no_of_slots:null==e?void 0:e.availableSpecialityDoctor_no_of_slots,doctor_id:null==e?void 0:e.availableSpecialityDoctor_doctor_id,facility_location_id:null==e?void 0:e.availableSpecialityDoctor_facility_location_id,available_speciality_id:null==e?void 0:e.availableSpecialityDoctor_available_speciality_id,supervisor_id:null==e?void 0:e.availableSpecialityDoctor_supervisor_id,is_provider_assignment:null==e?void 0:e.availableSpecialityDoctor_is_provider_assignment}),(null==e?void 0:e.doctor_id)&&(o={id:null==e?void 0:e.doctor_id,email:null==e?void 0:e.doctor_email,reset_key:null==e?void 0:e.doctor_reset_key,status:null==e?void 0:e.doctor_status,is_loggedIn:null==e?void 0:e.doctor_is_loggedIn,remember_token:null==e?void 0:e.doctor_remember_token}),(null==e?void 0:e.facilityLocation_id)&&(a={id:null==e?void 0:e.facilityLocation_id,facility_id:null==e?void 0:e.facilityLocation_facility_id,name:null==e?void 0:e.facilityLocation_name,city:null==e?void 0:e.facilityLocation_city,state:null==e?void 0:e.facilityLocation_state,zip:null==e?void 0:e.facilityLocation_zip,region_id:null==e?void 0:e.facilityLocation_region_id,address:null==e?void 0:e.facilityLocation_address,phone:null==e?void 0:e.facilityLocation_phone,fax:null==e?void 0:e.facilityLocation_fax,email:null==e?void 0:e.facilityLocation_email,office_hours_start:null==e?void 0:e.facilityLocation_office_hours_start,office_hours_end:null==e?void 0:e.facilityLocation_office_hours_end,lat:null==e?void 0:e.facilityLocation_lat,long:null==e?void 0:e.facilityLocation_long,day_list:null==e?void 0:e.facilityLocation_day_list,floor:null==e?void 0:e.facilityLocation_floor,place_of_service_id:null==e?void 0:e.facilityLocation_place_of_service_id,qualifier:null==e?void 0:e.facilityLocation_qualifier,ext_no:null==e?void 0:e.facilityLocation_ext_no,cell_no:null==e?void 0:e.facilityLocation_cell_no,is_main:null==e?void 0:e.facilityLocation_is_main,same_as_provider:null==e?void 0:e.facilityLocation_same_as_provider,dean:null==e?void 0:e.facilityLocation_dean}),(null==e?void 0:e.specialities_id)&&(s={id:null==e?void 0:e.specialities_id,name:null==e?void 0:e.specialities_name,description:null==e?void 0:e.specialities_description,time_slot:null==e?void 0:e.specialities_time_slot,over_booking:null==e?void 0:e.specialities_over_booking,has_app:null==e?void 0:e.specialities_has_app,speciality_key:null==e?void 0:e.specialities_speciality_key,comments:null==e?void 0:e.specialities_comments,default_name:null==e?void 0:e.specialities_default_name,qualifier:null==e?void 0:e.specialities_qualifier,is_defualt:null==e?void 0:e.specialities_is_defualt,is_available:null==e?void 0:e.specialities_is_available,is_create_appointment:null==e?void 0:e.specialities_is_create_appointment,is_editable:null==e?void 0:e.specialities_is_editable}),(null==e?void 0:e.facilities_id)&&(n={created_at:null==e?void 0:e.facilities_created_at,created_by:null==e?void 0:e.facilities_created_by,deleted_at:null==e?void 0:e.facilities_deleted_at,id:null==e?void 0:e.facilities_id,name:null==e?void 0:e.facilities_name,slug:null==e?void 0:e.facilities_slug,qualifier:null==e?void 0:e.facilities_qualifier,updated_at:null==e?void 0:e.facilities_updated_at,updated_by:null==e?void 0:e.facilities_updated_by}),(null==e?void 0:e.caseTypes_id)&&(m={id:null==e?void 0:e.caseTypes_id,key:null==e?void 0:e.caseTypes_key,name:null==e?void 0:e.caseTypes_name,slug:null==e?void 0:e.caseTypes_slug,description:null==e?void 0:e.caseTypes_description,comments:null==e?void 0:e.caseTypes_comments,remainder_days:null==e?void 0:e.caseTypes_remainder_days,created_by:null==e?void 0:e.caseTypes_created_by,updated_by:null==e?void 0:e.caseTypes_udpated_by,created_at:null==e?void 0:e.caseTypes_created_at,updated_at:null==e?void 0:e.caseTypes_updated_at,deleted_at:null==e?void 0:e.caseTypes_deleted_at}),(null==e?void 0:e.targetFacilityLocation_id)&&(y={id:null==e?void 0:e.targetFacilityLocation_id,facility_id:null==e?void 0:e.targetFacilityLocation_facility_id,name:null==e?void 0:e.targetFacilityLocation_name,city:null==e?void 0:e.targetFacilityLocation_city,state:null==e?void 0:e.targetFacilityLocation_state,zip:null==e?void 0:e.targetFacilityLocation_zip,region_id:null==e?void 0:e.targetFacilityLocation_region_id,address:null==e?void 0:e.targetFacilityLocation_address,phone:null==e?void 0:e.targetFacilityLocation_phone,fax:null==e?void 0:e.targetFacilityLocation_fax,email:null==e?void 0:e.targetFacilityLocation_email,office_hours_start:null==e?void 0:e.targetFacilityLocation_office_hours_start,office_hours_end:null==e?void 0:e.targetFacilityLocation_office_hours_end,lat:null==e?void 0:e.targetFacilityLocation_lat,long:null==e?void 0:e.targetFacilityLocation_long,day_list:null==e?void 0:e.targetFacilityLocation_day_list,floor:null==e?void 0:e.targetFacilityLocation_floor,place_of_service_id:null==e?void 0:e.targetFacilityLocation_place_of_service_id,qualifier:null==e?void 0:e.targetFacilityLocation_qualifier,ext_no:null==e?void 0:e.targetFacilityLocation_ext_no,cell_no:null==e?void 0:e.targetFacilityLocation_cell_no,is_main:null==e?void 0:e.targetFacilityLocation_is_main,same_as_provider:null==e?void 0:e.targetFacilityLocation_same_as_provider,created_by:null==e?void 0:e.targetFacilityLocation_created_by,updated_by:null==e?void 0:e.targetFacilityLocation_updated_by,created_at:null==e?void 0:e.targetFacilityLocation_created_at,updated_at:null==e?void 0:e.targetFacilityLocation_updated_at,deleted_at:null==e?void 0:e.targetFacilityLocation_deleted_at,dean:null==e?void 0:e.targetFacilityLocation_dean}),(null==e?void 0:e.targetFacilities_id)&&(h={created_at:null==e?void 0:e.targetFacilities_created_at,created_by:null==e?void 0:e.targetFacilities_created_by,deleted_at:null==e?void 0:e.targetFacilities_deleted_at,id:null==e?void 0:e.targetFacilities_id,name:null==e?void 0:e.targetFacilities_name,slug:null==e?void 0:e.targetFacilities_slug,qualifier:null==e?void 0:e.targetFacilities_qualifier,updated_at:null==e?void 0:e.targetFacilities_updated_at,updated_by:null==e?void 0:e.targetFacilities_updated_by}),(null==e?void 0:e.originFacilityLocation_id)&&(f={id:null==e?void 0:e.originFacilityLocation_id,facility_id:null==e?void 0:e.originFacilityLocation_facility_id,name:null==e?void 0:e.originFacilityLocation_name,city:null==e?void 0:e.originFacilityLocation_city,state:null==e?void 0:e.originFacilityLocation_state,zip:null==e?void 0:e.originFacilityLocation_zip,region_id:null==e?void 0:e.originFacilityLocation_region_id,address:null==e?void 0:e.originFacilityLocation_address,phone:null==e?void 0:e.originFacilityLocation_phone,fax:null==e?void 0:e.originFacilityLocation_fax,email:null==e?void 0:e.originFacilityLocation_email,office_hours_start:null==e?void 0:e.originFacilityLocation_office_hours_start,office_hours_end:null==e?void 0:e.originFacilityLocation_office_hours_end,lat:null==e?void 0:e.originFacilityLocation_lat,long:null==e?void 0:e.originFacilityLocation_long,day_list:null==e?void 0:e.originFacilityLocation_day_list,floor:null==e?void 0:e.originFacilityLocation_floor,place_of_service_id:null==e?void 0:e.originFacilityLocation_place_of_service_id,qualifier:null==e?void 0:e.originFacilityLocation_qualifier,ext_no:null==e?void 0:e.originFacilityLocation_ext_no,cell_no:null==e?void 0:e.originFacilityLocation_cell_no,is_main:null==e?void 0:e.originFacilityLocation_is_main,same_as_provider:null==e?void 0:e.originFacilityLocation_same_as_provider,created_by:null==e?void 0:e.originFacilityLocation_created_by,updated_by:null==e?void 0:e.originFacilityLocation_updated_by,created_at:null==e?void 0:e.originFacilityLocation_created_at,updated_at:null==e?void 0:e.originFacilityLocation_updated_at,deleted_at:null==e?void 0:e.originFacilityLocation_deleted_at,dean:null==e?void 0:e.originFacilityLocation_dean}),(null==e?void 0:e.originFacilities_id)&&(v={created_at:null==e?void 0:e.originFacilities_created_at,created_by:null==e?void 0:e.originFacilities_created_by,deleted_at:null==e?void 0:e.originFacilities_deleted_at,id:null==e?void 0:e.originFacilities_id,name:null==e?void 0:e.originFacilities_name,slug:null==e?void 0:e.originFacilities_slug,qualifier:null==e?void 0:e.originFacilities_qualifier,updated_at:null==e?void 0:e.originFacilities_updated_at,updated_by:null==e?void 0:e.originFacilities_updated_by}),(null==e?void 0:e.appointmentType_id)&&(p={id:null==e?void 0:e.appointmentType_id,name:null==e?void 0:e.appointmentType_name,slug:null==e?void 0:e.appointmentType_slug,description:null==e?void 0:e.appointmentType_description,is_all_cpt_codes:null==e?void 0:e.appointmentType_is_all_cpt_codes,enable_cpt_codes:null==e?void 0:e.appointmentType_enable_cpt_codes,qualifier:null==e?void 0:e.appointmentType_qualifier,created_by:null==e?void 0:e.appointmentType_created_by,updated_by:null==e?void 0:e.appointmentType_updated_by,created_at:null==e?void 0:e.appointmentType_created_at,updated_at:null==e?void 0:e.appointmentType_updated_at,deleted_at:null==e?void 0:e.appointmentType_deleted_at,is_editable:null==e?void 0:e.appointmentType_is_editable,avoid_checkedin:null==e?void 0:e.appointmentType_avoid_checkedin,is_reading_provider:null==e?void 0:e.appointmentType_is_reading_provider}),Object.assign(Object.assign({},l),{availableSpeciality:e.availableSpeciality_id?Object.assign(Object.assign({},t),{availableSpecialityDoctor:e.availableSpecialityDoctor_id?Object.assign(Object.assign({},i),{doctor:e.doctor_id?Object.assign(Object.assign({billingTitles:e.billingTitles_id?b:null},o),{doctorBasicInfo:e.doctorBasicInfo_id?d:null,medicalIdentifier:e.medicalIdentifier_id?g:null}):null}):null,facilityLocation:e.facilityLocation_id?Object.assign(Object.assign({},a),{facility:e.facilities_id?n:null}):null,speciality:e.specialities_id?s:null}):null,caseTypes:e.caseTypes_id?m:null,targetFacility:e.targetFacilityLocation_id?Object.assign(Object.assign({},y),{facility:e.targetFacilities_id?h:null}):null,originFacility:e.originFacilityLocation_id?Object.assign(Object.assign({},f),{facility:e.originFacilities_id?v:null}):null,patient:e.patient_id?c:null,appointmentType:e.appointmentType_id?p:null,appointmentStatus:e.appointmentStatus_id?u:null,updatedBy:e.updatedBy_id?Object.assign(Object.assign({},_),{userBasicInfo:e.updatedByUserBasicInfo_id?Object.assign({},r):null}):null})})));return p?{docs:b,page_number:c,pages:Math.ceil(f/r),total:f}:b})),this.getAllDoctorSpecialityAppointments=(e,t)=>kn(this,void 0,void 0,(function*(){const{date_time_range:t,facility_location_ids:i,speciality_ids:a,doctor_ids:n,user_id:o=Number(process.env.USERID)}=e,s=this.shallowCopy(yield this.__availableSpecialityRepo.findAll({facility_location_id:{[jn.in]:i},speciality_id:{[jn.in]:a}},{include:{as:"dateList",model:qe,required:!0,where:{[jn.or]:[{deleted_at:null,end_date:{[jn.gte]:t[0]},start_date:{[jn.lte]:t[0]}},{deleted_at:null,start_date:{[jn.gte]:t[0],[jn.lte]:t[1]}}]}}})),l=s.map((e=>e.id)),d=this.shallowCopy(yield this.__availableDoctorRepo.findAll({doctor_id:{[jn.in]:n},facility_location_id:{[jn.in]:i}},{include:{as:"dateList",model:qe,required:!0,where:{[jn.or]:[{deleted_at:null,end_date:{[jn.gte]:t[0]},start_date:{[jn.lte]:t[0]}},{deleted_at:null,start_date:{[jn.gte]:t[0],[jn.lte]:t[1]}}]}}})),_=d.map((e=>e.id)),r=this.shallowCopy(yield this.__facilityLocationRepo.findAll({deleted_at:null,id:{[jn.in]:i}}));if(r.map((e=>e.id)),!r||!r.length)throw un("NO_PRACTICES_FOUND");const c=this.shallowCopy(yield this.__userRepo.findOne({id:o},{include:{as:"colorCodes",include:{as:"type",model:Qe,where:{deleted_at:null,slug:"facility_location"}},model:Ze}}));if(!c||!Object.keys(c).length)throw un("LOGGED_IN_NOT_FOUND");const{colorCodes:p}=c||{},u=d.map((e=>{const{dateList:t}=e;return null==t?void 0:t.map((t=>({date_list_id:t.id,doctor_id:e.doctor_id,end_date:t.end_date,facility_location_id:e.facility_location_id,id:e.id,no_of_slots:t.no_of_slots,start_date:t.start_date,supervisor_id:e.supervisor_id})))})).flat(),m=([...s.map((e=>{const{dateList:t}=e;return null==t?void 0:t.map((t=>({date_list_id:t.id,end_date:t.end_date,facility_location_id:e.facility_location_id,id:e.id,no_of_doctors:t.no_of_doctors,no_of_slots:t.no_of_slots,speciality_id:e.speciality_id,start_date:t.start_date})))})).flat(),...u].map((e=>{const t=[];return i.includes(e.facility_location_id)&&t.push({date_list_id:e.date_list_id,doctor_id:null==e?void 0:e.doctor_id,end_date:null==e?void 0:e.end_date,id:null==e?void 0:e.id,speciality_id:null==e?void 0:e.speciality_id,start_date:null==e?void 0:e.start_date,supervisor_id:null==e?void 0:e.supervisor_id}),r.map((e=>{var i,a;return{assignments:t,color:null!==(a=null===(i=null==p?void 0:p.find((t=>t.object_id===e.id)))||void 0===i?void 0:i.code)&&void 0!==a?a:"#9d9d9d",facility_location_id:e.id,facility_location_name:e.name}}))})).flat(),this.shallowCopy(yield this.__visitSessionRepo.findAll({deleted_at:null,doctor_id:{[jn.notIn]:n},speciality_id:{[jn.in]:a}})));return this.shallowCopy(yield this.__repo.findAll({cancelled:!1,deleted_at:null,id:{[jn.notIn]:null==m?void 0:m.map((e=>e.appointment_id))},pushed_to_front_desk:!1,scheduled_date_time:{[jn.between]:[t[0],t[1]]},[jn.or]:[{available_speciality_id:{[jn.in]:l}},{available_doctor_id:{[jn.in]:_}}]},{include:[{as:"availableDoctor",include:[{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:it,required:!1,where:{deleted_at:null}},{as:"doctor",attributes:{exclude:["password"]},include:[{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}}],model:le,required:!1,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null}},{as:"priority",model:ee,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:it,required:!1,where:{deleted_at:null}},{as:"patient",model:Et,required:!1},{as:"kioskCasePatientSessions",model:B,required:!1,where:{deleted_at:null}},{as:"appointmentType",model:J,required:!1,where:{deleted_at:null}},{as:"appointmentStatus",model:g,required:!1,where:{deleted_at:null}},{as:"priority",model:ee,required:!1},{as:"appointmentVisit",include:{as:"visitState",model:$e,required:!1},model:Ke,required:!1,where:{deleted_at:null}}]})).map((e=>{var t,i,a,n,o,s,l,d,_,r,c,p,u,m,y,h,f,v,g,b,S,I,D,w,O,T,A,N,C,R;return{id:null==e?void 0:e.id,start_date_time:null==e?void 0:e.scheduled_date_time,comments:null==e?void 0:e.comments,evaluation_date_time:null==e?void 0:e.evaluation_date_time,available_speciality_id:null==e?void 0:e.available_speciality_id,available_doctor_id:null!==(t=e.available_doctor_id)&&void 0!==t?t:null,priority_id:null==e?void 0:e.priority_id,patient_id:null==e?void 0:e.patient_id,dob:(null===(i=null==e?void 0:e.patient)||void 0===i?void 0:i.dob)?Rn(null===(a=null==e?void 0:e.patient)||void 0===a?void 0:a.dob).format("MM-DD-YYYY"):null,time_slot:null==e?void 0:e.time_slots,case_id:null==e?void 0:e.case_id,appointment_title:null==e?void 0:e.appointment_title,appointment_type_id:null==e?void 0:e.type_id,appointment_duration:null==e?void 0:e.time_slots,picture:null==e?void 0:e.patient.profile_avatar,confirmation_status:null==e?void 0:e.confirmation_status,speciality_id:(null==e?void 0:e.available_doctor_id)?null===(o=null===(n=null==e?void 0:e.availableDoctor)||void 0===n?void 0:n.availableSpeciality)||void 0===o?void 0:o.speciality_id:null===(s=null==e?void 0:e.availableSpeciality)||void 0===s?void 0:s.speciality_id,facility_location_id:(null==e?void 0:e.available_doctor_id)?null===(l=null==e?void 0:e.availableDoctor)||void 0===l?void 0:l.facility_location_id:null===(d=null==e?void 0:e.availableSpeciality)||void 0===d?void 0:d.facility_location_id,first_name:null==e?void 0:e.patient.first_name,last_name:null===(_=null==e?void 0:e.patient)||void 0===_?void 0:_.last_name,middle_name:null===(r=null==e?void 0:e.patient)||void 0===r?void 0:r.middle_name,doctor_id:(null==e?void 0:e.available_doctor_id)&&null!==(p=null===(c=null==e?void 0:e.availableDoctor)||void 0===c?void 0:c.doctor_id)&&void 0!==p?p:null,doctor_last_name:(null==e?void 0:e.available_doctor_id)&&null!==(h=null===(y=null===(m=null===(u=null==e?void 0:e.availableDoctor)||void 0===u?void 0:u.doctor)||void 0===m?void 0:m.userBasicInfo)||void 0===y?void 0:y.middle_name)&&void 0!==h?h:null,doctor_middle_name:(null==e?void 0:e.available_doctor_id)&&null!==(b=null===(g=null===(v=null===(f=null==e?void 0:e.availableDoctor)||void 0===f?void 0:f.doctor)||void 0===v?void 0:v.userBasicInfo)||void 0===g?void 0:g.last_name)&&void 0!==b?b:null,doctor_first_name:(null==e?void 0:e.available_doctor_id)&&null!==(w=null===(D=null===(I=null===(S=null==e?void 0:e.availableDoctor)||void 0===S?void 0:S.doctor)||void 0===I?void 0:I.userBasicInfo)||void 0===D?void 0:D.first_name)&&void 0!==w?w:null,visit_session_state_slug:(null===(O=null==e?void 0:e.appointmentVisit)||void 0===O?void 0:O.visitState)?null==e?void 0:e.appointmentVisit.visitState.slug:null,visit_session_state_name:(null===(T=null==e?void 0:e.appointmentVisit)||void 0===T?void 0:T.visitState)?null==e?void 0:e.appointmentVisit.visitState.name:null,assign_to_me:!1,case_type:null!==(C=null===(N=null===(A=null==e?void 0:e.case)||void 0===A?void 0:A.caseType)||void 0===N?void 0:N.name)&&void 0!==C?C:null,case_type_id:null==e?void 0:e.case_type_id,back_dated_check:!(!(null===(R=null==e?void 0:e.appointmentVisit)||void 0===R?void 0:R.document_uploaded)||null===(null==e?void 0:e.billable))}}))})),this.getAllDoctorSpecialityAppointmentsModify=(e,t)=>kn(this,void 0,void 0,(function*(){const{date_time_range:t,facility_location_ids:i,speciality_ids:a,doctor_ids:n,user_id:o=Number(process.env.USERID)}=e,s=this.shallowCopy(yield this.__facilityLocationRepo.findOne({deleted_at:null,id:{[jn.in]:i}}));if(!s||!Object.keys(s).length)throw un("NO_PRACTICES_FOUND");const l=new Date(new Date(t[0]).setUTCHours(0,0,0,0)),d=new Date(new Date(t[1]).setUTCHours(23,59,59,999)),_=this.shallowCopy(yield this.__availableSpecialityRepo.findAll({facility_location_id:{[jn.in]:i},speciality_id:{[jn.in]:a}},{attributes:{exclude:["key","number_of_entries","no_of_doctors","no_of_slots","created_by","updated_by","created_at","updated_at","deleted_at"]},include:{as:"dateList",model:qe,required:!0,where:{[jn.or]:[{deleted_at:null,end_date:{[jn.gte]:l},start_date:{[jn.lte]:l}},{deleted_at:null,start_date:{[jn.gte]:l,[jn.lte]:d}}]}}})).map((e=>e.id)),r=this.shallowCopy(yield this.__availableDoctorRepo.findAll({doctor_id:{[jn.in]:n},facility_location_id:{[jn.in]:i}},{attributes:{exclude:["key","no_of_slots","created_by","updated_by","created_at","updated_at","deleted_at"]},include:[{as:"dateList",model:qe,required:!0,where:{[jn.or]:[{deleted_at:null,end_date:{[jn.gte]:l},start_date:{[jn.lte]:l}},{deleted_at:null,start_date:{[jn.gte]:l,[jn.lte]:d}}]}},{as:"availableSpeciality",model:it,required:!0,where:a&&a.length?{deleted_at:null,speciality_id:a}:{deleted_at:null}}]})).map((e=>e.id)),c=this.shallowCopy(yield this.__visitSessionRepo.findAll({deleted_at:null,doctor_id:{[jn.notIn]:n},speciality_id:{[jn.in]:a}})).map((e=>e.appointment_id));return this.shallowCopy(yield this.__repo.findAll({cancelled:!1,deleted_at:null,id:{[jn.notIn]:c},pushed_to_front_desk:!1,scheduled_date_time:{[jn.between]:[l,d]},[jn.or]:[{available_speciality_id:{[jn.in]:_}},{available_doctor_id:{[jn.in]:r}}]},{attributes:{exclude:["updated_by","created_at","updated_at","deleted_at"]},include:[{attributes:["id","case_type_id"],include:{attributes:["id","name"],model:Wt},model:ti},{as:"availableDoctor",attributes:["id","doctor_id","available_speciality_id","facility_location_id"],include:[{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null}},{as:"doctor",attributes:["id"],include:[{as:"userBasicInfo",attributes:["id","first_name","last_name","middle_name","profile_pic"],model:Ce,required:!1,where:{deleted_at:null}},{as:"medicalIdentifiers",include:{as:"billingTitle",model:xt,required:!1,where:{deleted_at:null}},model:Mt,required:!0,where:{deleted_at:null,wcb_auth:1}}],model:le,required:!1,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:{as:"speciality",include:{as:"specialityVisitType",model:Y,where:{speciality_id:{[jn.in]:a}}},model:ue,required:!1,where:{deleted_at:null}},model:it,required:!1,where:{deleted_at:null}},{as:"patient",attributes:["id","first_name","last_name","middle_name","profile_avatar"],model:Et,required:!1},{as:"appointmentType",attributes:["id","name","slug"],include:{as:"specialityVisitType",model:Y,where:{speciality_id:{[jn.in]:a}}},model:J,required:!1,where:{deleted_at:null}},{as:"appointmentStatus",attributes:["id","name","slug"],model:g,required:!1,where:{deleted_at:null}},{as:"priority",attributes:["id","name","slug"],model:ee,required:!1},{as:"appointmentVisit",attributes:["id","appointment_id","appointment_type_id","document_uploaded"],include:{as:"visitState",attributes:["id","name","slug"],model:$e,required:!1},model:Ke,required:!1,where:{deleted_at:null}},{as:"appointmentVisitSession",model:Ke,attribute:["deleted_at"],required:!1,paranoid:!1,separate:!0,limit:1,order:[["id","DESC"]]},{as:"patientSessions",attribute:["id","date_of_check_in","time_of_check_in"],model:B,required:!1,where:{deleted_at:null}}]})).map((e=>{var t,i,a,o,s,l,d,_,r,c,p,u,m,y,h,f,v,g,b,S,I,D,w,O,T,A,N,C,R,E,L,k,P,j,B,U,q,F,M,$,V,x,K,z,G,H,Y,W,Q,J;let X=null,Z=!1;return(null===(t=null==e?void 0:e.appointmentVisitSession)||void 0===t?void 0:t.length)&&(Z=null!==(null==e?void 0:e.appointmentVisitSession[0].deleted_at)),(null==e?void 0:e.patientSessions)&&(X=(null===(i=null==e?void 0:e.patientSessions)||void 0===i?void 0:i.date_of_check_in)?`${String(null===(a=null==e?void 0:e.patientSessions)||void 0===a?void 0:a.date_of_check_in)}T${String(null!==(s=null===(o=null==e?void 0:e.patientSessions)||void 0===o?void 0:o.time_of_check_in)&&void 0!==s?s:"00:00:00")}.000Z`:null),{date_of_check_in:X,id:null==e?void 0:e.id,start_date_time:null==e?void 0:e.scheduled_date_time,comments:null==e?void 0:e.comments,visit_deleted:Z,evaluation_date_time:null==e?void 0:e.evaluation_date_time,available_speciality_id:null==e?void 0:e.available_speciality_id,priority_id:null==e?void 0:e.priority_id,patient_id:null==e?void 0:e.patient_id,time_slot:null==e?void 0:e.time_slots,case_id:null==e?void 0:e.case_id,available_doctor_id:null!==(l=e.available_doctor_id)&&void 0!==l?l:null,appointment_title:null==e?void 0:e.appointment_title,appointment_type_id:null==e?void 0:e.type_id,appointment_duration:null==e?void 0:e.time_slots,picture:null==e?void 0:e.patient.profile_avatar,confirmation_status:null==e?void 0:e.confirmation_status,speciality_id:(null==e?void 0:e.available_doctor_id)?null===(_=null===(d=null==e?void 0:e.availableDoctor)||void 0===d?void 0:d.availableSpeciality)||void 0===_?void 0:_.speciality_id:null===(r=null==e?void 0:e.availableSpeciality)||void 0===r?void 0:r.speciality_id,facility_location_id:(null==e?void 0:e.available_doctor_id)?null===(c=null==e?void 0:e.availableDoctor)||void 0===c?void 0:c.facility_location_id:null===(p=null==e?void 0:e.availableSpeciality)||void 0===p?void 0:p.facility_location_id,first_name:null==e?void 0:e.patient.first_name,last_name:null===(u=null==e?void 0:e.patient)||void 0===u?void 0:u.last_name,middle_name:null===(m=null==e?void 0:e.patient)||void 0===m?void 0:m.middle_name,doctor_id:(null==e?void 0:e.available_doctor_id)&&null!==(h=null===(y=null==e?void 0:e.availableDoctor)||void 0===y?void 0:y.doctor_id)&&void 0!==h?h:null,doctor_last_name:(null==e?void 0:e.available_doctor_id)&&null!==(b=null===(g=null===(v=null===(f=null==e?void 0:e.availableDoctor)||void 0===f?void 0:f.doctor)||void 0===v?void 0:v.userBasicInfo)||void 0===g?void 0:g.last_name)&&void 0!==b?b:null,doctor_middle_name:(null==e?void 0:e.available_doctor_id)&&null!==(w=null===(D=null===(I=null===(S=null==e?void 0:e.availableDoctor)||void 0===S?void 0:S.doctor)||void 0===I?void 0:I.userBasicInfo)||void 0===D?void 0:D.middle_name)&&void 0!==w?w:null,doctor_first_name:(null==e?void 0:e.available_doctor_id)&&null!==(N=null===(A=null===(T=null===(O=null==e?void 0:e.availableDoctor)||void 0===O?void 0:O.doctor)||void 0===T?void 0:T.userBasicInfo)||void 0===A?void 0:A.first_name)&&void 0!==N?N:null,medical_identifiers_id:(null==e?void 0:e.available_doctor_id)&&null!==(L=null===(E=null===(R=null===(C=null==e?void 0:e.availableDoctor)||void 0===C?void 0:C.doctor)||void 0===R?void 0:R.medicalIdentifiers)||void 0===E?void 0:E.id)&&void 0!==L?L:null,billing_title_id:(null==e?void 0:e.available_doctor_id)&&null!==(U=null===(B=null===(j=null===(P=null===(k=null==e?void 0:e.availableDoctor)||void 0===k?void 0:k.doctor)||void 0===P?void 0:P.medicalIdentifiers)||void 0===j?void 0:j.billingTitle)||void 0===B?void 0:B.id)&&void 0!==U?U:null,billing_title_name:(null==e?void 0:e.available_doctor_id)&&null!==(V=null===($=null===(M=null===(F=null===(q=null==e?void 0:e.availableDoctor)||void 0===q?void 0:q.doctor)||void 0===F?void 0:F.medicalIdentifiers)||void 0===M?void 0:M.billingTitle)||void 0===$?void 0:$.name)&&void 0!==V?V:null,visit_session_state_slug:(null===(x=null==e?void 0:e.appointmentVisit)||void 0===x?void 0:x.visitState)?null==e?void 0:e.appointmentVisit.visitState.slug:null,visit_session_state_name:(null===(K=null==e?void 0:e.appointmentVisit)||void 0===K?void 0:K.visitState)?null==e?void 0:e.appointmentVisit.visitState.name:null,assign_to_me:!!n.includes(null===(z=null==e?void 0:e.availableDoctor)||void 0===z?void 0:z.doctor_id),case_type:null!==(Y=null===(H=null===(G=null==e?void 0:e.case)||void 0===G?void 0:G.caseType)||void 0===H?void 0:H.name)&&void 0!==Y?Y:null,case_type_id:null==e?void 0:e.case_type_id,back_dated_check:!(!(null===(W=null==e?void 0:e.appointmentVisit)||void 0===W?void 0:W.document_uploaded)||null===(null==e?void 0:e.billable)),allow_multiple_cpt_codes:null===(J=null===(Q=null==e?void 0:e.appointmentType)||void 0===Q?void 0:Q.specialityVisitType[0])||void 0===J?void 0:J.allow_multiple_cpt_codes}}))})),this.getAllDoctorSpecialityAppointmentsV2=(e,t)=>kn(this,void 0,void 0,(function*(){const{date_time_range:t,facility_location_ids:i,speciality_ids:a,doctor_ids:n,user_id:o=Number(process.env.USERID)}=e,s=new Date(new Date(t[0]).setUTCHours(0,0,0,0)),l=new Date(new Date(t[1]).setUTCHours(23,59,59,999)),d=this.getAllDoctorSpecialityAppointmentsRawQuery({facilityLocationIds:i,specialityIds:a,doctorIds:n,endDate:l,startDate:s}),[_]=this.shallowCopy(yield _a.query(d));return null==_?void 0:_.map((e=>{var t;return Object.assign(Object.assign({},e),{appointment_duration:null==e?void 0:e.time_slot,assign_to_me:!!n.includes(null==e?void 0:e.doctor_id),back_dated_check:!(!(null==e?void 0:e.document_uploaded)||null===(null==e?void 0:e.billable)),date_of_check_in:(null==e?void 0:e.date_of_check_in)?`${String(null==e?void 0:e.date_of_check_in)}T${String(null!==(t=null==e?void 0:e.time_of_check_in)&&void 0!==t?t:"00:00:00")}.000Z`:null,visit_deleted:null!==(null==e?void 0:e.last_visit_session_deleted)})}))})),this.getAllPatientAppointments=(e,t)=>kn(this,void 0,void 0,(function*(){const{page:t=1,per_page:i=10,patient_id:a,is_cancelled_appointments:n,appointment_status_id:o,end_date:s,start_date:l,practice_location_id:d,speciality_id:_,case_id:r,visit_status_id:c,user_id:p=Number(process.env.USERID)}=e,u=new Date(l),m=new Date(s),y={deleted_at:null,patient_id:a,pushed_to_front_desk:0};n&&(y.cancelled=n),l&&s&&(y.scheduled_date_time={[jn.between]:[u,m]}),r&&(y.case_id=r),o&&(y.status_id=o);const h={deleted_at:null};_&&(h.id=_);const f={deleted_at:null};d&&(f.facility_location_id=d);const v={deleted_at:null};c&&(v.id=c);const b=this.shallowCopy(yield this.__repo.appointmentpaginate({where:Object.assign({},y)},Number(t),Number(i),null,{include:[{model:Wt,as:"caseType",attributes:["name"],required:!1,where:{deleted_at:null}},{as:"dateList",include:[{as:"availableDoctor",include:[{as:"facilityLocations",include:{as:"facility",model:Ut,required:!1,where:{deleted_at:null}},model:Oe,required:!1,where:{deleted_at:null}},{as:"doctor",attributes:{exclude:["password"]},include:[{as:"userBasicInfo",attributes:["id","last_name","middle_name","profile_pic"],model:Ce,required:!1,where:{deleted_at:null}},{as:"medicalIdentifiers",include:{as:"billingTitle",model:xt,required:!1,where:{deleted_at:null}},model:Mt,required:!0,where:{deleted_at:null,wcb_auth:1}}],model:le,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!!_,where:Object.assign({},h)},model:it,required:!1,where:Object.assign({},f)}],model:ot,required:!1,where:Object.assign({},f)},{as:"availableSpeciality",include:[{as:"speciality",model:ue,required:!!_,where:Object.assign({},h)},{as:"facilityLocation",include:{as:"facility",model:Ut,required:!1},model:Oe,required:!1,where:{deleted_at:null}}],model:it,required:!1,where:Object.assign({},f)}],model:qe,required:!0,where:{deleted_at:null}},{as:"appointmentStatus",attributes:["name","slug"],model:g,required:!1,where:{deleted_at:null}},{as:"patientSessions",include:{as:"visitStatus",attributes:["name","slug"],model:Pt,required:!!c,where:Object.assign({},v)},model:B,required:!1}]})),S=b||{},{docs:I}=S,D=Pn(S,["docs"]),w=b&&I&&(null==I?void 0:I.length)?I.map((e=>{var t,i;const{caseType:a,dateList:n,patientSessions:o,appointmentStatus:s,scheduled_date_time:l,available_doctor_id:d,available_speciality_id:_,action_performed:r}=e,{availableDoctor:c,availableSpeciality:p}=n||{};return{action_performed:r,appointment_status:null==s?void 0:s.name,appointment_status_slug:null==s?void 0:s.slug,available_doctor:d?c:null,available_speciality:_?p:null,cancelled:null==e?void 0:e.cancelled,cancelled_comments:null==e?void 0:e.cancelled_comments,case_type_name:null==a?void 0:a.name,id:null==e?void 0:e.id,pushed_to_front_desk:null==e?void 0:e.pushed_to_front_desk,pushed_to_front_desk_comments:null==e?void 0:e.pushed_to_front_desk_comments,scheduled_date_time:l,visit_status_name:null===(t=null==o?void 0:o.visitStatus)||void 0===t?void 0:t.name,visit_status_slug:null===(i=null==o?void 0:o.visitStatus)||void 0===i?void 0:i.slug}})):[];return Object.assign({docs:w},D)})),this.getAllPatientAppointmentsV1=(e,t)=>kn(this,void 0,void 0,(function*(){const{page:t=1,per_page:i=10,paginate:a,patient_id:n,is_cancelled_appointments:o,appointment_status_id:s,end_date:l,start_date:d,practice_location_id:_,speciality_id:r,case_id:c,visit_status_id:p,user_id:u=Number(process.env.USERID)}=e,m=this.rawQueryForGetAllPatientAppointmentsCount({patientId:n,visitStatusId:p,caseId:c,startDateString:d,endDateString:l,specialityId:r,practiceLocationId:_,appointmentStatusId:s,isCancelledAppointments:o,page:t,perPage:i,paginate:!1}),[y]=this.shallowCopy(yield _a.query(m)),h=y.length,f=this.rawQueryForGetAllPatientAppointments({patientId:n,visitStatusId:p,caseId:c,startDateString:d,endDateString:l,specialityId:r,practiceLocationId:_,appointmentStatusId:s,isCancelledAppointments:o,page:t,perPage:i,paginate:a}),[v]=this.shallowCopy(yield _a.query(f)),g=this.filterNonNull(null==v?void 0:v.map((e=>{let t={},i={},a={},n={},o={},s={},l={},d={},_={},r={},c={},p={},u={},m={};return e.medicalIdentifier_id&&(u={id:e.medicalIdentifier_id,clinic_name:e.medicalIdentifier_clinic_name}),e.billingTitles_id&&(m={id:e.billingTitles_id,name:e.billingTitles_name,description:e.billingTitles_description}),(null==e?void 0:e.appointment_id)&&(l={id:null==e?void 0:e.appointment_id,key:null==e?void 0:e.appointment_key,scheduled_date_time:null==e?void 0:e.appointment_scheduled_date_time,evaluation_date_time:null==e?void 0:e.appointment_evaluation_date_time,time_slots:null==e?void 0:e.appointment_time_slot,appointment_title:null==e?void 0:e.appointment_title,action_performed:null==e?void 0:e.appointment_action_performed,confirmation_status:null==e?void 0:e.appointment_confirmation_status,cancelled:null==e?void 0:e.appointment_cancelled,pushed_to_front_desk:null==e?void 0:e.appointment_pushed_to_front_dest,comments:null==e?void 0:e.appointment_comments,by_health_app:null==e?void 0:e.appointment_by_health_app,date_list_id:null==e?void 0:e.appointment_date_list_id,target_facility_id:null==e?void 0:e.appointment_target_facility_id,origin_facility_id:null==e?void 0:e.appointment_origin_facility_id,case_id:null==e?void 0:e.appointment_case_id,case_type_id:null==e?void 0:e.appointment_case_type_id,patient_id:null==e?void 0:e.appointment_patient_id,type_id:null==e?void 0:e.appointment_type_id,status_id:null==e?void 0:e.appointment_status_id,priority_id:null==e?void 0:e.appointment_priority_id,available_doctor_id:null==e?void 0:e.appointment_available_doctor_id,available_speciality_id:null==e?void 0:e.appointment_available_speciality_id,billable:null==e?void 0:e.appointment_billable,pushed_to_front_desk_comments:null==e?void 0:e.appointment_pushed_to_front_desk_comments,cancelled_comments:null==e?void 0:e.appointment_cancelled_comments,is_speciality_base:null==e?void 0:e.appointment_is_speciality_base,created_by:null==e?void 0:e.appointment_created_by,updated_by:null==e?void 0:e.appointment_updated_by,created_at:null==e?void 0:e.appointment_created_at,updated_at:null==e?void 0:e.appointment_updated_at,deleted_at:null==e?void 0:e.appointment_deleted_at,is_redo:null==e?void 0:e.appointment_is_redo,is_active:null==e?void 0:e.appointment_is_active,is_soft_registered:null==e?void 0:e.appointment_is_soft_registered,physician_id:null==e?void 0:e.appointment_physician_id,technician_id:null==e?void 0:e.appointment_technician_id,reading_provider_id:null==e?void 0:e.appointment_reading_provider_id,cd_image:null==e?void 0:e.appointment_cd_image,is_transportation:null==e?void 0:e.appointment_is_transportation}),(null==e?void 0:e.doctorBasicInfo_id)&&(d={id:null==e?void 0:e.doctorBasicInfo_id,first_name:null==e?void 0:e.doctorBasicInfo_first_name,middle_name:null==e?void 0:e.doctorBasicInfo_middle_name,last_name:null==e?void 0:e.doctorBasicInfo_last_name,date_of_birth:null==e?void 0:e.doctorBasicInfo_date_of_birth,gender:null==e?void 0:e.doctorBasicInfo_gender,user_id:null==e?void 0:e.doctorBasicInfo_user_id,area_id:null==e?void 0:e.doctorBasicInfo_area_id,title:null==e?void 0:e.doctorBasicInfo_title,cell_no:null==e?void 0:e.doctorBasicInfo_cell_no,address:null==e?void 0:e.doctorBasicInfo_address,work_phone:null==e?void 0:e.doctorBasicInfo_work_phone,fax:null==e?void 0:e.doctorBasicInfo_fax,extension:null==e?void 0:e.doctorBasicInfo_extension,home_phone:null==e?void 0:e.doctorBasicInfo_home_phone,emergency_name:null==e?void 0:e.doctorBasicInfo_emergency_name,emergency_phone:null==e?void 0:e.doctorBasicInfo_emergency_phone,biography:null==e?void 0:e.doctorBasicInfo_biography,hiring_date:null==e?void 0:e.doctorBasicInfo_hiring_date,from:null==e?void 0:e.doctorBasicInfo_from,to:null==e?void 0:e.doctorBasicInfo_to,profile_pic:null==e?void 0:e.doctorBasicInfo_profile_pic,city:null==e?void 0:e.doctorBasicInfo_city,state:null==e?void 0:e.doctorBasicInfo_state,zip:null==e?void 0:e.doctorBasicInfo_zip,social_security:null==e?void 0:e.doctorBasicInfo_social_security,profile_pic_url:null==e?void 0:e.doctorBasicInfo_profile_pic_url,apartment_suite:null==e?void 0:e.doctorBasicInfo_apartment_suite}),(null==e?void 0:e.caseTypes_id)&&(r={id:null==e?void 0:e.caseTypes_id,key:null==e?void 0:e.caseTypes_key,name:null==e?void 0:e.caseTypes_name,slug:null==e?void 0:e.caseTypes_slug,description:null==e?void 0:e.caseTypes_description,comments:null==e?void 0:e.caseTypes_comments,remainder_days:null==e?void 0:e.caseTypes_remainder_days,created_by:null==e?void 0:e.caseTypes_created_by,updated_by:null==e?void 0:e.caseTypes_udpated_by,created_at:null==e?void 0:e.caseTypes_created_at,updated_at:null==e?void 0:e.caseTypes_updated_at,deleted_at:null==e?void 0:e.caseTypes_deleted_at}),(null==e?void 0:e.appointmentStatus_id)&&(_={created_at:null==e?void 0:e.appointmentStatus_created_at,created_by:null==e?void 0:e.appointmentStatus_created_by,deleted_at:null==e?void 0:e.appointmentStatus_deleted_at,id:null==e?void 0:e.appointmentStatus_id,name:null==e?void 0:e.appointmentStatus_name,slug:null==e?void 0:e.appointmentStatus_slug,updated_at:null==e?void 0:e.appointmentStatus_updated_at,updated_by:null==e?void 0:e.appointmentStatus_updated_by}),(null==e?void 0:e.availableSpeciality_id)&&(t={id:null==e?void 0:e.availableSpeciality_id,key:null==e?void 0:e.availableSpeciality_key,start_date:null==e?void 0:e.availableSpeciality_start_date,end_date:null==e?void 0:e.availableSpeciality_end_date,end_date_for_recurrence:null==e?void 0:e.availableSpeciality_end_date_for_recurrence,no_of_doctors:null==e?void 0:e.availableSpeciality_no_of_doctors,no_of_slots:null==e?void 0:e.availableSpeciality_no_of_slots,end_after_occurences:null==e?void 0:e.availableSpeciality_end_after_occurences,number_of_entries:null==e?void 0:e.availableSpeciality_number_of_entries,speciality_id:null==e?void 0:e.availableSpeciality_speciality_id,facility_location_id:null==e?void 0:e.availableSpeciality_facility_location_id,recurrence_ending_criteria_id:null==e?void 0:e.availableSpeciality_recurrence_ending_criteria_id,deleted_at:null==e?void 0:e.availableSpeciality_deleted_at}),(null==e?void 0:e.availableSpecialityDoctor_id)&&(i={id:null==e?void 0:e.availableSpecialityDoctor_id,key:null==e?void 0:e.availableSpecialityDoctor_key,start_date:null==e?void 0:e.availableSpecialityDoctor_start_date,end_date:null==e?void 0:e.availableSpecialityDoctor_end_date,no_of_slots:null==e?void 0:e.availableSpecialityDoctor_no_of_slots,doctor_id:null==e?void 0:e.availableSpecialityDoctor_doctor_id,facility_location_id:null==e?void 0:e.availableSpecialityDoctor_facility_location_id,available_speciality_id:null==e?void 0:e.availableSpecialityDoctor_available_speciality_id,supervisor_id:null==e?void 0:e.availableSpecialityDoctor_supervisor_id,is_provider_assignment:null==e?void 0:e.availableSpecialityDoctor_is_provider_assignment}),(null==e?void 0:e.doctor_id)&&(o={id:null==e?void 0:e.doctor_id,email:null==e?void 0:e.doctor_email,reset_key:null==e?void 0:e.doctor_reset_key,status:null==e?void 0:e.doctor_status,is_loggedIn:null==e?void 0:e.doctor_is_loggedIn,remember_token:null==e?void 0:e.doctor_remember_token}),(null==e?void 0:e.facilityLocation_id)&&(a={id:null==e?void 0:e.facilityLocation_id,facility_id:null==e?void 0:e.facilityLocation_facility_id,name:null==e?void 0:e.facilityLocation_name,city:null==e?void 0:e.facilityLocation_city,state:null==e?void 0:e.facilityLocation_state,zip:null==e?void 0:e.facilityLocation_zip,region_id:null==e?void 0:e.facilityLocation_region_id,address:null==e?void 0:e.facilityLocation_address,phone:null==e?void 0:e.facilityLocation_phone,fax:null==e?void 0:e.facilityLocation_fax,email:null==e?void 0:e.facilityLocation_email,office_hours_start:null==e?void 0:e.facilityLocation_office_hours_start,office_hours_end:null==e?void 0:e.facilityLocation_office_hours_end,lat:null==e?void 0:e.facilityLocation_lat,long:null==e?void 0:e.facilityLocation_long,day_list:null==e?void 0:e.facilityLocation_day_list,floor:null==e?void 0:e.facilityLocation_floor,place_of_service_id:null==e?void 0:e.facilityLocation_place_of_service_id,qualifier:null==e?void 0:e.facilityLocation_qualifier,ext_no:null==e?void 0:e.facilityLocation_ext_no,cell_no:null==e?void 0:e.facilityLocation_cell_no,is_main:null==e?void 0:e.facilityLocation_is_main,same_as_provider:null==e?void 0:e.facilityLocation_same_as_provider,dean:null==e?void 0:e.facilityLocation_dean}),(null==e?void 0:e.specialities_id)&&(s={id:null==e?void 0:e.specialities_id,name:null==e?void 0:e.specialities_name,description:null==e?void 0:e.specialities_description,time_slot:null==e?void 0:e.specialities_time_slot,over_booking:null==e?void 0:e.specialities_over_booking,has_app:null==e?void 0:e.specialities_has_app,speciality_key:null==e?void 0:e.specialities_speciality_key,comments:null==e?void 0:e.specialities_comments,default_name:null==e?void 0:e.specialities_default_name,qualifier:null==e?void 0:e.specialities_qualifier,is_defualt:null==e?void 0:e.specialities_is_defualt,is_available:null==e?void 0:e.specialities_is_available,is_create_appointment:null==e?void 0:e.specialities_is_create_appointment,is_editable:null==e?void 0:e.specialities_is_editable}),(null==e?void 0:e.facilities_id)&&(n={created_at:null==e?void 0:e.facilities_created_at,created_by:null==e?void 0:e.facilities_created_by,deleted_at:null==e?void 0:e.facilities_deleted_at,id:null==e?void 0:e.facilities_id,name:null==e?void 0:e.facilities_name,slug:null==e?void 0:e.facilities_slug,qualifier:null==e?void 0:e.facilities_qualifier,updated_at:null==e?void 0:e.facilities_updated_at,updated_by:null==e?void 0:e.facilities_updated_by}),(null==e?void 0:e.patientSessions_id)&&(c={id:null==e?void 0:e.patientSessions_id,key:null==e?void 0:e.patientSessions_key,status_id:null==e?void 0:e.patientSessions_status_id,case_id:null==e?void 0:e.patientSessions_case_id,appointment_id:null==e?void 0:e.patientSessions_appointment_id,date_of_check_in:null==e?void 0:e.patientSessions_date_of_check_in,time_of_check_in:null==e?void 0:e.patientSessions_time_of_check_in,date_of_check_out:null==e?void 0:e.patientSessions_date_of_check_out,time_of_check_out:null==e?void 0:e.patientSessions_time_of_check_out,created_by:null==e?void 0:e.patientSessions_created_by,updated_by:null==e?void 0:e.patientSessions_updated_by,created_at:null==e?void 0:e.patientSessions_created_at,updated_at:null==e?void 0:e.patientSessions_updated_at,deleted_at:null==e?void 0:e.patientSessions_deleted_at}),(null==e?void 0:e.visitStatus_id)&&(p={id:null==e?void 0:e.visitStatus_id,name:null==e?void 0:e.visitStatus_name,slug:null==e?void 0:e.visitStatus_slug}),Object.assign(Object.assign({},l),{appointmentStatus:e.appointmentStatus_id?_:null,available_doctor:e.availableSpecialityDoctor_id?Object.assign(Object.assign({},i),{doctor:e.doctor_id?Object.assign(Object.assign({billingTitles:e.billingTitles_id?m:null},o),{doctorBasicInfo:e.doctorBasicInfo_id?d:null,medicalIdentifier:e.medicalIdentifier_id?u:null}):null}):null,available_speciality:e.availableSpeciality_id?Object.assign(Object.assign({},t),{facilityLocation:e.facilityLocation_id?Object.assign(Object.assign({},a),{facility:e.facilities_id?n:null}):null,speciality:e.specialities_id?s:null}):null,caseTypes:e.caseTypes_id?r:null,patientSessions:e.patientSessions_id?Object.assign(Object.assign({},c),{visitStatus:e.visitStatus_id?p:null}):null})})));return a?{docs:g,page_number:t,pages:Math.ceil(h/i),total:h}:g})),this.getAppointmentAgainstAvailablity=(e,t)=>kn(this,void 0,void 0,(function*(){const{available_doctor_ids:t,available_speciality_id:i,date_list_ids:a,availablity_check:n,user_id:o=Number(process.env.USERID)}=e,s=n||"none";return"none"===s?[]:this[this.__getAppointmentForAssignments[`${s}`]]({availableDoctorId:t,availableSpecialityId:i,dateListId:a})})),this.getAppointmentById=(e,t,i)=>kn(this,void 0,void 0,(function*(){const{appointment_id:t,user_id:a=Number(process.env.USERID)}=e,n=i||null;return this.shallowCopy(yield this.__repo.findAll({id:t},{include:[{attributes:["id"],model:ti,include:{model:Wt}},{as:"availableDoctor",include:[{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null}},{as:"doctor",attributes:{exclude:["password"]},include:[{as:"userBasicInfo",model:Ce,required:!1,attributes:["id","first_name","middle_name","last_name"],where:{deleted_at:null}},{as:"medicalIdentifiers",model:Mt,attributes:["id"],required:!1,include:{as:"billingTitle",required:!1,attributes:["id","name"],model:xt,where:{deleted_at:null}},where:{deleted_at:null}}],model:le,required:!1,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:{as:"speciality",model:ue,include:{as:"specialityVisitType",model:Y},required:!1,where:{deleted_at:null}},model:it,required:!1,where:{deleted_at:null}},{as:"patient",model:Et,required:!1,attributes:["id","first_name","middle_name","last_name","profile_avatar"]},{as:"appointmentVisitSession",model:Ke,attribute:["deleted_at"],required:!1,paranoid:!1,separate:!0,limit:1,order:[["id","DESC"]]},{as:"appointmentVisit",include:{as:"visitState",model:$e,required:!1,attribute:["name","slug"]},model:Ke,required:!1,where:{deleted_at:null}}]},n)).map((e=>{var t,i,a,n,o,s,l,d,_,r,c,p,u,m,y,h,f,v,g,b,S,I,D,w,O,T,A,N,C,R,E,L,k,P,j,B,U,q,F,M,$,V,x;const K=(null==e?void 0:e.availableDoctor)?null===(i=null===(t=null==e?void 0:e.availableDoctor)||void 0===t?void 0:t.availableSpeciality)||void 0===i?void 0:i.speciality_id:null===(a=null==e?void 0:e.availableSpeciality)||void 0===a?void 0:a.speciality_id,z=(null==e?void 0:e.availableDoctor)&&null!==(o=null===(n=null==e?void 0:e.availableDoctor)||void 0===n?void 0:n.doctor_id)&&void 0!==o?o:null,G=(null==e?void 0:e.available_doctor_id)?null===(s=null==e?void 0:e.availableDoctor)||void 0===s?void 0:s.facility_location_id:null===(l=null==e?void 0:e.availableSpeciality)||void 0===l?void 0:l.facility_location_id,H=(null==e?void 0:e.availableDoctor)?`${z}_${K}_${G}`:null,Y=G&&K?`${G}_${K}`:null;let W=!1;return(null===(d=null==e?void 0:e.appointmentVisitSession)||void 0===d?void 0:d.length)&&(W=null!==(null==e?void 0:e.appointmentVisitSession[0].deleted_at)),{id:null==e?void 0:e.id,start_date_time:null==e?void 0:e.scheduled_date_time,comments:null==e?void 0:e.comments,evaluation_date_time:null==e?void 0:e.evaluation_date_time,available_speciality_id:null==e?void 0:e.available_speciality_id,available_doctor_id:null!==(_=e.available_doctor_id)&&void 0!==_?_:null,priority_id:null==e?void 0:e.priority_id,patient_id:null==e?void 0:e.patient_id,time_slot:null==e?void 0:e.time_slots,case_id:null==e?void 0:e.case_id,visit_deleted:W,socket_id:H,speciality_socket_id:Y,appointment_title:null==e?void 0:e.appointment_title,appointment_type_id:null==e?void 0:e.type_id,appointment_duration:null==e?void 0:e.time_slots,billable:null==e?void 0:e.billable,picture:null==e?void 0:e.patient.profile_avatar,confirmation_status:null==e?void 0:e.confirmation_status,speciality_id:K,facility_location_id:(null==e?void 0:e.availableDoctor)?null===(r=null==e?void 0:e.availableDoctor)||void 0===r?void 0:r.facility_location_id:null===(c=null==e?void 0:e.availableSpeciality)||void 0===c?void 0:c.facility_location_id,first_name:null==e?void 0:e.patient.first_name,last_name:null===(p=null==e?void 0:e.patient)||void 0===p?void 0:p.last_name,middle_name:null===(u=null==e?void 0:e.patient)||void 0===u?void 0:u.middle_name,doctor_id:z,doctor_last_name:(null==e?void 0:e.available_doctor_id)&&null!==(f=null===(h=null===(y=null===(m=null==e?void 0:e.availableDoctor)||void 0===m?void 0:m.doctor)||void 0===y?void 0:y.userBasicInfo)||void 0===h?void 0:h.middle_name)&&void 0!==f?f:null,doctor_middle_name:(null==e?void 0:e.available_doctor_id)&&null!==(S=null===(b=null===(g=null===(v=null==e?void 0:e.availableDoctor)||void 0===v?void 0:v.doctor)||void 0===g?void 0:g.userBasicInfo)||void 0===b?void 0:b.last_name)&&void 0!==S?S:null,doctor_first_name:(null==e?void 0:e.available_doctor_id)&&null!==(O=null===(w=null===(D=null===(I=null==e?void 0:e.availableDoctor)||void 0===I?void 0:I.doctor)||void 0===D?void 0:D.userBasicInfo)||void 0===w?void 0:w.first_name)&&void 0!==O?O:null,billing_title_id:(null==e?void 0:e.available_doctor_id)&&null!==(R=null===(C=null===(N=null===(A=null===(T=null==e?void 0:e.availableDoctor)||void 0===T?void 0:T.doctor)||void 0===A?void 0:A.medicalIdentifiers)||void 0===N?void 0:N.billingTitle)||void 0===C?void 0:C.id)&&void 0!==R?R:null,billing_title_name:(null==e?void 0:e.available_doctor_id)&&null!==(j=null===(P=null===(k=null===(L=null===(E=null==e?void 0:e.availableDoctor)||void 0===E?void 0:E.doctor)||void 0===L?void 0:L.medicalIdentifiers)||void 0===k?void 0:k.billingTitle)||void 0===P?void 0:P.name)&&void 0!==j?j:null,visit_session_state_slug:(null===(B=null==e?void 0:e.appointmentVisit)||void 0===B?void 0:B.visitState)?null==e?void 0:e.appointmentVisit.visitState.slug:null,visit_session_state_name:(null===(U=null==e?void 0:e.appointmentVisit)||void 0===U?void 0:U.visitState)?null==e?void 0:e.appointmentVisit.visitState.name:null,assign_to_me:!1,case_type:null!==(M=null===(F=null===(q=null==e?void 0:e.case)||void 0===q?void 0:q.caseType)||void 0===F?void 0:F.name)&&void 0!==M?M:null,case_type_id:null==e?void 0:e.case_type_id,back_dated_check:!(!(null===($=null==e?void 0:e.appointmentVisit)||void 0===$?void 0:$.document_uploaded)||null===(null==e?void 0:e.billable)),allow_multiple_cpt_codes:null===(x=null===(V=null==e?void 0:e.availableSpeciality)||void 0===V?void 0:V.speciality)||void 0===x?void 0:x.specialityVisitType.allow_multiple_cpt_codes}}))})),this.getAppointmentCptCodes=(e,t,i)=>kn(this,void 0,void 0,(function*(){const{appointment_id:t}=e;return{cpt_code:this.shallowCopy(yield this.__schAppointmentCptCodesRepo.findAll({appointment_id:t},{include:{model:Oi,as:"billingCode",required:!1,where:{deleted_at:null}}})).map((e=>{var t,i,a,n,o,s,l;return{id:e.billing_code_id,name:null===(t=null==e?void 0:e.billingCode)||void 0===t?void 0:t.name,type:null===(i=null==e?void 0:e.billingCode)||void 0===i?void 0:i.type,code_type_id:null==e?void 0:e.billing_code_id,description:null===(a=null==e?void 0:e.billingCode)||void 0===a?void 0:a.description,short_description:null===(n=null==e?void 0:e.billingCode)||void 0===n?void 0:n.short_description,medium_description:null===(o=null==e?void 0:e.billingCode)||void 0===o?void 0:o.medium_description,long_description:null===(s=null==e?void 0:e.billingCode)||void 0===s?void 0:s.long_description,comments:null===(l=null==e?void 0:e.billingCode)||void 0===l?void 0:l.comments,created_by:e.created_by,updated_by:e.updated_by,deleted_at:e.deleted_at}}))}})),this.getAppointmentList=(e,t)=>kn(this,void 0,void 0,(function*(){const{end_date:i,patient_id:a,case_ids:n,doctor_ids:o,facility_location_ids:s,start_date:l,user_id:d=Number(process.env.USERID),appointment_type_ids:_,appointment_status_ids:r,speciality_ids:c,case_type_ids:p,patient_status_ids:u,paginate:m,page:y,per_page:h}=e,f={headers:{Authorization:t}},v=this.shallowCopy(yield this.__userRepo.findOne({deleted_at:null,id:d}));if(!v&&!Object.keys(v).length)throw un("NO_RECORD_FOUND");const g=this.shallowCopy(yield this.__modelHasRolesRepo.findOne({model_id:d},{include:{model:he,as:"role",required:!1}})),{role:b,role:{slug:S}}=g||{};if(b&&"kiosk"===S){const e=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,user_id:d}));if(!e&&!e.length)throw un("USER_NOT_ALLOWED");if(!e.filter((e=>s.includes(e.facility_location_id))).length)throw un("USER_NOT_ALLOWED")}let I;if(!Object.keys(b).length||"super_admin"!==S){const e=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,speciality_id:{[jn.ne]:null},user_id:d}));if(!e&&!e.length)throw un("NO_APPOINTMENT_TO_SHOW");I=d}const D=Object.assign(Object.assign({cancelled:0,deleted_at:null,pushed_to_front_desk:0},a&&{patient_id:a}),{scheduled_date_time:{[jn.between]:[new Date(l),new Date(i)]}});if(_&&_.length&&(D.type_id={[jn.in]:_}),r&&r.length&&(D.status_id={[jn.in]:r}),p&&p.length&&(D.case_type_id={[jn.in]:p}),n&&n.length){D.case_id={[jn.in]:n};const{status:e}=yield this.__http.put(`${process.env.KIOSK_URL}case/search-count`,{ids:n},f);if(200!==e)throw un("ERROR_WHILE_UPDATING_STATUS")}const w=this.formatJoinClauseForAppointmentList(s,c,o,u,I);let O,T,A,N,C=[];if(console.log("start",new Date),m){const e=this.shallowCopy(yield this.__repo.getPaginate({where:Object.assign({},D)},y||1,h||10,null,{distinct:!0,include:[...w],order:[["scheduled_date_time","DESC"]]}));({docs:C,no_of_pages:O,total:T,page_number:A,is_last:N}=e||{})}else C=this.shallowCopy(yield this.__repo.findAll(Object.assign({},D),{include:[...w],order:[["scheduled_date_time","DESC"]]}));if(console.log("end",new Date),!C.length)return[];const R=this.filterNonNull(null==C?void 0:C.map((e=>{var t,i,a,n,o,s,l,d,_,r,c,p,u;const{availableSpeciality:m,physicianClinic:y,patient:h}=e,{availableSpecialityDoctor:f}=m||{},{userBasicInfo:v}=(null==f?void 0:f.doctor)||{},{medicalIdentifiers:g}=(null==f?void 0:f.doctor)||{},{billingTitle:b}=g||{},S=y?{physician:(null==y?void 0:y.physician)?Object.assign(Object.assign(Object.assign({clinic_location_id:null===(t=null==y?void 0:y.clinicLocation)||void 0===t?void 0:t.id,physician_clinic_id:null==y?void 0:y.id},null==y?void 0:y.clinic),null==y?void 0:y.clinicLocation),null==y?void 0:y.physician):null}:null;return{appointment_cpt_codes:null==e?void 0:e.appointmentCptCodes,appointment_comments:null==e?void 0:e.comments,appointment_confirmation_status:null==e?void 0:e.confirmation_status,appointment_id:null==e?void 0:e.id,appointment_status:null===(i=null==e?void 0:e.appointmentStatus)||void 0===i?void 0:i.name,appointment_status_id:null==e?void 0:e.status_id,appointment_status_slug:null===(a=null==e?void 0:e.appointmentStatus)||void 0===a?void 0:a.slug,appointment_time:null==e?void 0:e.scheduled_date_time,appointment_title:null==e?void 0:e.appointment_title,appointment_type_id:null==e?void 0:e.type_id,billable:null==e?void 0:e.billable,case_id:null==e?void 0:e.case_id,case_type_id:null==e?void 0:e.case_type_id,case_type_name:null===(n=null==e?void 0:e.caseType)||void 0===n?void 0:n.name,cd_image:null==e?void 0:e.cd_image,doctor_first_name:null==v?void 0:v.first_name,doctor_id:null==v?void 0:v.user_id,doctor_last_name:null==v?void 0:v.last_name,doctor_middle_name:null==v?void 0:v.middle_name,medicalIdentifiers_id:g.id,billingTitle_id:b.id,billingTitle_name:b.name,duration:null==e?void 0:e.time_slots,facility:null===(o=null==m?void 0:m.facilityLocation)||void 0===o?void 0:o.facility,facility_location_id:null==m?void 0:m.facility_location_id,facility_location_name:null==m?void 0:m.facilityLocation.name,facility_location_qualifier:null==m?void 0:m.facilityLocation.qualifier,is_transportation:null==e?void 0:e.is_transportation,patient_first_name:null==h?void 0:h.first_name,patient_id:null==e?void 0:e.patient_id,patient_last_name:null==h?void 0:h.last_name,patient_middl_name:null==h?void 0:h.middle_name,patient_picture:null==h?void 0:h.profile_avatar,patient_session:null==e?void 0:e.patientSessions,patient_status:null===(l=null===(s=null==e?void 0:e.patientSessions)||void 0===s?void 0:s.visitStatus)||void 0===l?void 0:l.name,patient_status_slug:null===(_=null===(d=null==e?void 0:e.patientSessions)||void 0===d?void 0:d.visitStatus)||void 0===_?void 0:_.slug,priority_id:null==e?void 0:e.priority_id,reading_provider_id:null==e?void 0:e.reading_provider_id,reading_provider:null==e?void 0:e.readingProvider,speciality_id:null==m?void 0:m.speciality_id,speciality_name:null==m?void 0:m.speciality.name,speciality_qualifier:null==m?void 0:m.speciality.qualifier,time_slot:null==m?void 0:m.speciality.time_slot,visit_type:null===(r=null==e?void 0:e.appointmentType)||void 0===r?void 0:r.name,visit_type_qualifier:null===(c=null==e?void 0:e.appointmentType)||void 0===c?void 0:c.qualifier,visit_type_id:null==e?void 0:e.type_id,case_status:null===(u=null===(p=null==e?void 0:e.case)||void 0===p?void 0:p.caseStatus)||void 0===u?void 0:u.name,physician_clinic:S,transportations:null==e?void 0:e.transportations}})));return m?{docs:R,pages:O,total:T,is_last:N,page_number:A}:R})),this.getAppointmentListByCase=(e,t)=>kn(this,void 0,void 0,(function*(){const{case_id:t,facility_location_id:i,scheduled_date_time:a,status_id:n,speciality_id:o}=e,s={};t&&(s.case_id=t),n&&(s.status_id=n),a&&(s.scheduled_date_time=a);const l={deleted_at:null};i&&(l.id=i);const d={deleted_at:null};return o&&(d.id=o),this.__repo.findAll(Object.assign(Object.assign({},s),{deleted_at:null}),{include:[{as:"availableSpeciality",include:[{as:"facilityLocation",model:Oe,required:!!i,where:Object.assign({},l)},{as:"speciality",model:ue,required:!!o,where:Object.assign({},d)}],model:it,required:!1,where:{deleted_at:null}},{as:"availableDoctor",include:[{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!!o,where:Object.assign({},d)},model:it,required:!1,where:{deleted_at:null}},{as:"facilityLocations",model:Oe,required:!!i,where:Object.assign({},l)},{as:"doctor",attributes:{exclude:["password"]},model:le,required:!0,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null}}]})})),this.getAppointmentListForHealthApp=(e,t)=>kn(this,void 0,void 0,(function*(){const{patient_id:t,case_id:i,paginate:a,date:n,page:o,per_page:s,check:l}=e,d={patient_id:t,by_health_app:!0};if(n&&"daily"===l){const e=Rn(n).startOf("day"),t=Rn(n).endOf("day");d.scheduled_date_time={[jn.between]:[e.format(),t.format()]}}if(n&&"weekly"===l){const e=Rn(n).startOf("week"),t=Rn(n).endOf("week");d.scheduled_date_time={[jn.between]:[e.format(),t.format()]}}if("previous"===l){const e=Rn().subtract(1,"days").endOf("day").format();d.scheduled_date_time={[jn.lt]:e}}if("upcomming"===l){const e=Rn().add(1,"days").startOf("day").format();d.scheduled_date_time={[jn.gt]:e}}return i&&(d.case_id=i),"true"===a?this.__repo.paginate({where:Object.assign({},d)},Number(o),Number(s),null):this.__repo.findAll(Object.assign({},d))})),this.getAppointmentListV1=(e,t)=>kn(this,void 0,void 0,(function*(){const{end_date:i,patient_id:a,patient_name:n,case_ids:o,doctor_ids:s,facility_location_ids:l,start_date:d,user_id:_=Number(process.env.USERID),appointment_type_ids:r,appointment_status_ids:c,speciality_ids:p,case_type_ids:u,patient_status_ids:m,paginate:y,page:h,per_page:f}=e,v={headers:{Authorization:t}},g=this.shallowCopy(yield this.__userRepo.findOne({deleted_at:null,id:_}));if(!g||!Object.keys(g).length)throw un("NO_RECORD_FOUND");const b=this.shallowCopy(yield this.__modelHasRolesRepo.findOne({model_id:_},{include:{model:he,as:"role",required:!1}})),{role:S,role:{slug:I}}=b||{};if(S&&"kiosk"===I){const e=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,user_id:_}));if(!e||!e.length)throw un("USER_NOT_ALLOWED");if(!e.filter((e=>l.includes(e.facility_location_id))).length)throw un("USER_NOT_ALLOWED")}let D;if(!Object.keys(S).length||"super_admin"!==I){const e=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,speciality_id:{[jn.ne]:null},user_id:_}));if(!e&&!e.length)throw un("NO_APPOINTMENT_TO_SHOW");D=_}if(o&&o.length){const{status:e}=yield this.__http.put(`${process.env.KIOSK_URL}case/search-count`,{ids:o},v);if(200!==e)throw un("ERROR_WHILE_UPDATING_STATUS")}const w=this.generateAppointmentListCountV1({patientStatusIds:m,facilityLocationIds:l,specialityIds:p,doctorIds:s,patientId:a,patientName:n,appointmentTypeIds:r,appointmentStatusIds:c,caseTypeIds:u,caseIds:o,startDate:d,endDate:i,page:h,perPage:f}),[O]=this.shallowCopy(yield _a.query(w)),[T]=O,A=this.generateAppointmentListRawQuery({patientStatusIds:m,facilityLocationIds:l,specialityIds:p,doctorIds:s,patientId:a,patientName:n,appointmentTypeIds:r,appointmentStatusIds:c,caseTypeIds:u,caseIds:o,startDate:d,endDate:i,paginate:y,page:h,perPage:f}),[N]=this.shallowCopy(yield _a.query(A)),C=N.map((e=>e.appointment_id)),R=this.shallowCopy(yield this.__repo.findAll({deleted_at:null,id:C},{include:[{model:Ni,as:"appointmentCptCodes",required:!1,where:{deleted_at:null},include:{model:Oi,as:"billingCode",required:!1,where:{deleted_at:null}}},{model:gi,as:"transportations",required:!1,where:{deleted_at:null}}]})),E=this.appointmentListResultMapping(N,R);return y?{docs:E,page_number:h,pages:Math.ceil(T.total_count/f),total:T.total_count}:E})),this.getAppointmentListV2=(e,t)=>kn(this,void 0,void 0,(function*(){const{end_date:i,patient_id:a,patient_name:n,case_ids:o,doctor_ids:s,facility_location_ids:l,start_date:d,user_id:_=Number(process.env.USERID),appointment_type_ids:r,appointment_status_ids:c,speciality_ids:p,case_type_ids:u,patient_status_ids:m,paginate:y,page:h,per_page:f}=e,v={headers:{Authorization:t}},g=this.shallowCopy(yield this.__userRepo.findOne({deleted_at:null,id:_}));if(!g||!Object.keys(g).length)throw un("NO_RECORD_FOUND");const b=this.shallowCopy(yield this.__modelHasRolesRepo.findOne({model_id:_},{include:{model:he,as:"role",required:!1}})),{role:S,role:{slug:I}}=b||{};if(S&&"kiosk"===I){const e=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,user_id:_}));if(!e||!e.length)throw un("USER_NOT_ALLOWED");if(!e.filter((e=>l.includes(e.facility_location_id))).length)throw un("USER_NOT_ALLOWED")}let D;if(!Object.keys(S).length||"super_admin"!==I){const e=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,speciality_id:{[jn.ne]:null},user_id:_}));if(!e&&!e.length)throw un("NO_APPOINTMENT_TO_SHOW");D=_}o&&o.length&&(yield this.__http.put(`${process.env.KIOSK_URL}case/search-count`,{ids:o},v));const w=this.generateAppointmentListCountV1({patientStatusIds:m,facilityLocationIds:l,specialityIds:p,doctorIds:s,patientId:a,patientName:n,appointmentTypeIds:r,appointmentStatusIds:c,caseTypeIds:u,caseIds:o,startDate:d,endDate:i,page:h,perPage:f}),[O]=this.shallowCopy(yield _a.query(w)),[T]=O,A=this.generateAppointmentListRawQueryV1({patientStatusIds:m,facilityLocationIds:l,specialityIds:p,doctorIds:s,patientId:a,patientName:n,appointmentTypeIds:r,appointmentStatusIds:c,caseTypeIds:u,caseIds:o,startDate:d,endDate:i,paginate:y,page:h,perPage:f}),[N]=this.shallowCopy(yield _a.query(A));return y?{docs:N,page_number:h,pages:Math.ceil(T.total_count/f),total:T.total_count}:N})),this.getAppointmentModelDataById=(e,t)=>kn(this,void 0,void 0,(function*(){var i,a,n,o,s,l,d;const{id:_,appointment_type:r}=e,c={headers:{Authorization:t}},p=r?null==r?void 0:r.toUpperCase():"SCHEDULED";if(!["CANCELLED","SCHEDULED","RESCHEDULED"].includes(p))throw new Error("Invalid listing type provided!");const u=[];"SCHEDULED"===p?u.push({as:"patientSessions",attributes:["id"],include:{as:"visitStatus",attributes:["id","name","slug"],model:Pt,required:!1,where:{deleted_at:null}},model:B,required:!1,where:{deleted_at:null}},{model:le,as:"readingProvider",required:!1,attributes:["id","email"],include:{attributes:["first_name","middle_name","last_name"],model:Ce,required:!1},deleted_at:null},{model:gi,attributes:["city","comments","is_pickup","is_dropoff","phone","state","street_address","suit","zip","type"],as:"transportations",required:!1,where:{deleted_at:null}},{model:Ni,as:"appointmentCptCodes",attributes:["id"],required:!1,where:{deleted_at:null},include:{model:Oi,as:"billingCode",attributes:["id","name","description"],required:!1,where:{deleted_at:null}}},{model:Ui,as:"physicianClinic",attributes:["clinic_locations_id","id","physician_id","clinic_id"],required:!1,where:{deleted_at:null},include:[{model:Ii,as:"physician",attributes:["first_name","last_name","middle_name"],required:!1,where:{deleted_at:null}},{model:Mi,as:"clinic",attributes:["name"],required:!1,where:{deleted_at:null}},{model:xi,as:"clinicLocation",attributes:["city","floor","street_address","zip","state"],required:!1,where:{deleted_at:null}}]},{as:"appointmentType",attributes:["id","name","slug","qualifier"],include:{as:"specialityVisitType",model:Y,where:{deleted_at:null}},model:J,required:!1,where:{deleted_at:null}},{as:"appointmentStatus",attributes:["id","name","slug"],model:g,required:!1,where:{deleted_at:null}},{as:"priority",attributes:["id","name","slug"],model:ee,required:!1,where:{deleted_at:null}}):("CANCELLED"===p||"RESCHEDULED"===p)&&u.push({as:"updatedBy",attributes:["id"],include:{attributes:["first_name","middle_name","last_name"],as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}});const m=this.shallowCopy(yield this.__repo.findById(_,{include:[{as:"case",attributes:["id"],model:ti,include:[{model:ni,as:"caseStatus",attributes:["id","name"],required:!1,where:{deleted_at:null}},{model:Wt,as:"caseType",attributes:["id","name"],required:!1,where:{deleted_at:null}}]},{as:"availableDoctor",include:{as:"doctor",attributes:["id"],include:[{as:"userBasicInfo",model:Ce,required:!1,attributes:["first_name","middle_name","last_name"],where:{deleted_at:null}},{as:"medicalIdentifiers",model:Mt,attributes:["id"],required:!1,include:{as:"billingTitle",required:!1,attributes:["id","name"],model:xt,where:{deleted_at:null}},where:{deleted_at:null}}],model:le,required:!1,where:{deleted_at:null}},model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:[{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},{as:"facilityLocation",attributes:["id","name","qualifier"],include:{as:"facility",attributes:["id","name","qualifier","slug"],model:Ut,required:!1,where:{deleted_at:null}},model:Oe,required:!1}],model:it,required:!1,where:{deleted_at:null}},{as:"patient",model:Et,required:!1,attributes:["first_name","middle_name","last_name"]},{model:le,as:"technician",required:!1,attributes:["id","email"],include:{model:Ce},where:{deleted_at:null}},{model:Ke,as:"appointmentVisit",required:!1,include:{model:$e},where:{deleted_at:null}},...u]})),y=this.formattedPatient([m],c),h=m||{},{case:f,availableDoctor:v,availableSpeciality:b,patientSessions:S,readingProvider:I,appointmentCptCodes:D,physicianClinic:w,appointmentStatus:O,appointmentType:T,updatedBy:A}=h,N=Pn(h,["case","availableDoctor","availableSpeciality","patientSessions","readingProvider","appointmentCptCodes","physicianClinic","appointmentStatus","appointmentType","updatedBy"]),C=v&&(null===(i=null==v?void 0:v.doctor)||void 0===i?void 0:i.userBasicInfo)?Object.assign(Object.assign({doctor_id:null===(a=null==v?void 0:v.doctor)||void 0===a?void 0:a.id},null===(n=null==v?void 0:v.doctor)||void 0===n?void 0:n.userBasicInfo),{billingTitle:null===(l=null===(s=null===(o=null==v?void 0:v.doctor)||void 0===o?void 0:o.medicalIdentifiers)||void 0===s?void 0:s.billingTitle)||void 0===l?void 0:l.name}):null;return Object.assign(Object.assign({speciality:(null==b?void 0:b.speciality)?null==b?void 0:b.speciality:null,facility_location:(null==b?void 0:b.facilityLocation)?null==b?void 0:b.facilityLocation:null,visit_status:(null==S?void 0:S.visitStatus)?null==S?void 0:S.visitStatus:null,patient_session:null!=S?S:null,reading_provider:(null==I?void 0:I.userBasicInfo)?Object.assign({id:null==I?void 0:I.id},null==I?void 0:I.userBasicInfo):null,appointment_cpt_codes:(null==D?void 0:D.length)?D.map((e=>e.billingCode)):null,physician_clinic:w?Object.assign(Object.assign(Object.assign({id:null==w?void 0:w.id,clinic_id:null==w?void 0:w.clinic_id,clinic_locations_id:null==w?void 0:w.clinic_locations_id,physician_id:null==w?void 0:w.physician_id},null==w?void 0:w.clinic),null==w?void 0:w.clinicLocation),null==w?void 0:w.physician):null,doctor_info:C,case_type:null!==(d=null==f?void 0:f.caseType)&&void 0!==d?d:null,appointment_type:null!=T?T:null,appointment_status:null!=O?O:null,updated_by:A&&(null==A?void 0:A.userBasicInfo)?Object.assign({},null==A?void 0:A.userBasicInfo):null},N),{formated_data:y})})),this.getAppointmentInfoForSpeciality=(e,t)=>kn(this,void 0,void 0,(function*(){var t,i,a;const{id:n,speciality_id:o}=e,s=this.shallowCopy(yield this.__repo.findById(n,{attributes:["id","case_id","patient_id","case_type_id","billable"],include:[{model:Ni,attributes:["billing_code_id"],as:"appointmentCptCodes",required:!1,where:{deleted_at:null},include:{model:Oi,attributes:["name","code_type_id","type","description","short_description","medium_description","long_description","comments"],as:"billingCode",required:!1,where:{deleted_at:null}}},{model:Wt,as:"caseType",attributes:["slug","name"],required:!1,where:{deleted_at:null}},{as:"case",attributes:["category_id","case_type_id","creation_source","date_of_admission"],include:[{model:na,attributes:["slug","name"],as:"category",required:!1},{as:"caseAccidentInformation",attributes:["id","accident_date"],model:ui,required:!1},{model:u,as:"caseInsurances",where:{deleted_at:null},required:!1,include:{model:la,attributes:["insurance_name","insurance_code","is_verified"],as:"insurance",required:!1,where:{deleted_at:null}}},{as:"casePurposeOfVisit",attributes:["slug","name"],required:!1,model:ri},{model:Xi,attributes:["occupation"],as:"caseEmployers",where:{deleted_at:null},required:!1,include:[{model:ta,as:"caseEmployerType",attributes:["id"],where:{slug:"primary"}}]}],model:ti,required:!1},{as:"patient",model:Et,required:!1,attributes:["first_name","middle_name","last_name","dob","age","gender","ssn","height_in","height_ft","weight_lbs","weight_kg","meritial_status"]},{as:"patientSessions",attributes:["date_of_check_in","time_of_check_in"],model:B,required:!0,where:{deleted_at:null}}]})),{patient:l,case:d,caseType:_,patientSessions:r,appointmentCptCodes:c}=s;let p=(1e9+s.patient_id).toString();p=p.substring(1,10),p=`${p.substring(0,3)}-${p.substring(3,5)}-${p.substring(5,9)}`;const m=` SELECT visit_sessions.visit_date\n        FROM visit_sessions\n        WHERE visit_sessions.deleted_at IS NULL and \n        visit_sessions.speciality_id = ${o} and \n        visit_sessions.case_id = ${s.case_id} and \n        visit_sessions.appointment_type_id = 1 \n        limit 1;`,[y]=this.shallowCopy(yield _a.query(m));return{id:s.case_id,category_id:d.category_id,case_type_id:s.case_type_id,creation_source:d.creation_source,creation_source_string:this.__getKioskCreationSource[`${d.creation_source}`],date_of_admission:(null==d?void 0:d.date_of_admission)?Rn(null==d?void 0:d.date_of_admission).format("MM-DD-YYYY"):null,occupation:(null===(t=null==d?void 0:d.caseEmployers)||void 0===t?void 0:t.length)?d.caseEmployers[0].occupation:null,category:null==d?void 0:d.category,patient_id:null==s?void 0:s.patient_id,first_name:null==l?void 0:l.first_name,middle_name:null==l?void 0:l.middle_name,last_name:null==l?void 0:l.last_name,dob:(null==l?void 0:l.dob)?Rn(null==l?void 0:l.dob).format("MM-DD-YYYY"):null,age:null==l?void 0:l.age,gender:null==l?void 0:l.gender,ssn:null==l?void 0:l.ssn,height_in:null==l?void 0:l.height_in,height_ft:null==l?void 0:l.height_ft,weight_lbs:null==l?void 0:l.weight_lbs,weight_kg:null==l?void 0:l.weight_kg,meritial_status:null==l?void 0:l.meritial_status,case_type:null==_?void 0:_.name,case_type_slug:null==_?void 0:_.slug,chart_id:p,caseInsurances:(null==d?void 0:d.caseInsurances)?d.caseInsurances:null,initial_evalutation_date:y&&y.length?y[0].visit_date:null,accident_date:(null===(i=null==d?void 0:d.caseAccidentInformation)||void 0===i?void 0:i.accident_date)?Rn(null===(a=null==d?void 0:d.caseAccidentInformation)||void 0===a?void 0:a.accident_date).format("MM-DD-YYYY"):null,purpose_of_visit:null==d?void 0:d.casePurposeOfVisit,check_in_date:(null==r?void 0:r.date_of_check_in)?Rn(null==r?void 0:r.date_of_check_in).format("MM-DD-YYYY"):null,check_in_time:null==r?void 0:r.time_of_check_in,cpt_codes:null==c?void 0:c.map((e=>{var t,i,a,n,o,s,l,d;return{id:e.billing_code_id,name:null===(t=null==e?void 0:e.billingCode)||void 0===t?void 0:t.name,type:null===(i=null==e?void 0:e.billingCode)||void 0===i?void 0:i.type,code_type_id:null===(a=null==e?void 0:e.billingCode)||void 0===a?void 0:a.code_type_id,description:null===(n=null==e?void 0:e.billingCode)||void 0===n?void 0:n.description,short_description:null===(o=null==e?void 0:e.billingCode)||void 0===o?void 0:o.short_description,medium_description:null===(s=null==e?void 0:e.billingCode)||void 0===s?void 0:s.medium_description,long_description:null===(l=null==e?void 0:e.billingCode)||void 0===l?void 0:l.long_description,comments:null===(d=null==e?void 0:e.billingCode)||void 0===d?void 0:d.comments}}))}})),this.getCancelledAppointments=(e,t)=>kn(this,void 0,void 0,(function*(){const{page:i,per_page:a,facility_location_ids:n,speciality_ids:o,provider_ids:s,start_date_time:l,end_date_time:d,case_ids:_,comments:r}=e,c={},p={headers:{Authorization:t}};if(l&&!d&&Object.assign(c,{updated_at:{[jn.gte]:new Date(l)}}),!l&&d&&Object.assign(c,{updated_at:{[jn.lte]:new Date(d)}}),l&&d&&Object.assign(c,{updated_at:{[jn.between]:[new Date(l),new Date(d)]}}),_&&_.length){Object.assign(c,{case_id:{[jn.in]:_}});const{status:e}=yield this.__http.put(`${process.env.KIOSK_URL}case/search-count`,{ids:_},p);if(200!==e)throw un("ERROR_WHILE_UPDATING_STATUS")}r&&r.length&&Object.assign(c,{cancelled_comments:{[jn.like]:"%"+r+"%"}});const u={deleted_at:null},m={deleted_at:null};n&&n.length&&(m.id={[jn.in]:n}),s&&s.length&&(u.id={[jn.in]:s});const y={deleted_at:null};o&&o.length&&(y.id={[jn.in]:o});const h=a||10,f=i||1,v=this.shallowCopy(yield this.__repo.customAppointmentpaginate({where:Object.assign({cancelled:!0,deleted_at:null},c)},f,h,null,{include:[{as:"dateList",include:[{as:"availableDoctor",include:[{as:"doctor",attributes:{exclude:["password"]},include:[{as:"userBasicInfo",attributes:["id","first_name","last_name","middle_name","user_id"],model:Ce,required:!1,where:{deleted_at:null}},{as:"medicalIdentifiers",attributes:["id"],include:{as:"billingTitle",attributes:["id","name"],model:xt,required:!1,where:{deleted_at:null}},model:Mt,required:!1,where:{deleted_at:null}}],model:le,required:!0,where:Object.assign({},u)},{as:"facilityLocations",include:{as:"facility",model:Ut,required:!1,where:{deleted_at:null}},model:Oe,required:!(!n||!n.length),where:Object.assign({},m)},{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!1,where:Object.assign({},y)},model:it,required:!1,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:[{as:"speciality",model:ue,required:!1,where:Object.assign({},y)},{as:"facilityLocation",include:{as:"facility",model:Ut,required:!1},model:Oe,required:!(!n||!n.length),where:Object.assign({},m)}],model:it,required:!1,where:{deleted_at:null}}],model:qe,required:!0,where:{deleted_at:null}},{as:"patient",model:Et,required:!(!o||!o.length),where:{deleted_at:null}},{as:"appointmentStatus",model:g,required:!1,where:{deleted_at:null}},{as:"updatedBy",include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!(!o||!o.length),where:{deleted_at:null}}],order:[["updated_at","DESC"]]})),{docs:b,no_of_pages:S,total:I,page_number:D,is_last:w}=v||{};return{docs:b,page_number:D,is_last:w,pages:S,total:I}})),this.getCancelledAppointmentsV1=(e,t)=>kn(this,void 0,void 0,(function*(){const{page:i,per_page:a,paginate:n,facility_location_ids:o,speciality_ids:s,provider_ids:l,start_date_time:d,end_date_time:_,case_ids:r,comments:c}=e,p={headers:{Authorization:t}};if(r&&r.length){const{status:e}=yield this.__http.put(`${process.env.KIOSK_URL}case/search-count`,{ids:r},p);if(200!==e)throw un("ERROR_WHILE_UPDATING_STATUS")}const u=this.rawQueryForCancelledAppointmentCount({facilityLocationIds:o,specialityIds:s,providerIds:l,dateFrom:d,dateTo:_,comments:c,page:i,perPage:a,caseIds:r,paginate:!1}),[m]=this.shallowCopy(yield _a.query(u)),y=m.length,h=this.rawQueryForCancelledAppointment({facilityLocationIds:o,specialityIds:s,providerIds:l,dateFrom:d,dateTo:_,comments:c,page:i,perPage:a,caseIds:r,paginate:n}),[f]=yield _a.query(h),v=this.filterNonNull(null==f?void 0:f.map((e=>{let t={},i={},a={},n={},o={},s={},l={},d={},_={},r={},c={},p={},u={},m={};return e.medicalIdentifier_id&&(u={id:e.medicalIdentifier_id,clinic_name:e.medicalIdentifier_clinic_name}),e.billingTitles_id&&(m={id:e.billingTitles_id,name:e.billingTitles_name,description:e.billingTitles_description}),(null==e?void 0:e.doctorBasicInfo_id)&&(a={id:null==e?void 0:e.doctorBasicInfo_id,first_name:null==e?void 0:e.doctorBasicInfo_first_name,middle_name:null==e?void 0:e.doctorBasicInfo_middle_name,last_name:null==e?void 0:e.doctorBasicInfo_last_name,date_of_birth:null==e?void 0:e.doctorBasicInfo_date_of_birth,gender:null==e?void 0:e.doctorBasicInfo_gender,user_id:null==e?void 0:e.doctorBasicInfo_user_id,area_id:null==e?void 0:e.doctorBasicInfo_area_id,title:null==e?void 0:e.doctorBasicInfo_title,cell_no:null==e?void 0:e.doctorBasicInfo_cell_no,address:null==e?void 0:e.doctorBasicInfo_address,work_phone:null==e?void 0:e.doctorBasicInfo_work_phone,fax:null==e?void 0:e.doctorBasicInfo_fax,extension:null==e?void 0:e.doctorBasicInfo_extension,home_phone:null==e?void 0:e.doctorBasicInfo_home_phone,emergency_name:null==e?void 0:e.doctorBasicInfo_emergency_name,emergency_phone:null==e?void 0:e.doctorBasicInfo_emergency_phone,biography:null==e?void 0:e.doctorBasicInfo_biography,hiring_date:null==e?void 0:e.doctorBasicInfo_hiring_date,from:null==e?void 0:e.doctorBasicInfo_from,to:null==e?void 0:e.doctorBasicInfo_to,profile_pic:null==e?void 0:e.doctorBasicInfo_profile_pic,city:null==e?void 0:e.doctorBasicInfo_city,state:null==e?void 0:e.doctorBasicInfo_state,zip:null==e?void 0:e.doctorBasicInfo_zip,social_security:null==e?void 0:e.doctorBasicInfo_social_security,profile_pic_url:null==e?void 0:e.doctorBasicInfo_profile_pic_url,apartment_suite:null==e?void 0:e.doctorBasicInfo_apartment_suite}),(null==e?void 0:e.appointment_id)&&(n={id:null==e?void 0:e.appointment_id,key:null==e?void 0:e.appointment_key,scheduled_date_time:null==e?void 0:e.appointment_scheduled_date_time,evaluation_date_time:null==e?void 0:e.appointment_evaluation_date_time,time_slots:null==e?void 0:e.appointment_time_slot,appointment_title:null==e?void 0:e.appointment_title,action_performed:null==e?void 0:e.appointment_action_performed,confirmation_status:null==e?void 0:e.appointment_confirmation_status,cancelled:null==e?void 0:e.appointment_cancelled,pushed_to_front_desk:null==e?void 0:e.appointment_pushed_to_front_dest,comments:null==e?void 0:e.appointment_comments,by_health_app:null==e?void 0:e.appointment_by_health_app,date_list_id:null==e?void 0:e.appointment_date_list_id,target_facility_id:null==e?void 0:e.appointment_target_facility_id,origin_facility_id:null==e?void 0:e.appointment_origin_facility_id,case_id:null==e?void 0:e.appointment_case_id,case_type_id:null==e?void 0:e.appointment_case_type_id,patient_id:null==e?void 0:e.appointment_patient_id,type_id:null==e?void 0:e.appointment_type_id,status_id:null==e?void 0:e.appointment_status_id,priority_id:null==e?void 0:e.appointment_priority_id,available_doctor_id:null==e?void 0:e.appointment_available_doctor_id,available_speciality_id:null==e?void 0:e.appointment_available_speciality_id,billable:null==e?void 0:e.appointment_billable,pushed_to_front_desk_comments:null==e?void 0:e.appointment_pushed_to_front_desk_comments,cancelled_comments:null==e?void 0:e.appointment_cancelled_comments,is_speciality_base:null==e?void 0:e.appointment_is_speciality_base,created_by:null==e?void 0:e.appointment_created_by,updated_by:null==e?void 0:e.appointment_updated_by,created_at:null==e?void 0:e.appointment_created_at,updated_at:null==e?void 0:e.appointment_updated_at,deleted_at:null==e?void 0:e.appointment_deleted_at,is_redo:null==e?void 0:e.appointment_is_redo,is_active:null==e?void 0:e.appointment_is_active,is_soft_registered:null==e?void 0:e.appointment_is_soft_registered,physician_id:null==e?void 0:e.appointment_physician_id,technician_id:null==e?void 0:e.appointment_technician_id,reading_provider_id:null==e?void 0:e.appointment_reading_provider_id,cd_image:null==e?void 0:e.appointment_cd_image,is_transportation:null==e?void 0:e.appointment_is_transportation}),(null==e?void 0:e.patient_id)&&(o={age:null==e?void 0:e.patient_age,cell_phone:null==e?void 0:e.patient_cell_phone,created_at:null==e?void 0:e.patient_created_at,created_by:null==e?void 0:e.patient_created_by,deleted_at:null==e?void 0:e.patient_deleted_at,dob:null==e?void 0:e.patient_dob,first_name:null==e?void 0:e.patient_first_name,gender:null==e?void 0:e.patient_gender,height_ft:null==e?void 0:e.patient_height_ft,height_in:null==e?void 0:e.patient_height_in,home_phone:null==e?void 0:e.patient_home_phone,id:null==e?void 0:e.patient_id,is_law_enforcement_agent:null==e?void 0:e.patient_is_law_enforcement_agent,is_pregnant:null==e?void 0:e.patient_is_pregnant,key:null==e?void 0:e.patient_key,language:null==e?void 0:e.patient_language,last_name:null==e?void 0:e.patient_last_name,meritial_status:null==e?void 0:e.patient_meritial_status,middle_name:null==e?void 0:e.patient_middle_name,need_translator:null==e?void 0:e.patient_need_translator,notes:null==e?void 0:e.patient_notes,profile_avatar:null==e?void 0:e.patient_profile_avatar,ssn:null==e?void 0:e.patient_ssn,status:null==e?void 0:e.patient_status,updated_at:null==e?void 0:e.patient_updated_at,updated_by:null==e?void 0:e.patient_updated_by,weight_kg:null==e?void 0:e.patient_weight_kg,weight_lbs:null==e?void 0:e.patient_weight_lbs,work_phone:null==e?void 0:e.patient_work_phone}),(null==e?void 0:e.appointmentStatus_id)&&(s={created_at:null==e?void 0:e.appointmentStatus_created_at,created_by:null==e?void 0:e.appointmentStatus_created_by,deleted_at:null==e?void 0:e.appointmentStatus_deleted_at,id:null==e?void 0:e.appointmentStatus_id,name:null==e?void 0:e.appointmentStatus_name,slug:null==e?void 0:e.appointmentStatus_slug,updated_at:null==e?void 0:e.appointmentStatus_updated_at,updated_by:null==e?void 0:e.appointmentStatus_updated_by}),(null==e?void 0:e.updatedBy_id)&&(l={created_at:null==e?void 0:e.updatedBy_created_at,created_by:null==e?void 0:e.updatedBy_created_by,deleted_at:null==e?void 0:e.updatedBy_deleted_at,email:null==e?void 0:e.updatedBy_email,id:null==e?void 0:e.updatedBy_id,is_loggedin:null==e?void 0:e.updatedBy_is_loggedIn,password:null==e?void 0:e.updatedBy_password,remember_token:null==e?void 0:e.updatedBy_remember_token,reset_key:null==e?void 0:e.updatedBy_reset_key,status:null==e?void 0:e.updatedBy_status,updated_at:null==e?void 0:e.updatedBy_updated_at,updated_by:null==e?void 0:e.updatedBy_updated_by}),(null==e?void 0:e.updatedByUserBasicInfo_id)&&(d={address:null==e?void 0:e.updatedByUserBasicInfo_address,apartment_suite:null==e?void 0:e.updatedByUserBasicInfo_apartment_suite,area_id:null==e?void 0:e.updatedByUserBasicInfo_area_id,biography:null==e?void 0:e.updatedByUserBasicInfo_biography,cell_no:null==e?void 0:e.updatedByUserBasicInfo_cell_no,city:null==e?void 0:e.updatedByUserBasicInfo_city,created_at:null==e?void 0:e.updatedByUserBasicInfo_created_at,created_by:null==e?void 0:e.updatedByUserBasicInfo_created_by,date_of_birth:null==e?void 0:e.updatedByUserBasicInfo_date_of_birth,deleted_at:null==e?void 0:e.updatedByUserBasicInfo_deleted_at,department_id:null==e?void 0:e.updatedByUserBasicInfo_department_id,designation_id:null==e?void 0:e.updatedByUserBasicInfo_designation_id,emergency_phone:null==e?void 0:e.updatedByUserBasicInfo_emergency_phone,employed_by_id:null==e?void 0:e.updatedByUserBasicInfo_employed_by_id,employment_type_id:null==e?void 0:e.updatedByUserBasicInfo_employment_type_id,extension:null==e?void 0:e.updatedByUserBasicInfo_extension,fax:null==e?void 0:e.updatedByUserBasicInfo_fax,file_id:null==e?void 0:e.updatedByUserBasicInfo_file_id,first_name:null==e?void 0:e.updatedByUserBasicInfo_first_name,from:null==e?void 0:e.updatedByUserBasicInfo_from,gender:null==e?void 0:e.updatedByUserBasicInfo_gender,hiring_date:null==e?void 0:e.updatedByUserBasicInfo_hiring_date,id:null==e?void 0:e.updatedByUserBasicInfo_id,last_name:null==e?void 0:e.updatedByUserBasicInfo_last_name,middle_name:null==e?void 0:e.updatedByUserBasicInfo_middle_name,profile_pic:null==e?void 0:e.updatedByUserBasicInfo_profile_pic,profile_pic_url:null==e?void 0:e.updatedByUserBasicInfo_profile_pic_url,social_security:null==e?void 0:e.updatedByUserBasicInfo_social_security,state:null==e?void 0:e.updatedByUserBasicInfo_state,title:null==e?void 0:e.updatedByUserBasicInfo_title,to:null==e?void 0:e.updatedByUserBasicInfo_to,updated_at:null==e?void 0:e.updatedByUserBasicInfo_updated_at,updated_by:null==e?void 0:e.updatedByUserBasicInfo_updated_by,user_id:null==e?void 0:e.updatedByUserBasicInfo_user_id,work_phone:null==e?void 0:e.updatedByUserBasicInfo_work_phone,zip:null==e?void 0:e.updatedByUserBasicInfo_zip}),(null==e?void 0:e.availableSpeciality_id)&&(t={id:null==e?void 0:e.availableSpeciality_id,key:null==e?void 0:e.availableSpeciality_key,start_date:null==e?void 0:e.availableSpeciality_start_date,end_date:null==e?void 0:e.availableSpeciality_end_date,end_date_for_recurrence:null==e?void 0:e.availableSpeciality_end_date_for_recurrence,no_of_doctors:null==e?void 0:e.availableSpeciality_no_of_doctors,no_of_slots:null==e?void 0:e.availableSpeciality_no_of_slots,end_after_occurences:null==e?void 0:e.availableSpeciality_end_after_occurences,number_of_entries:null==e?void 0:e.availableSpeciality_number_of_entries,speciality_id:null==e?void 0:e.availableSpeciality_speciality_id,facility_location_id:null==e?void 0:e.availableSpeciality_facility_location_id,recurrence_ending_criteria_id:null==e?void 0:e.availableSpeciality_recurrence_ending_criteria_id,deleted_at:null==e?void 0:e.availableSpeciality_deleted_at}),(null==e?void 0:e.availableSpecialityDoctor_id)&&(i={id:null==e?void 0:e.availableSpecialityDoctor_id,key:null==e?void 0:e.availableSpecialityDoctor_key,start_date:null==e?void 0:e.availableSpecialityDoctor_start_date,end_date:null==e?void 0:e.availableSpecialityDoctor_end_date,no_of_slots:null==e?void 0:e.availableSpecialityDoctor_no_of_slots,doctor_id:null==e?void 0:e.availableSpecialityDoctor_doctor_id,facility_location_id:null==e?void 0:e.availableSpecialityDoctor_facility_location_id,available_speciality_id:null==e?void 0:e.availableSpecialityDoctor_available_speciality_id,supervisor_id:null==e?void 0:e.availableSpecialityDoctor_supervisor_id,is_provider_assignment:null==e?void 0:e.availableSpecialityDoctor_is_provider_assignment}),(null==e?void 0:e.doctor_id)&&(_={id:null==e?void 0:e.doctor_id,email:null==e?void 0:e.doctor_email,reset_key:null==e?void 0:e.doctor_reset_key,status:null==e?void 0:e.doctor_status,is_loggedIn:null==e?void 0:e.doctor_is_loggedIn,remember_token:null==e?void 0:e.doctor_remember_token}),(null==e?void 0:e.facilityLocation_id)&&(r={id:null==e?void 0:e.facilityLocation_id,facility_id:null==e?void 0:e.facilityLocation_facility_id,name:null==e?void 0:e.facilityLocation_name,city:null==e?void 0:e.facilityLocation_city,state:null==e?void 0:e.facilityLocation_state,zip:null==e?void 0:e.facilityLocation_zip,region_id:null==e?void 0:e.facilityLocation_region_id,address:null==e?void 0:e.facilityLocation_address,phone:null==e?void 0:e.facilityLocation_phone,fax:null==e?void 0:e.facilityLocation_fax,email:null==e?void 0:e.facilityLocation_email,office_hours_start:null==e?void 0:e.facilityLocation_office_hours_start,office_hours_end:null==e?void 0:e.facilityLocation_office_hours_end,lat:null==e?void 0:e.facilityLocation_lat,long:null==e?void 0:e.facilityLocation_long,day_list:null==e?void 0:e.facilityLocation_day_list,floor:null==e?void 0:e.facilityLocation_floor,place_of_service_id:null==e?void 0:e.facilityLocation_place_of_service_id,qualifier:null==e?void 0:e.facilityLocation_qualifier,ext_no:null==e?void 0:e.facilityLocation_ext_no,cell_no:null==e?void 0:e.facilityLocation_cell_no,is_main:null==e?void 0:e.facilityLocation_is_main,same_as_provider:null==e?void 0:e.facilityLocation_same_as_provider,dean:null==e?void 0:e.facilityLocation_dean}),(null==e?void 0:e.specialities_id)&&(c={id:null==e?void 0:e.specialities_id,name:null==e?void 0:e.specialities_name,description:null==e?void 0:e.specialities_description,time_slot:null==e?void 0:e.specialities_time_slot,over_booking:null==e?void 0:e.specialities_over_booking,has_app:null==e?void 0:e.specialities_has_app,speciality_key:null==e?void 0:e.specialities_speciality_key,comments:null==e?void 0:e.specialities_comments,default_name:null==e?void 0:e.specialities_default_name,qualifier:null==e?void 0:e.specialities_qualifier,is_defualt:null==e?void 0:e.specialities_is_defualt,is_available:null==e?void 0:e.specialities_is_available,is_create_appointment:null==e?void 0:e.specialities_is_create_appointment,is_editable:null==e?void 0:e.specialities_is_editable}),(null==e?void 0:e.facilities_id)&&(p={created_at:null==e?void 0:e.facilities_created_at,created_by:null==e?void 0:e.facilities_created_by,deleted_at:null==e?void 0:e.facilities_deleted_at,id:null==e?void 0:e.facilities_id,name:null==e?void 0:e.facilities_name,slug:null==e?void 0:e.facilities_slug,qualifier:null==e?void 0:e.facilities_qualifier,updated_at:null==e?void 0:e.facilities_updated_at,updated_by:null==e?void 0:e.facilities_updated_by}),Object.assign(Object.assign({},n),{availableSpeciality:t?Object.assign(Object.assign({},t),{availableSpecialityDoctor:i?Object.assign(Object.assign({},i),{doctor:_?Object.assign(Object.assign({billingTitles:e.billingTitles_id?m:null},_),{doctorBasicInfo:a||null,medicalIdentifier:e.medicalIdentifier_id?u:null}):null}):null,facilityLocation:r?Object.assign(Object.assign({},r),{facility:p||null}):null,speciality:c||null}):null,patient:o,appointmentStatus:s,updatedBy:l?Object.assign(Object.assign({},l),{userBasicInfo:d?Object.assign({},d):null}):null})})));return n?{docs:v,page_number:i,pages:Math.ceil(y/a),total:y}:v})),this.getCount=(e,t)=>kn(this,void 0,void 0,(function*(){const{count_for:t,end_date:i,patient_id:a,case_id:n,doctor_ids:o,facility_location_ids:s,start_date:l,user_id:d=Number(process.env.USERID),appointment_type_ids:_,appointment_status_ids:r,speciality_ids:c,case_type_ids:p,patient_status_ids:u,case_ids:m,current_date:y}=e;return this[this.__getCount[`${t}`]](Object.assign({},e))})),this.getDoctorAppointments=(e,t)=>kn(this,void 0,void 0,(function*(){const{facility_location_ids:i,doctor_ids:a,end_date:n,start_date:o,speciality_ids:s,user_id:l=Number(process.env.USERID)}=e,d=new Date(o),_=new Date(n),r=this.shallowCopy(yield this.__availableDoctorRepo.findAll({deleted_at:null,doctor_id:{[jn.in]:a},facility_location_id:{[jn.in]:i}},{include:[{as:"dateList",model:qe,required:!0,where:{[jn.or]:[{deleted_at:null,end_date:{[jn.gte]:d},start_date:{[jn.lte]:d}},{deleted_at:null,start_date:{[jn.lte]:_,[jn.gte]:d}}]}},{as:"availableSpeciality",model:it,required:!(!s||!s.length),where:Object.assign({deleted_at:null},s&&{speciality_id:s}),include:{model:ue,as:"speciality",required:!(!s||!s.length),where:{deleted_at:null}}}]})),c=this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({[jn.or]:[{[jn.and]:[{start_date:{[jn.lte]:d}},{end_date:{[jn.gte]:d}},{doctor_id:{[jn.in]:a}},{deleted_at:null}]},{[jn.and]:[{start_date:{[jn.gte]:d}},{start_date:{[jn.lte]:_}},{doctor_id:{[jn.in]:a}},{deleted_at:null}]}]}));if(!r||!r.length)return{facility:[],unavailabilities:c};const p=this.__userRepo.getJoinClause("get_doctor_appointments"),u=this.shallowCopy(yield this.__userRepo.findOne({id:l},{include:p})),{colorCodes:m}=u,y=this.shallowCopy(yield this.__facilityLocationRepo.findAll({deleted_at:null,id:{[jn.in]:i}},{include:{as:"facility",model:Ut,required:!1}}));if(!(u&&Object.keys(u).length||y&&y.length))throw un("NO_RECORD_FOUND");const h=r.map((e=>e.id)),f=this.__repo.getJoinClause("get_doctor_appointments"),v=this.shallowCopy(yield this.__repo.findAll({available_doctor_id:{[jn.in]:h},cancelled:0,deleted_at:null,pushed_to_front_desk:0,scheduled_date_time:{[jn.between]:[d,_]}},{include:[...f,{as:"availableDoctor",include:[{as:"doctor",attributes:{exclude:["password"]},include:{as:"userBasicInfo",attributes:["id","first_name","last_name","middle_name","profile_pic","user_id"],model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:{model:ue,as:"speciality",required:!1,where:Object.assign({deleted_at:null},s&&{id:s})},model:it,required:!1,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:{model:ue,as:"speciality",required:!(!s||!s.length),where:Object.assign({deleted_at:null},s&&{id:s})},model:it,required:!(!s||!s.length),where:{deleted_at:null}},{as:"case",attributes:["id"],model:ti,include:[{model:ni,as:"caseStatus",attributes:["id","name"],required:!1,where:{deleted_at:null}},{model:Wt,as:"caseType",attributes:["id","name"],required:!1,where:{deleted_at:null}}]},{model:Ui,as:"physicianClinic",attributes:["id","clinic_id","clinic_locations_id","physician_id"],required:!1,where:{deleted_at:null},include:[{model:Ii,as:"physician",attribute:["id","first_name","last_name","middle_name","cell_no","email","npi_no","license_no"],required:!1,where:{deleted_at:null}},{model:Mi,as:"clinic",required:!1,where:{deleted_at:null}},{model:xi,as:"clinicLocation",required:!1,where:{deleted_at:null}}]},{model:le,as:"technician",required:!1,attributes:["id","email"],include:{model:Ce},where:{deleted_at:null}},{model:le,as:"readingProvider",required:!1,attributes:["id","email"],include:{model:Ce},deleted_at:null},{model:gi,as:"transportations",required:!1,where:{deleted_at:null}},{model:Ni,as:"appointmentCptCodes",required:!1,where:{deleted_at:null},include:{model:Oi,as:"billingCode",required:!1,where:{deleted_at:null}}},{as:"appointmentType",attributes:["id","name","slug"],include:{as:"specialityVisitType",model:Y,where:{speciality_id:{[jn.in]:s}}},model:J,required:!1,where:{deleted_at:null}},{as:"patientSessions",include:{as:"visitStatus",model:Pt,required:!1,where:{deleted_at:null}},model:B,required:!1,where:{deleted_at:null}}],order:[["scheduled_date_time","ASC"]]})),g=this.facilityWiseMapping(r,y,m);if(!v||!v.length)return{facility:[...g],unavailabilities:[...c]};const b=(new Date).toISOString().slice(0,10),S={case_ids:v.map((e=>e.case_id)),current_date:b},I={headers:{Authorization:t}},D=yield this.__http.post(`${process.env.KIOSK_URL}case-patient-session/checked-in-patient`,Object.assign({},S),Object.assign({},I)),{data:w}=null==D?void 0:D.result;if(!w||!Object.keys(w).length)throw un("CANNOT_GET_VISIT_STATUS");const O=this.confirmDescriptionsOfPatient(v),T=this.confirmStatusFromKiosk(O,w),A=this.formattedPatient(T.flat(),I);return{facility:[...this.availibilityWiseMapping(A,g)],unavailabilities:[...c]}})),this.getDoctorAppointmentsById=(e,t)=>kn(this,void 0,void 0,(function*(){const{doctor_id:t}=e,i=(new Date).toISOString().slice(0,10);return this.shallowCopy(yield this.__repo.findAll({cancelled:0,deleted_at:null,evaluation_date_time:null,scheduled_date_time:{[jn.gte]:i}},{include:[{as:"availableDoctor",model:ot,required:!0,where:{doctor_id:t,deleted_at:null}}]}))})),this.getInfo=(e,t)=>kn(this,void 0,void 0,(function*(){const{id:t,user_id:i=Number(process.env.USERID)}=e,a=this.shallowCopy(yield this.__repo.findOne({cancelled:0,deleted_at:null,id:t,pushed_to_front_desk:0},{attributes:["available_doctor_id"],include:[{as:"availableSpeciality",include:{as:"facilityLocation",model:Oe,required:!1,where:{deleted_at:null}},model:it,required:!1,where:{deleted_at:null}},{as:"availableDoctor",include:{as:"facilityLocations",model:Oe,required:!1,where:{deleted_at:null}},model:ot,required:!1,where:{deleted_at:null}}]}));return a.available_doctor_id?[{facility_location:a.availableDoctor.facilityLocations}]:[{facility_location:null==a?void 0:a.availableSpeciality.facilityLocation}]})),this.getNextAndLastAppointment=(e,t)=>kn(this,void 0,void 0,(function*(){var t,i;const{case_ids:a}=e,n=this.shallowCopy(yield this.__repo.findAll({case_id:{[jn.in]:a},deleted_at:null}));if(!(null==n?void 0:n.length))return[];const o=this.shallowCopy(yield this.__appointmentStatusRepo.findAll()),s=(null==o?void 0:o.find((e=>"completed"===e.slug))).id,l=(null==o?void 0:o.find((e=>"scheduled"===e.slug))).id,d=(null==o?void 0:o.find((e=>"re_scheduled"===e.slug))).id;return null===(i=null===(t=n.map((e=>e)))||void 0===t?void 0:t.reduce(((e,t)=>{const i=e.findIndex((e=>e.case_id===t.case_id));return-1===i?e=[...e,{appointments:[t],case_id:t.case_id}]:(e[i].appointments=[...e[i].appointments,t],e)}),[]))||void 0===i?void 0:i.map((e=>{const{appointments:t}=e,i=Pn(e,["appointments"]),a=t.filter((e=>e.status_id===s)),n=t.filter((e=>new Date(e.scheduled_date_time)>new Date&&(e.status_id===l||e.status_id===d)));return Object.assign(Object.assign({},i),{last_appointment:a[0],next_appointment:n[0]})}))})),this.getPatientAppointments=(e,t)=>kn(this,void 0,void 0,(function*(){const{appointment_status_id:t,end_date:i,start_date:a,patient_id:n,practice_location_id:o,speciality_id:s,case_id:l,user_id:d=Number(process.env.USERID)}=e,_=new Date(a),r=new Date(i),c=a&&i?{cancelled:1,deleted_at:null,patient_id:n,pushed_to_front_desk:0,scheduled_date_time:{[jn.between]:[_,r]}}:{cancelled:1,deleted_at:null,patient_id:n,pushed_to_front_desk:0};t&&(c.status_id=t);const p={deleted_at:null};s&&(p.id=s);const u=this.shallowCopy(yield this.__repo.findAll(Object.assign(Object.assign({},c),{available_doctor_id:null}),{include:[{as:"availableSpeciality",include:[{as:"speciality",model:ue,required:!!s,where:Object.assign({},p)},{as:"facilityLocation",include:{as:"facility",model:Ut,required:!1},model:Oe,required:!1,where:{deleted_at:null}}],model:it,required:!1,where:{deleted_at:null}},{as:"patientSessions",include:{as:"visitStatus",model:Pt,required:!1,where:{deleted_at:null}},model:B,required:!1,where:{deleted_at:{[jn.ne]:null}},order:[["deleted_at","DESC"]]},{model:Ui,as:"physicianClinic",attributes:["id","clinic_id","clinic_locations_id","physician_id"],required:!1,include:{model:Ii,as:"physician",attribute:["id","first_name","last_name","middle_name","cell_no","email","npi_no","license_no"],required:!1,where:{deleted_at:null}},where:{deleted_at:null}},{model:le,as:"technician",required:!1,attributes:["id","email"],include:{model:Ce},where:{deleted_at:null}},{model:le,as:"readingProvider",required:!1,attributes:["id","email"],include:{model:Ce},deleted_at:null},{model:gi,as:"transportations",required:!1,where:{deleted_at:null}},{model:Ni,as:"appointmentCptCodes",required:!1,where:{deleted_at:null},include:{model:Oi,as:"billingCode",required:!1,where:{deleted_at:null}}},{as:"appointmentStatus",model:g,required:!1,where:{deleted_at:null}}]})),m=this.shallowCopy(yield this.__repo.findAll(Object.assign(Object.assign({},c),{id:{[jn.notIn]:null==u?void 0:u.map((e=>e.id))}}),{include:[{as:"availableDoctor",include:[{as:"facilityLocations",include:{as:"facility",model:Ut,required:!1,where:{deleted_at:null}},model:Oe,required:!1,where:{deleted_at:null}},{as:"doctor",attributes:{exclude:["password"]},include:[{as:"userBasicInfo",attributes:["id","first_name","last_name","middle_name","user_id"],model:Ce,required:!1,where:{deleted_at:null}},{as:"medicalIdentifiers",attributes:["id"],include:{as:"billingTitle",attributes:["id","name"],model:xt,required:!1,where:{deleted_at:null}},model:Mt,required:!1,where:{deleted_at:null}}],model:le,required:!1,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:[{as:"speciality",model:ue,required:!!s,where:Object.assign({},p)}],model:it,required:!1,where:{deleted_at:null}},{as:"patientSessions",include:{as:"visitStatus",model:Pt,required:!1,where:{deleted_at:null}},model:B,required:!1,where:{deleted_at:{[jn.ne]:null}},order:[["deleted_at","DESC"]]},{model:Ui,as:"physicianClinic",attributes:["id","clinic_id","clinic_locations_id","physician_id"],required:!1,include:{model:Ii,as:"physician",attribute:["id","first_name","last_name","middle_name","cell_no","email","npi_no","license_no"],required:!1,where:{deleted_at:null}},where:{deleted_at:null}},{model:le,as:"technician",required:!1,attributes:["id","email"],include:{model:Ce},where:{deleted_at:null}},{model:le,as:"readingProvider",required:!1,attributes:["id","email"],include:{model:Ce},deleted_at:null},{model:gi,as:"transportations",required:!1,where:{deleted_at:null}},{model:Ni,as:"appointmentCptCodes",required:!1,where:{deleted_at:null},include:{model:Oi,as:"billingCode",required:!1,where:{deleted_at:null}}},{as:"appointmentStatus",model:g,required:!1,where:{deleted_at:null}}]})),y=[...u,...m],h=y&&y.length?y.map((e=>{var t,i;const{appointmentStatus:a,availableDoctor:n,availableSpeciality:o,patientSessions:s,physicianClinic:l}=e,d=Pn(e,["appointmentStatus","availableDoctor","availableSpeciality","patientSessions","physicianClinic"]),_=l?Object.assign(Object.assign({},l),{physician:(null==l?void 0:l.physician)?Object.assign(Object.assign(Object.assign({physician_clinic_id:null==l?void 0:l.id},null==l?void 0:l.physician),null==l?void 0:l.clinic),null==l?void 0:l.clinicLocation):null}):null;return Object.assign({appointment_status:null==a?void 0:a.name,appointment_status_slug:null==a?void 0:a.slug,available_doctor:n,available_speciality:o,physician_clinic:_,visit_status_name:null===(t=null==s?void 0:s.visitStatus)||void 0===t?void 0:t.name,visit_status_slug:null===(i=null==s?void 0:s.visitStatus)||void 0===i?void 0:i.slug},d)})):[];let f={cancelled:0,pushed_to_front_desk:0,patient_id:n,deleted_at:null};a&&i&&(f=Object.assign(Object.assign({},f),{scheduled_date_time:{[jn.between]:[_,r]}})),l&&(f.case_id=l),t&&(f.status_id=t);const v=this.shallowCopy(yield this.__repo.findAll(Object.assign({available_doctor_id:null},f),{include:[{as:"caseType",attributes:["name","slug"],model:Wt,required:!0,where:{deleted_at:null}},{as:"appointmentStatus",model:g,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:[{as:"speciality",model:ue,required:!!s,where:Object.assign({},p)},{as:"facilityLocation",include:{as:"facility",model:Ut,required:!1},model:Oe,required:!1,where:{deleted_at:null}}],model:it,required:!1,where:{deleted_at:null}},{as:"priority",model:ee,required:!1,where:{deleted_at:null}},{as:"appointmentType",model:J,required:!1,where:{deleted_at:null}},{as:"patientSessions",include:{as:"visitStatus",model:Pt,required:!1,where:{deleted_at:null}},model:B,required:!1,where:{deleted_at:null}},{model:Ui,as:"physicianClinic",attributes:["id","clinic_id","clinic_locations_id","physician_id"],required:!1,include:{model:Ii,as:"physician",attribute:["id","first_name","last_name","middle_name","cell_no","email","npi_no","license_no"],required:!1,where:{deleted_at:null}},where:{deleted_at:null}},{model:le,as:"technician",required:!1,attributes:["id","email"],include:{model:Ce},where:{deleted_at:null}},{model:le,as:"readingProvider",required:!1,attributes:["id","email"],include:{model:Ce},deleted_at:null},{model:gi,as:"transportations",required:!1,where:{deleted_at:null}},{model:Ni,as:"appointmentCptCodes",required:!1,where:{deleted_at:null},include:{model:Oi,as:"billingCode",required:!1,where:{deleted_at:null}}}]})),b=this.shallowCopy(yield this.__repo.findAll(Object.assign(Object.assign({},f),{id:{[jn.notIn]:null==v?void 0:v.map((e=>e.id))}}),{include:[{as:"caseType",attributes:["name","slug"],model:Wt,required:!0,where:{deleted_at:null}},{as:"appointmentStatus",model:g,required:!1,where:{deleted_at:null}},{as:"availableDoctor",include:[{as:"availableSpeciality",include:[{as:"facilityLocation",model:Oe,required:!1,where:{deleted_at:null}},{as:"speciality",model:ue,required:!1,where:{deleted_at:null}}],model:it,required:!1,where:{deleted_at:null}},{as:"facilityLocations",include:{as:"facility",model:Ut,required:!1,where:{deleted_at:null}},model:Oe,required:!1,where:{deleted_at:null}},{as:"doctor",attributes:{exclude:["password"]},include:[{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}}],model:le,required:!1,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null}},{as:"priority",model:ee,required:!1,where:{deleted_at:null}},{as:"appointmentType",model:J,required:!1,where:{deleted_at:null}},{as:"patientSessions",include:{as:"visitStatus",model:Pt,required:!1,where:{deleted_at:null}},model:B,required:!1,where:{deleted_at:null}},{model:Ui,as:"physicianClinic",attributes:["id","clinic_id","clinic_locations_id","physician_id"],required:!1,include:{model:Ii,as:"physician",attribute:["id","first_name","last_name","middle_name","cell_no","email","npi_no","license_no"],required:!1,where:{deleted_at:null}},where:{deleted_at:null}},{model:le,as:"technician",required:!1,attributes:["id","email"],include:{model:Ce},where:{deleted_at:null}},{model:le,as:"readingProvider",required:!1,attributes:["id","email"],include:{model:Ce},deleted_at:null},{model:gi,as:"transportations",required:!1,where:{deleted_at:null}},{model:Ni,as:"appointmentCptCodes",required:!1,where:{deleted_at:null},include:{model:Oi,as:"billingCode",required:!1,where:{deleted_at:null}}}]}));let S=[...v,...b];const I=this.shallowCopy(yield this.__colorCodeRepo.findAll({deleted_at:null,user_id:d}));return S=S&&S.length?S.map((e=>{var t,i,a,n,o,s,l,d,_,r,c,p,u,m,y,h,f,v,g,b,S,D,w,O,T,A,N,C;const{caseType:R,appointmentStatus:E,appointmentCptCodes:L,availableDoctor:k,availableSpeciality:P,appointmentType:j,patientSessions:B,scheduled_date_time:U,available_doctor_id:q,time_slots:F}=e,M=Pn(e,["caseType","appointmentStatus","appointmentCptCodes","availableDoctor","availableSpeciality","appointmentType","patientSessions","scheduled_date_time","available_doctor_id","time_slots"]);let $,V;return k&&Object.keys(k).length?$=null!==(i=null===(t=null==I?void 0:I.find((e=>{var t;return e.object_id===(null===(t=null==P?void 0:P.speciality)||void 0===t?void 0:t.id)})))||void 0===t?void 0:t.code)&&void 0!==i?i:"#9d9d9d":P&&Object.keys(P).length&&(V=null!==(n=null===(a=null==I?void 0:I.find((e=>{var t;return e.object_id===(null===(t=P.speciality)||void 0===t?void 0:t.id)})))||void 0===a?void 0:a.code)&&void 0!==n?n:"#9d9d9d"),Object.assign({appointmentType:j,appointment_cpt_codes:L,appointment_status:null==E?void 0:E.name,appointment_status_slug:null==E?void 0:E.slug,appointment_type_id:null==e?void 0:e.type_id,available_doctor:k,available_doctor_id:q,available_speciality:P,billingTitles:q?null===(s=null===(o=null==k?void 0:k.doctor)||void 0===o?void 0:o.medicalIdentifiers)||void 0===s?void 0:s.billingTitle:null,case_type_name:null==R?void 0:R.name,cd_image:null==e?void 0:e.cd_image,doctor_info:q?null===(l=null==k?void 0:k.doctor)||void 0===l?void 0:l.userBasicInfo:null,facility_location_code:$,medicalIdentifiers:q?null===(d=null==k?void 0:k.doctor)||void 0===d?void 0:d.medicalIdentifiers:null,reading_provider:null==e?void 0:e.readingProvider,reading_provider_id:null==e?void 0:e.reading_provider_id,scheduled_date_time:U,speciality_code:V,speciality_id:(null==e?void 0:e.availableSpeciality)?null===(_=null==e?void 0:e.availableSpeciality)||void 0===_?void 0:_.speciality_id:null===(c=null===(r=null==e?void 0:e.availableDoctor)||void 0===r?void 0:r.availableSpeciality)||void 0===c?void 0:c.speciality_id,speciality_key:(null==e?void 0:e.availableSpeciality)?null===(u=null===(p=null==e?void 0:e.availableSpeciality)||void 0===p?void 0:p.speciality)||void 0===u?void 0:u.speciality_key:null===(h=null===(y=null===(m=null==e?void 0:e.availableDoctor)||void 0===m?void 0:m.availableSpeciality)||void 0===y?void 0:y.speciality)||void 0===h?void 0:h.speciality_key,speciality_name:(null==e?void 0:e.availableSpeciality)?null===(v=null===(f=null==e?void 0:e.availableSpeciality)||void 0===f?void 0:f.speciality)||void 0===v?void 0:v.name:null===(S=null===(b=null===(g=null==e?void 0:e.availableDoctor)||void 0===g?void 0:g.availableSpeciality)||void 0===b?void 0:b.speciality)||void 0===S?void 0:S.name,speciality_qualifier:(null==e?void 0:e.availableSpeciality)?null===(w=null===(D=null==e?void 0:e.availableSpeciality)||void 0===D?void 0:D.speciality)||void 0===w?void 0:w.qualifier:null===(A=null===(T=null===(O=null==e?void 0:e.availableDoctor)||void 0===O?void 0:O.availableSpeciality)||void 0===T?void 0:T.speciality)||void 0===A?void 0:A.qualifier,time_slots:F,visit_status_name:null===(N=null==B?void 0:B.visitStatus)||void 0===N?void 0:N.name,visit_status_slug:null===(C=null==B?void 0:B.visitStatus)||void 0===C?void 0:C.slug},M)})):[],{appointments:S,cancelled_appointments:h}})),this.getPatientAppointmentsV1=(e,t)=>kn(this,void 0,void 0,(function*(){const{appointment_status_id:t,end_date:i,start_date:a,patient_id:n,practice_location_id:o,speciality_id:s,case_id:l,user_id:d=Number(process.env.USERID)}=e,_=this.generateGetSinglePatientAppointmentsRawQuery({facilityLocationIds:o,specialityIds:s,patientId:n,appointmentStatusIds:t,startDate:a,endDate:i}),[r]=this.shallowCopy(yield _a.query(_)),c=r.map((e=>e.appointment_id)),p=this.shallowCopy(yield this.__repo.findAll({deleted_at:null,id:c},{include:[{model:Ni,as:"appointmentCptCodes",required:!1,where:{deleted_at:null},include:{model:Oi,as:"billingCode",required:!1,where:{deleted_at:null}}},{model:gi,as:"transportations",required:!1,where:{deleted_at:null}}]})),u=this.shallowCopy(yield this.__colorCodeRepo.findAll({deleted_at:null,user_id:d},{include:{as:"type",model:Qe}})),m=this.getGetPatientCancelledAppointmentsMapping(r,p,u),y=[],h=[];return m.forEach((e=>{e.cancelled?y.push(e):h.push(e)})),{appointments:l?h.filter((e=>e.case_id===l)):h,cancelled_appointments:y}})),this.getPatientHistory=(e,t)=>kn(this,void 0,void 0,(function*(){const{case_id:t,type:i,pagination:a,per_page:n,page:o}=e;if(!t)throw un("CASE_ID_REQUIRED");if(!["cancel","no_show","completed","today"].includes(i))throw un("VALID_APPOINTMENT_NAME_ERROR");const s=this.__repo.getJoinClause("get_patient_history_appointments");let l=this.shallowCopy(yield this.__repo.findAll({case_id:t},{include:[...s]}));l=this[this.__appointmentsHistoryChecks[`${i}`]](l),l=l.map((e=>{var t;const{physicianClinic:i}=e,a=i?{physician:(null==i?void 0:i.physician)?Object.assign(Object.assign(Object.assign({clinic_location_id:null===(t=null==i?void 0:i.clinicLocation)||void 0===t?void 0:t.id,physician_clinic_id:null==i?void 0:i.id},null==i?void 0:i.clinic),null==i?void 0:i.clinicLocation),null==i?void 0:i.physician):null}:null;return Object.assign(Object.assign({},e),{physicianClinic:a})}));const d=null!=o?o:1,_=null!=n?n:10;return a?{docs:this.paginate(l,_,d),pages:Math.ceil(l.length/_),total:l.length}:l})),this.getPatientHistoryCounts=(e,t)=>kn(this,void 0,void 0,(function*(){const{case_id:t}=e;if(!t)throw un("CASE_ID_REQUIRED");let i,a,n,o;const s=this.shallowCopy(yield this.__repo.findAll({case_id:t},{include:{model:g,as:"appointmentStatus",where:{deleted_at:null}}}));return i=s.filter((e=>{const t=(0,Cn.format)(new Date(e.scheduled_date_time),"MM-dd-yyyy"),i=(0,Cn.format)(new Date,"MM-dd-yyyy");if(!e.cancelled&&null===e.deleted_at&&t===i)return e})).length,a=s.filter((e=>e.cancelled&&null===e.deleted_at)).length,n=s.filter((e=>{var t;return!e.cancelled&&null===e.deleted_at&&"no_show"===(null===(t=null==e?void 0:e.appointmentStatus)||void 0===t?void 0:t.slug)})).length,o=s.filter((e=>{var t;return!e.cancelled&&null===e.deleted_at&&"completed"===(null===(t=null==e?void 0:e.appointmentStatus)||void 0===t?void 0:t.slug)})).length,{todayAppointments:i,cancelledAppointments:a,noShowAppointments:n,completedAppointments:o}})),this.getRelatedInfo=(e,t)=>kn(this,void 0,void 0,(function*(){var i,a,n,o,s,l,d,_,r,c,p,u,m,y,h,f,v,b,S,I,D;const{id:w,case_id:O,speciality_key:T}=e,A=this.shallowCopy(yield this.__repo.findById(w,{include:[{as:"availableDoctor",model:ot,required:!1,where:{deleted_at:null}},{as:"caseType",model:Wt,required:!1},{as:"appointmentStatus",model:g,required:!1},{as:"patient",model:Et,required:!1},{as:"appointmentVisit",model:Ke,required:!1},{as:"case",attributes:["id"],include:{as:"caseAccidentInformation",attributes:["id","accident_date","accident_time"],model:ui,required:!1},model:ti,required:!1},{as:"appointmentType",attributes:["id","name","slug"],model:J,requires:!1}]}));if(!A||!Object.keys(A).length)throw un("NO_APPOINTMENT_FOUND");const N=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({slug:"completed"})),C=this.shallowCopy(yield this.__repo.findOne({case_id:O,deleted_at:null,status_id:N.id})),R={headers:{Authorization:t}};let E=this.shallowCopy(yield this.__http.get(`${process.env.KIOSK_URL}case-patient-session/session-for-scheduler`,Object.assign(Object.assign({},R),{params:{appointment_id:w,case_id:O}})));E=null===(i=null==E?void 0:E.result)||void 0===i?void 0:i.data;let L=!1;(null==A?void 0:A.appointmentVisit)&&Object.keys(null==A?void 0:A.appointmentVisit).length&&(L=!0);const k={appointment_status:A.appointmentStatus.name,case_id:O,case_type:null===(a=null==A?void 0:A.caseType)||void 0===a?void 0:a.name,dob:new Date(A.patient.dob),evaluation_started:!(!A.evaluation_date_time&&!L),last_appointment:C};k.insurance_name=null!==(n=null==E?void 0:E.company_name)&&void 0!==n?n:null,k.visit_status=null!==(s=null===(o=null==E?void 0:E.sessionStatus)||void 0===o?void 0:o.name)&&void 0!==s?s:null,k.checked_in_time=null!==(d=null===(l=null==E?void 0:E.sessionStatus)||void 0===l?void 0:l.updated_at)&&void 0!==d?d:null;const{available_doctor_id:P,billable:j}=A,{back_dated_check:B}=this.checkBackDated(A,R);k.back_dated_check=B,k.billable=j,k.accident_date=(null===(r=null===(_=null==A?void 0:A.case)||void 0===_?void 0:_.caseAccidentInformation)||void 0===r?void 0:r.accident_date)?`${String(null===(p=null===(c=null==A?void 0:A.case)||void 0===c?void 0:c.caseAccidentInformation)||void 0===p?void 0:p.accident_date)}T${String(null!==(y=null===(m=null===(u=null==A?void 0:A.case)||void 0===u?void 0:u.caseAccidentInformation)||void 0===m?void 0:m.accident_time)&&void 0!==y?y:"00:00:00")}.000Z`:null,k.accident_time=null===(f=null===(h=null==A?void 0:A.case)||void 0===h?void 0:h.caseAccidentInformation)||void 0===f?void 0:f.accident_time,k.file_id=null;const U=this.shallowCopy(yield this.__visitSessionRepo.findOne({case_id:null==A?void 0:A.case_id,appointment_id:null==A?void 0:A.id,deleted_at:null},{include:{as:"visitState",model:$e}})),{visitState:q}=U||{};if(k.template_id=null!==(v=null==U?void 0:U.template_id)&&void 0!==v?v:null,k.template_type=null!==(b=null==U?void 0:U.template_type)&&void 0!==b?b:null,k.visit_session_id=null!==(S=null==U?void 0:U.id)&&void 0!==S?S:null,k.appointment_type=null===(I=null==A?void 0:A.appointmentType)||void 0===I?void 0:I.slug,P&&A.evaluation_date_time&&("finalized"===(null==q?void 0:q.slug)||"bill_created"===(null==q?void 0:q.slug))){const e=this.shallowCopy(yield this.__specialityRepo.findOne({speciality_key:T}));if(!e||!Object.keys(e).length)throw un("NO_SPECIALITY_FOUND_FOR_KEY");const t=this.__getSpecialityEnvironment[T],i=this.shallowCopy(yield this.__http.post(`${process.env[t]}/medical-session-pdf/get-file-info-scheduler`,{appointment_id:null==A?void 0:A.id,appointment_type_id:null==A?void 0:A.type_id,case_id:null==A?void 0:A.case_id,doctor_id:null===(D=null==A?void 0:A.availableDoctor)||void 0===D?void 0:D.doctor_id,patient_id:null==A?void 0:A.patient_id},R)),{result:{data:a}}=i||{};k.file_id=a&&a.length?a:null}return k})),this.getSpecialityAppointments=(e,t)=>kn(this,void 0,void 0,(function*(){const{end_date:i,facility_location_ids:a,speciality_ids:n,start_date:o,user_id:s=Number(process.env.USERID)}=e,l=new Date(o),d=new Date(i),_=this.shallowCopy(yield this.__availableSpecialityRepo.findAll({[jn.or]:[{deleted_at:null,facility_location_id:{[jn.in]:a},speciality_id:{[jn.in]:n}},{deleted_at:null,facility_location_id:{[jn.in]:a},speciality_id:{[jn.in]:n}}]},{include:[{as:"dateList",model:qe,required:!0,where:{[jn.or]:[{deleted_at:null,start_date:{[jn.and]:[{[jn.gte]:l},{[jn.lte]:d}]}},{deleted_at:null,end_date:{[jn.gte]:l},start_date:{[jn.lte]:l}}]}},{as:"speciality",model:ue,required:!1,where:{deleted_at:null}}]}));if(!_||!_.length)return[];const r=this.shallowCopy(yield this.__userRepo.findOne({id:s},{include:[{as:"colorCodes",include:{as:"type",model:Qe,where:{slug:"facility_location"}},model:Ze,required:!1,where:{deleted_at:null}}]})),{colorCodes:c}=r,p=this.shallowCopy(yield this.__facilityLocationRepo.findAll({deleted_at:null,id:{[jn.in]:a}},{include:{as:"facility",model:Ut,required:!1}}));if(!(r&&Object.keys(r).length||p&&p.length))throw un("NO_RECORD_FOUND");const u=_.map((e=>e.id)),m=this.__repo.getJoinClause("get_speciality_appointments"),y=this.shallowCopy(yield this.__repo.findAll({available_speciality_id:{[jn.in]:u},available_doctor_id:null,cancelled:0,deleted_at:null,pushed_to_front_desk:0,scheduled_date_time:{[jn.between]:[l,d]}},{include:[...m,{as:"case",attributes:["id"],model:ti,include:[{model:ni,as:"caseStatus",attributes:["id","name"],required:!1,where:{deleted_at:null}},{model:Wt,as:"caseType",attributes:["id","name"],required:!1,where:{deleted_at:null}}]},{as:"appointmentType",attributes:["id","name","slug"],include:{as:"specialityVisitType",model:Y,where:{speciality_id:{[jn.in]:n}}},model:J,required:!1,where:{deleted_at:null}},{as:"patientSessions",include:{as:"visitStatus",model:Pt,required:!1,where:{deleted_at:null}},model:B,required:!1,where:{deleted_at:null}}],order:[["scheduled_date_time","ASC"]]})),h=this.facilityWiseMapping(_,p,c);if(!y||!y.length)return h;const f=(new Date).toISOString().slice(0,10),v={case_ids:y.map((e=>e.case_id)),current_date:f},g={headers:{Authorization:t}},b=yield this.__http.post(`${process.env.KIOSK_URL}case-patient-session/checked-in-patient`,Object.assign({},v),Object.assign({},g)),{data:S}=null==b?void 0:b.result,I=this.confirmDescriptionsOfPatient(y),D=this.confirmStatusFromKiosk(I,S),w=this.formattedPatient(D.flat(),g);return this.availibilityWiseMapping(w,h)})),this.getTodayAppointmentOfPatient=(e,t)=>kn(this,void 0,void 0,(function*(){const{start_date:t,end_date:i,case_id:a}=e,n=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({slug:"completed"})),o=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({slug:"in_session"}));return this.shallowCopy(yield this.__repo.findAll({case_id:a,deleted_at:null,scheduled_date_time:{[jn.between]:[new Date(t),new Date(i)]},status_id:{[jn.and]:[{[jn.ne]:n.id},{[jn.ne]:o.id}]}},{attributes:["id"]})).map((e=>e.id))})),this.isFutureAppointment=(e,t)=>kn(this,void 0,void 0,(function*(){const{appointment_id:t}=e,i=this.shallowCopy(yield this.__repo.findById(t));if(!i||!Object.keys(i).length)throw un("NO_RECORD_FOUND");const{scheduled_date_time:a}=i,n=new Date,o=new Date;return n.setHours(0),n.setMinutes(0),n.setSeconds(0),n.setMilliseconds(0),o.setHours(23),o.setMinutes(59),o.setSeconds(59),o.setMilliseconds(0),new Date(n)<new Date(a)&&new Date(o)<new Date(a)})),this.isTodayAppointment=(e,t)=>kn(this,void 0,void 0,(function*(){const{appointment_id:t}=e,i=this.shallowCopy(yield this.__repo.findById(t));if(!i||!Object.keys(i).length)throw un("NO_RECORD_FOUND");const{scheduled_date_time:a}=i,n=new Date,o=new Date;return n.setHours(0),n.setMinutes(0),n.setSeconds(0),n.setMilliseconds(0),o.setHours(23),o.setMinutes(59),o.setSeconds(59),o.setMilliseconds(0),new Date(n)<=new Date(a)&&new Date(a)<new Date(o)})),this.post=(e,t,i)=>kn(this,void 0,void 0,(function*(){const{appointment_type_id:i,case_id:a,case_type_id:n,comments:o,confirmation_status:s,doctor_id:l,is_speciality_base:d,facility_location_id:_,patient_id:r,priority_id:c,speciality_id:p,start_date_time:u,time_slot:m,user_id:y=Number(process.env.USERID),days:h,end_date_for_recurrence:f,recurrence_ending_criteria_id:v,end_after_occurences:g,time_zone:b,is_soft_registered:S,physician_id:I,transportation:D,technician_id:w,cpt_codes:O}=e,T=S||!1;if(new Date(u).getTime()<new Date((new Date).setUTCHours(0,0,0,0)).getTime())throw un("APPOINTMENT_CAN_NOT_CREATED_ON_PREVIOUS_DATE");const{slug:A}=this.shallowCopy(yield this.__caseTypesRepo.findById(n)),N=this.shallowCopy(yield this.__appoitmentTypeRepo.findAll({deleted_at:null})).map((e=>e.id));if(!(null==N?void 0:N.includes(i)))throw un("INVALID_APPOINTMENT_TYPE_ID");const C=this.shallowCopy(yield this.__appoitmentTypeRepo.findOne({slug:"initial_evaluation"}));if((h||f||v||g)&&i===C.id)throw un("NO_APPOINTMENT_CREATED_RECCURENCE");const R=this.shallowCopy(yield this.__specialityRepo.findOne({deleted_at:null,id:p}));if(!R&&!Object.keys(R).length)throw un("NO_SPECIALITY_FOUND");let E,L;if(v){E=this.shallowCopy(yield this.__recurrenceEndingCriteriaRepo.findById(v));const{slug:e}=E;L=null!=e?e:""}const{time_slot:k}=R||{},P=!!f,j=h&&h.length?h:[0,1,2,3,4,5,6],B=yield this[this.__formatDatesCriteriaMethod[`${P}`]]({daysList:j,endDateString:new Date(u),endingCriteria:L,numberOfRecurrsion:g,recurrenceEndDateString:f,startDateString:u}),U=B&&B.length?B:[new Date(u)],q=m||k,F=m?m/k:1,M=this.shallowCopy(yield this.__casePatientSessionStatusesRepo.findAll({deleted_at:null,slug:{[jn.in]:["checked_in","in_session"]}})).map((e=>e.id)),$=!!this.shallowCopy(yield this.__casePatientSessionRepo.findAll({appointment_id:{[jn.ne]:null},case_id:a,date_of_check_in:`${(new Date).getFullYear()}-${(new Date).getMonth()+1}-${(new Date).getDate()}`,deleted_at:null,status_id:{[jn.in]:M}})).length,V=this.shallowCopy(yield this.__appointmentStatusRepo.findAll({deleted_at:null,slug:{[jn.or]:["scheduled","arrived"]}})),x={formatDates:U,startDateTime:u,existingCasePatientSession:this.shallowCopy(yield this.__casePatientSessionRepo.findOne({case_id:a},{include:[{as:"visitStatus",model:Pt,where:{slug:"walk_in"}}]})),appointmentStatus:V,isAlradyCheckedIn:$,desiredTimeSlot:q,doctorId:l,specialityId:p,caseId:a,patientId:r,time_zone:b,confirmationStatus:s,appointmentType:C,speciality:R,appointmentTypeId:i,facilityLocationId:_,caseType:A,comments:o,priorityId:c,isSpecialityBase:d,isSoftRegistered:T,caseTypeId:n,slotsForThisAppointment:F,userId:y,physicianId:I,transportation:D,technicianId:w,cptCodes:O},K=En.pool();return K.proxy().then((()=>this.createAppointment(x,t))).then((e=>e)).catch((e=>{throw K.terminate(),console.log("err in pool",e),e})).then((e=>(console.log("terminated!"),K.terminate(),e)))})),this.postV1=(e,t)=>kn(this,void 0,void 0,(function*(){const{appointment_type_id:i,case_id:a,case_type_id:n,comments:o,confirmation_status:s,doctor_id:l,is_speciality_base:d,facility_location_id:_,patient_id:r,priority_id:c,speciality_id:p,start_date_time:u,session_status_id:m,time_slot:y,user_id:h=Number(process.env.USERID),undo_appointment_status_id:f,days:v,end_date_for_recurrence:g,recurrence_ending_criteria_id:b,end_after_occurences:S,time_zone:I,is_soft_registered:D,physician_id:w,transportation:O,technician_id:T,cpt_codes:A,reading_provider_id:N,cd_image:C,is_transportation:R}=e;if(!p)throw un("SPECIALITY_REQUIRED");if(!_)throw un("FACILITY_REQUIRED");const E=D||!1,L=this.convertDateToLocal(new Date(u),I);if(new Date(L).getTime()<new Date((new Date).setUTCHours(0,0,0,0)).getTime())throw un("APPOINTMENT_CAN_NOT_CREATED_ON_PREVIOUS_DATE");const{slug:k}=this.shallowCopy(yield this.__caseTypesRepo.findById(n)),P=this.shallowCopy(yield this.__appoitmentTypeRepo.findAll({deleted_at:null})).map((e=>e.id));if(!(null==P?void 0:P.includes(i)))throw un("INVALID_APPOINTMENT_TYPE_ID");const j=this.shallowCopy(yield this.__appoitmentTypeRepo.findOne({slug:"initial_evaluation"}));if((v||g||b||S)&&i===j.id)throw un("NO_APPOINTMENT_CREATED_RECCURENCE");const U=this.shallowCopy(yield this.__specialityRepo.findOne({deleted_at:null,id:p},{include:[{as:"specialityVisitType",model:Y,where:{speciality_id:p,appointment_type_id:i,deleted_at:null}}]}));if(!U||!Object.keys(U).length)throw un("NO_SPECIALITY_FOUND");let q,F;if(b){q=this.shallowCopy(yield this.__recurrenceEndingCriteriaRepo.findById(b));const{slug:e}=q;F=null!=e?e:""}const{time_slot:M}=U||{},$=!!g,V=v&&v.length?v:[0,1,2,3,4,5,6],x=yield this[this.__formatDatesCriteriaMethod[`${$}`]]({daysList:V,endDateString:new Date(u),endingCriteria:F,numberOfRecurrsion:S,recurrenceEndDateString:g,startDateString:u}),K=x&&x.length?x:[new Date(u)],z=y||M,G=y?y/M:1,H=this.shallowCopy(yield this.__appointmentStatusRepo.findAll({deleted_at:null,slug:{[jn.or]:["scheduled","arrived"]}})),{id:W}=H.find((e=>"arrived"===e.slug)),Q=this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:a,deleted_at:null,status_id:W,scheduled_date_time:{[jn.between]:[new Date((new Date).setUTCHours(0,0,0,0)),new Date((new Date).setUTCHours(23,59,59,59))]}},{include:[{model:B,as:"patientSessions",include:{model:Pt,as:"visitStatus",where:{deleted_at:null,slug:{[jn.in]:["checked_in","in_session"]}}},where:{deleted_at:null}}]}));let J=!1;Q&&Object.keys(Q).length&&(J=!0);const X={sessionStatusId:m,undoAppointmentStatusId:f,formatDates:K,startDateTime:u,existingCasePatientSession:this.shallowCopy(yield this.__casePatientSessionRepo.findOne({case_id:a},{include:[{as:"visitStatus",model:Pt,where:{slug:"walk_in"}}]})),appointmentStatus:H,isAlradyCheckedIn:J,desiredTimeSlot:z,doctorId:l,specialityId:p,caseId:a,patientId:r,time_zone:I,confirmationStatus:s,appointmentType:j,speciality:U,appointmentTypeId:i,facilityLocationId:_,caseType:k,comments:o,priorityId:c,isSpecialityBase:d,isSoftRegistered:E,caseTypeId:n,slotsForThisAppointment:G,userId:h,physicianId:w,transportation:O,technicianId:T,cptCodes:A,readingProviderId:N,cdImage:C,isTransportation:R},Z=yield this.multipleAppointmentsAgainstCptCode(X),ee=[];for(let e=0;e<Z.length;++e)ee.push(...yield this.createAppointmentV1(Z[e],this.shallowCopy(Z),A,e,t));return{msg_alert_1:yield this.checkErrorMultipleCptAppointments(A,Z,!0,l,U),appointments:ee}})),this.getStartTimeToCreate=e=>kn(this,void 0,void 0,(function*(){var t;const i=[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[jn.gte]:e.appointmentEndTime},start_date:{[jn.lte]:e.startDateTime}}},...e.specialityId&&[{as:"availableSpeciality",model:it,required:!0,where:{speciality_id:e.specialityId,deleted_at:null}}]];let a;a=e.doctorId?this.shallowCopy(yield this.__availableDoctorRepo.findOne({deleted_at:null,doctor_id:e.doctorId},{include:i})):this.shallowCopy(yield this.__availableSpecialityRepo.findOne({speciality_id:e.specialityId,deleted_at:null},{include:[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[jn.gte]:e.appointmentEndTime},start_date:{[jn.lte]:e.startDateTime}}}]}));const n=[];e.doctorId&&n.push({as:"availableDoctor",model:ot,required:!0,where:{deleted_at:null,doctor_id:e.doctorId}});const o=this.shallowCopy(yield this.__repo.findAll(Object.assign(Object.assign(Object.assign({cancelled:!1,deleted_at:null,pushed_to_front_desk:!1},!e.doctorId&&{available_doctor_id:null}),e.doctorId&&{available_doctor_id:{[jn.not]:null}}),{[jn.and]:[ra.where(ra.fn("datediff",this.convertDateToLocal(new Date(e.startDateTime),e.time_zone),ra.col("scheduled_date_time")),{[jn.and]:[{[jn.gt]:-1},{[jn.lt]:1}]})]}),{include:[{as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null,speciality_id:e.specialityId}},...n]})).map((t=>{if(t.availableSpeciality.speciality_id==e.specialityId)return new Date(t.scheduled_date_time).toISOString()})),s=Bn.countBy(o);let l=new Date(e.startDateTime);if(null===(t=e.speciality)||void 0===t?void 0:t.over_booking)for(;;){const t=new Date(l);if(new Date(a.dateList[0].end_date).getTime()<t.setMinutes(t.getMinutes()+e.desiredTimeSlot))return null;if(!(l.toISOString()in s))return l.toISOString();if(s[l.toISOString()]<=e.speciality.over_booking)return l.toISOString();l=t}else for(;;){const t=new Date(l);if(new Date(a.dateList[0].end_date).getTime()<t.setMinutes(t.getMinutes()+e.desiredTimeSlot))return null;if(!(l.toISOString()in s))return l.toISOString();l=t}})),this.createAppointmentWithCptCodess=(e,t)=>kn(this,void 0,void 0,(function*(){var i,a,n,o,s;const l=this.shallowCopy(yield this.__repo.findOne({id:e.appointment_id},{include:[{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null}},{as:"availableDoctor",model:ot,required:!1,where:{deleted_at:null}},{as:"appointmentCptCodes",model:Ni,required:!1,where:{deleted_at:null}},{as:"appointmentType",model:J,required:!1,where:{deleted_at:null}},{as:"caseType",model:Wt,required:!1,where:{deleted_at:null}},{as:"transportations",model:gi,required:!1,where:{deleted_at:null}}]}));let d=null,_=!1;if(l){if(yield this.__schAppointmentCptCodesRepo.updateByReferenceIds({appointment_id:l.id},{deleted_at:new Date,updated_by:e.user_id}),!e.cpt_codes||!e.cpt_codes.length)return d=yield this.shallowCopy(yield this.__repo.findOne({id:l.id})),{msg_alert_1:"Updated Successfully!",appointments:yield this.shallowCopy(yield this.getNewResponseforUpdateApis([d.id],l.availableSpeciality.speciality_id))};const r={appointmentStartTime:new Date(l.scheduled_date_time),appointmentEndTime:new Date(l.scheduled_date_time),desiredTimeSlot:l.time_slots,doctorId:null===(i=l.availableDoctor)||void 0===i?void 0:i.doctor_id,specialityId:l.availableSpeciality.speciality_id,caseId:l.case_id,patientId:l.patient_id,confirmationStatus:l.confirmation_status?1:0,appointmentType:l.appointmentType,appointmentTypeId:l.type_id,facilityLocationId:l.availableSpeciality.facility_location_id,comments:l.comments,caseType:l.caseType.slug,priorityId:l.priority_id,isSpecialityBase:l.is_speciality_base,isSoftRegistered:l.is_soft_registered,caseTypeId:l.case_type_id,physicianId:l.physician_id,transportation:this.shallowCopy(l.transportations),technicianId:l.technician_id,time_zone:e.time_zone,userId:e.user_id,isTransportation:l.is_transportation,cdImages:l.cd_image};r.appointmentEndTime.setMinutes(r.appointmentEndTime.getMinutes()+l.time_slots);const c=this.shallowCopy(yield this.__specialityRepo.findOne({deleted_at:null,id:r.specialityId},{include:{as:"specialityVisitType",model:Y,where:{appointment_type_id:null===(a=null==l?void 0:l.appointmentType)||void 0===a?void 0:a.id,speciality_id:r.specialityId}}}));if(!c.is_multiple_visit&&c.specialityVisitType[0].allow_multiple_cpt_codes){const t=e.cpt_codes.map((e=>({billing_code_id:e,appointment_id:l.id})));return yield this.__schAppointmentCptCodesRepo.bulkCreate(t),d=yield this.shallowCopy(yield this.__repo.findOne({id:l.id})),{msg_alert_1:"Updated Successfully!",appointments:yield this.shallowCopy(yield this.getNewResponseforUpdateApis([d.id],l.availableSpeciality.speciality_id))}}let p=this.shallowCopy(e.cpt_codes[0]);if(p==(null===(n=l.appointmentCptCodes[0])||void 0===n?void 0:n.billing_code_id)&&(_=!0),yield this.__schAppointmentCptCodesRepo.create({billing_code_id:e.cpt_codes[0],appointment_id:l.id}),e.cpt_codes.shift(),d=yield this.shallowCopy(yield this.__repo.findOne({id:l.id})),!e.cpt_codes.length)return yield this.__billingCodesRepo.findOne({id:p}),{msg_alert_1:"Updated Successfully!",appointments:yield this.shallowCopy(yield this.getNewResponseforUpdateApis([d.id],l.availableSpeciality.speciality_id))};const u=this.shallowCopy(e.cpt_codes);if(c.is_multiple_visit&&c.specialityVisitType[0].allow_multiple_cpt_codes&&!c.specialityVisitType[0].is_multiple_same_day){const e=yield this.__billingCodesRepo.findAll({id:u});let t="";_||(t+="Updated Successfully! "),t+="Please select multiple on same day checkbox in specialty master to create appointments for ";for(const[i,a]of e.entries())t+=a.name.toString(),i!=e.length-1&&(e.length-2==i?t+=" and ":t+=", ");throw t+=".",t}const m=this.shallowCopy(yield this.__appointmentStatusRepo.findAll({deleted_at:null,slug:{[jn.or]:["scheduled","arrived"]}})),y=this.shallowCopy(yield this.__casePatientSessionRepo.findOne({case_id:r.caseId},{include:[{as:"visitStatus",model:Pt,where:{slug:"walk_in"}}]})),h=this.shallowCopy(yield this.__casePatientSessionStatusesRepo.findAll({deleted_at:null,slug:{[jn.in]:["checked_in","in_session"]}})).map((e=>e.id)),f=!!this.shallowCopy(yield this.__casePatientSessionRepo.findAll({appointment_id:{[jn.ne]:null},case_id:r.caseId,date_of_check_in:`${(new Date).getFullYear()}-${(new Date).getMonth()+1}-${(new Date).getDate()}`,deleted_at:null,status_id:{[jn.in]:h}})).length,{time_slot:v}=c||{},g=r.desiredTimeSlot?r.desiredTimeSlot/v:1,b=yield this.getStartTimeToCreate({appointmentEndTime:r.appointmentEndTime,startDateTime:r.appointmentStartTime,specialityId:r.specialityId,doctorId:r.doctorId,caseId:r.caseId,patientId:r.patientId,time_zone:r.time_zone,speciality:c,desiredTimeSlot:r.desiredTimeSlot});let S;const I=[];if(b){const e=[new Date(b)],i={formatDates:e,startDateTime:e[0].toISOString(),existingCasePatientSession:y,appointmentStatus:m,isAlradyCheckedIn:f,desiredTimeSlot:r.desiredTimeSlot,doctorId:r.doctorId,specialityId:r.specialityId,caseId:r.caseId,patientId:r.patientId,time_zone:r.time_zone,confirmationStatus:r.confirmationStatus,appointmentType:r.appointmentType,speciality:c,appointmentTypeId:r.appointmentTypeId,facilityLocationId:r.facilityLocationId,caseType:r.caseType,comments:r.comments,priorityId:r.priorityId,isSpecialityBase:r.isSpecialityBase,isSoftRegistered:r.isSoftRegistered,caseTypeId:r.caseTypeId,slotsForThisAppointment:g,userId:r.userId,physicianId:r.physicianId,transportation:r.transportation,technicianId:r.technicianId,isTransportation:r.isTransportation,cptCodes:u,cdImage:r.cdImages},a=yield this.multipleAppointmentsAgainstCptCode(i,!1);I.push(d);for(let e=0;e<a.length;++e)I.push(...yield this.createAppointmentV1(a[e],a,u,e,t));S=yield this.checkErrorMultipleCptAppointments(u,a,_,null===(o=l.availableDoctor)||void 0===o?void 0:o.id,c)}else S=yield this.checkErrorMultipleCptAppointments(u,[],_,null===(s=l.availableDoctor)||void 0===s?void 0:s.id,c);const D=yield this.shallowCopy(yield this.getNewResponseforUpdateApis(I.map((e=>e.id)),l.availableSpeciality.speciality_id));return _?{msg_alert_1:"",msg_alert_2:S,appointments:D}:{msg_alert_1:"Updated Successfully!",msg_alert_2:S,appointments:D}}throw un("APPOINTMENT_NOT_FOUND")})),this.put=(e,t,i)=>kn(this,void 0,void 0,(function*(){var a,n,o,s,l,d,_,r,c,p;const{id:u,appointment_title:m,confirmation_status:y,patient_id:h,comments:f,start_date_time:v,case_id:b,is_speciality_base:S,appointment_type_id:I,doctor_id:D,facility_location_id:w,speciality_id:O,time_slot:T,user_id:A=Number(process.env.USERID),time_zone:N,physician_id:C,technician_id:R,transportation:E,cpt_codes:L}=e,k=this.shallowCopy(yield this.__repo.findById(u,{include:[{as:"appointmentStatus",model:g},{as:"availableDoctor",model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null}}]}));if(!k||!Object.keys(k).length)throw un("NO_APPOINTMENT_OF_GIVEN_ID");if(new Date(v).getTime()<new Date((new Date).setUTCHours(0,0,0,0)).getTime())throw un("APPOINTMENT_CAN_NOT_CREATED_ON_PREVIOUS_DATE");const P=this.shallowCopy(yield this.__appoitmentTypeRepo.findOne({slug:"initial_evaluation"})),{appointmentStatus:{slug:j},evaluation_date_time:B,available_doctor_id:U,availableSpeciality:q,availableDoctor:F}=k;if("no_show"===j)throw un("NO_SHOW_STATUS");if(B)throw un("EVALUATION_ALREADY_STARTED");const M=this.shallowCopy(yield this.__kioskCaseRepo.findOne({id:b},{include:{model:Pi,as:"case_referral",where:{deleted_at:null}}})),{case_referral:{slug:$}}=M;if(!D||D&&O){const e=this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:b,deleted_at:null,patient_id:h,pushed_to_front_desk:!1,[jn.and]:[ra.where(ra.fn("datediff",this.convertDateToLocal(new Date(v),N),ra.col("scheduled_date_time")),{[jn.and]:[{[jn.gt]:-1},{[jn.lt]:1}]})]},{include:{as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null,speciality_id:O}}})),t=this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:b,deleted_at:null,[jn.and]:[ra.where(ra.fn("datediff",this.convertDateToLocal(new Date(v),N),ra.col("scheduled_date_time")),{[jn.and]:[{[jn.gt]:-1},{[jn.lt]:1}]})],patient_id:h,pushed_to_front_desk:!1},{include:{as:"availableDoctor",include:{as:"doctor",attributes:{exclude:["password"]},include:{as:"userFacilities",model:Ie,required:!0,where:{deleted_at:null,speciality_id:O}},model:le,required:!0,where:{deleted_at:null}},model:ot,required:!0,where:{deleted_at:null}}}));if(e||t)throw un("PATIENT_ALREADY_HAVE_APPOINTMENT_SAME_DAY")}const V=U?yield this.getSpecialityIdByDoctor(F):q.speciality_id,x=this.shallowCopy(yield this.__specialityRepo.findOne({deleted_at:null,id:V}));if(!x&&!Object.keys(x).length)throw un("NO_SPECIALITY_FOUND");const K=T/x.time_slot,z=V===O?x:this.shallowCopy(yield this.__specialityRepo.findById(O)),G=K*z.time_slot,H=new Date(v),Y=new Date(v);let W,Q,J=new Date(v);if(J.setMinutes(J.getMinutes()+G),!y){H.setHours(H.getHours()-24),Y.setHours(Y.getHours()+24);const e={cancelled:!1,case_id:b,deleted_at:null,id:{[jn.ne]:u},patient_id:h,pushed_to_front_desk:!1};W=this.shallowCopy(yield this.__repo.findAll(Object.assign(Object.assign({},e),{scheduled_date_time:{[jn.between]:[H,v]}}))),Q=this.shallowCopy(yield this.__repo.findOne(Object.assign(Object.assign({},e),{scheduled_date_time:{[jn.and]:[{[jn.gt]:new Date(v)},{[jn.lt]:Y}]}}),{limit:1,order:[["scheduled_date_time","ASC"]]}));const t=null==W?void 0:W.filter((e=>{const t=new Date(e.scheduled_date_time);if(null==t||t.setMinutes((null==t?void 0:t.getMinutes())+e.time_slots),new Date(v).getDate()<t.getDate())return e}));if((null==t?void 0:t.length)||(null==Q?void 0:Q.length)&&new Date(Q[0].scheduled_date_time).getTime()<new Date(J).getTime())throw un("PATIENT_ALREADY_HAVE_ASSIGNMENT")}let X=!1,Z=!1;const ee={include:[{as:"availableDoctor",include:{as:"doctor",attributes:{exclude:["password"]},include:{as:"userFacilities",model:Ie,required:!1,where:{deleted_at:null,speciality_id:O}},model:le,required:!0,where:{deleted_at:null}},model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null,speciality_id:O}}]},te={cancelled:!1,case_id:b,deleted_at:null,id:{[jn.ne]:u},patient_id:h,pushed_to_front_desk:!1,type_id:P.id},ie=this.shallowCopy(yield this.__repo.findAll(Object.assign({},te),Object.assign({},ee))),{id:ae}=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({slug:"no_show"})),ne=ie.find((e=>{var t,i;return(e.availableSpeciality||(null===(i=null===(t=e.availableDoctor)||void 0===t?void 0:t.doctor)||void 0===i?void 0:i.userFacilities.length))&&e.status_id!==ae}));if(ne&&Object.keys(ne).length&&(ne.availableSpeciality||(null===(n=null===(a=ne.availableDoctor)||void 0===a?void 0:a.doctor)||void 0===n?void 0:n.userFacilities))){const{available_doctor_id:e,availableDoctor:t,scheduled_date_time:i,availableSpeciality:a,time_slots:n}=Object.assign({},ne);if(e){const e=null===(s=null===(o=null==t?void 0:t.doctor)||void 0===o?void 0:o.userFacilities)||void 0===s?void 0:s.map((e=>null==e?void 0:e.speciality_id));X=!(!(null==e?void 0:e.includes(O))||"no_show"===k.appointmentStatus.slug);const a=new Date(i);a.setMinutes(a.getMinutes()+n),a.getTime()<=new Date(v).getTime()&&X&&(Z=!0)}else{X=a.speciality_id===O&&"no_show"!==k.appointmentStatus.slug;const e=new Date(i);e.setMinutes(e.getMinutes()+n),e.getTime()<=new Date(v).getTime()&&X&&(Z=!0)}}if(I===P.id&&X&&"green_bills"!=$)throw un("PATIENT_ALREADY_HAVE_INITIAL_EVALUATION_ASSIGNMENT");if(I!==P.id&&!X&&"green_bills"!=$)throw un("NO_INITIAL_EVALUATION_ASSIGNMENT");if(I!==P.id){const e=this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:b,deleted_at:null,id:{[jn.ne]:u},patient_id:h,pushed_to_front_desk:!1,scheduled_date_time:{[jn.between]:[new Date(k.scheduled_date_time),new Date(v)]},type_id:P.id},{include:{as:"availableDoctor",include:{as:"doctor",attributes:{exclude:["password"]},include:{as:"userFacilities",model:Ie,required:!0,where:{deleted_at:null,speciality_id:O}},model:le,required:!0,where:{deleted_at:null}},model:ot,required:!0,where:{deleted_at:null}}}));if((this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:b,deleted_at:null,id:{[jn.ne]:u},patient_id:h,pushed_to_front_desk:!1,scheduled_date_time:{[jn.between]:[new Date(k.scheduled_date_time),new Date(v)]},type_id:P.id},{include:{as:"availableSpeciality",model:it,where:{deleted_at:null,speciality_id:O}}}))||e)&&"green_bills"!=$)throw un("NO_RESCHEDULED_INTIAL_APPONTMENT")}else{const e=this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:b,deleted_at:null,id:{[jn.ne]:u},patient_id:h,pushed_to_front_desk:!1,scheduled_date_time:{[jn.between]:[new Date(k.scheduled_date_time),new Date(v)]},type_id:{[jn.ne]:P.id}},{include:{as:"availableDoctor",include:{as:"doctor",attributes:{exclude:["password"]},include:{as:"userFacilities",model:Ie,required:!0,where:{deleted_at:null,speciality_id:O}},model:le,required:!0,where:{deleted_at:null}},model:ot,required:!0,where:{deleted_at:null}}}));if((this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:b,deleted_at:null,id:{[jn.ne]:u},patient_id:h,pushed_to_front_desk:!1,scheduled_date_time:{[jn.between]:[new Date(k.scheduled_date_time),new Date(v)]},type_id:{[jn.ne]:P.id}},{include:{as:"availableSpeciality",model:it,where:{deleted_at:null,speciality_id:O}}}))||e)&&"green_bills"!=$)throw un("NO_RESCHEDULED_APPOINTMENT")}if(I===P.id&&!X||I!==P.id&&X){let e=!1;if(X)X&&Z&&(e=!0);else{const t=this.shallowCopy(yield this.__repo.findAll({cancelled:!1,case_id:k.case_id,deleted_at:null,id:{[jn.ne]:u},patient_id:k.patient_id,pushed_to_front_desk:!1,scheduled_date_time:{[jn.gte]:v},type_id:{[jn.ne]:P.id}},{include:[{as:"availableDoctor",attributes:{exclude:["password"]},include:{as:"doctor",include:{as:"userFacilities",model:Ie,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}},model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null}}]}));if(t&&t.length){let i=!1;t.find((t=>{var a,n;const{available_doctor_id:o,availableDoctor:s,scheduled_date_time:l,availableSpeciality:d,time_slots:_}=t;if(o)null===(n=null===(a=null==s?void 0:s.doctor)||void 0===a?void 0:a.userFacilities)||void 0===n||n.find((a=>{if(a.speciality_id===V){const n=new Date(l);return n.setMinutes(n.getMinutes()+T),e=!0,i=!0,n.getTime()>new Date(t.scheduled_date_time).getTime()&&(e=!1),a}}));else if((null==d?void 0:d.speciality_id)===V){const a=new Date(l);return a.setMinutes(a.getMinutes()+T),e=!0,i=!0,a.getTime()>new Date(t.scheduled_date_time).getTime()&&(e=!1),t}i||(e=!0)}))}else e=!0}if(!e&&"green_bills"!=$)throw un("APPOINTMENT_MUST_END_BEFORE_PROGRESS");if(this.shallowCopy(yield this.__repo.findAll({case_id:b,deleted_at:null,id:{[jn.ne]:u},patient_id:h,scheduled_date_time:{[jn.gt]:v},type_id:{[jn.ne]:P.id}})).map((e=>{const t=new Date(v);return t.setMinutes(t.getMinutes()+G),!(t.getTime()>new Date(e.scheduled_date_time).getTime())})).includes(!1)&&"green_bills"!=$)throw un("APPOINTMENT_CAN_NOT_DONE_BEFORE_INITIAL_EVALUATION")}const oe={facility_location_id:w,deleted_at:null};D?oe.doctor_id=D:oe.speciality_id=O;const se=D?"doctor":"speciality",de={include:{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[jn.gte]:new Date(J)},start_date:{[jn.lte]:new Date(v)}}}},_e=this.shallowCopy(yield this[this.__getAssigmentMethod[`${se}`]].findAll(Object.assign({},oe),Object.assign(Object.assign({},de),D&&[{as:"availableSpeciality",model:it,required:!0,where:{speciality_id:O,deleted_at:null}}])));if(!_e||!_e.length)throw un("NO_ASSIGNMENT_FOUND");const re=_e.map((e=>{const{dateList:t}=e;return null==t?void 0:t.map((t=>({available_speciality_id:null==e?void 0:e.available_speciality_id,date_list_id:null==t?void 0:t.id,end_date:null==t?void 0:t.end_date,id:null==e?void 0:e.id,no_of_doctors:null==t?void 0:t.no_of_doctors,no_of_slots:null==t?void 0:t.no_of_slots,start_date:null==t?void 0:t.start_date})))})).flat(),ce=this.getTimeSlotOfAssignment(re[0]);J=new Date(v),J.setMinutes(J.getMinutes()+ce*K);const{start_date:pe,end_date:ue,id:me}=re[0],ye=this.shallowCopy(yield this.__repo.findAll({deleted_at:null,id:{[jn.ne]:u},scheduled_date_time:{[jn.between]:{startDateFromDateList:pe,endDateFromDateList:ue}},[jn.or]:[{available_doctor_id:me},{available_speciality_id:me}]})),he=this.getFreeSlotsForAssignment(re[0],ye,z.over_booking+1,z.time_slot,1),fe=null==he?void 0:he.find((e=>{const t=new Date(e.startDateTime),i=new Date(e.startDateTime);if(i.setMinutes(i.getMinutes()+ce),t.getTime()<=new Date(v).getTime()&&new Date(v).getTime()<i.getTime()&&e.count>0)return e}));if(!fe||!Object.keys(fe).length)throw un("NO_SLOTS_REMAINING");const{id:ve}=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({deleted_at:null,slug:"re_scheduled"})),ge={headers:{Authorization:t}};if(O!==(null===(l=null==k?void 0:k.availableSpeciality)||void 0===l?void 0:l.speciality_id)||D!==(null===(d=null==k?void 0:k.availableDoctor)||void 0===d?void 0:d.doctor_id)){const e=yield this.getAppointmentById({appointment_id:[u],user_id:null},t);this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:e,action_point:"deleted",deleted_appointment_ids:[u]},ge)}const be=yield this.__repo.update(u,{appointment_title:m,available_doctor_id:"doctor"===se?_e[0].id:null,available_speciality_id:"speciality"===se?_e[0].id:null===(_=re[0])||void 0===_?void 0:_.available_speciality_id,comments:f,confirmation_status:y,date_list_id:null===(c=null===(r=_e[0])||void 0===r?void 0:r.dateList[0])||void 0===c?void 0:c.id,is_speciality_base:S,physician_id:C,technician_id:R,scheduled_date_time:new Date(v),status_id:ve,time_slots:ce*K,type_id:I,updated_at:new Date,updated_by:A},i),Se=[],De=[];if(E&&E.length){for(const e of E){const{id:t,is_deleted:i}=e;t?t&&i?De.push(Object.assign(Object.assign({},e),{deleted_at:new Date})):t&&De.push(Object.assign({},e)):Se.push(Object.assign({appointment_id:be.id},e))}this.shallowCopy(yield this.__transportationsRepo.bulkCreate(Se,i)),this.shallowCopy(yield this.__transportationsRepo.bulkUpdate(De,i,null,["is_pickup","is_dropoff","type","comments","street_address","suit","city","state","zip","deleted_at"]))}const we=this.shallowCopy(yield this.__repo.findOne({id:be.id},{include:[{as:"appointmentStatus",model:g,required:!1,where:{deleted_at:null}},{as:"patient",model:Et,required:!1,where:{deleted_at:null}},{as:"caseType",model:Wt,required:!1,where:{deleted_at:null}}]})),Oe=new Date(we.scheduled_date_time);Oe.setMinutes(Oe.getMinutes()+we.time_slots);const Te=this.shallowCopy(yield this.__kioskContactPersonTypesRepo.findOne({slug:"self"})),Ae=this.shallowCopy(yield this.__kioskContactPersonRepo.findOne({case_id:we.case_id,contact_person_type_id:Te.id,deleted_at:null}));Ae&&Ae.email&&this.sentEmailForAppointment({appointmentId:we.id,appointmentStatus:we.appointmentStatus.name,caseId:we.case_id,caseType:we.caseType.name,confirmationStatus:we.confirmation_status,email:Ae.email,emailTitle:"Update Appointment",endDateTime:new Date(Oe),patientLastName:we.patient.last_name,reason:"updated",scheduledDateTime:new Date(we.scheduled_date_time),timeSlot:we.time_slots}),this.__http.emailGenator(`${process.env.EMAIL_TEMPLATE_GENERATOR_URL}appointment/generate-data-with-multiple-context`,{appointment_ids:[we.id],email_title:"Appointment Updated"},ge);const Ne=yield this.getAppointmentById({appointment_id:[we.id],user_id:A},t);this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:Ne,action_point:"updated"},ge),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments`,{},ge);const Ce=this.shallowCopy(yield this.__http.get(`${process.env.KIOSK_URL}case-patient-session-statuses`,Object.assign(Object.assign({},ge),{params:{slug:"re_scheduled"}}))),{result:{data:Re}}=Ce||{};return yield this.__http.put(`${process.env.KIOSK_URL}case-patient-session`,{case_id:b,status_id:null===(p=Re[0])||void 0===p?void 0:p.id,appointment_id:u,trigger_socket:!0},ge),be})),this.putV1=(e,t)=>kn(this,void 0,void 0,(function*(){var i,a,n,o,s,l,d;const{id:_,appointment_title:r,confirmation_status:c,patient_id:p,comments:u,start_date_time:m,case_id:y,is_speciality_base:h,appointment_type_id:f,doctor_id:v,facility_location_id:b,speciality_id:S,time_slot:I,user_id:D,time_zone:w,physician_id:O,technician_id:T,transportation:A,cpt_codes:N,reading_provider_id:C,cd_image:R,is_transportation:E}=e,L=yield _a.transaction(),k={headers:{Authorization:t}};let P={};try{if(!S)throw un("SPECIALITY_REQUIRED");if(!b)throw un("FACILITY_REQUIRED");const e=this.shallowCopy(yield this.__repo.findById(_,{include:[{as:"appointmentStatus",model:g},{as:"availableDoctor",model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null}},{model:J,as:"appointmentType",required:!1,where:{deleted_at:null}}]}));if(!e||!Object.keys(e).length)throw un("NO_APPOINTMENT_OF_GIVEN_ID");const j=this.shallowCopy(yield this.__appoitmentTypeRepo.findOne({slug:"initial_evaluation"})),{appointmentStatus:{slug:B},evaluation_date_time:U,available_doctor_id:q,availableSpeciality:F,availableDoctor:M}=e;if("no_show"===B)throw un("NO_SHOW_STATUS");if(U)throw un("EVALUATION_ALREADY_STARTED");const{is_transferring_case:$}=this.shallowCopy(yield this.__kioskCaseRepo.findOne({id:y},{attributes:["is_transferring_case"]}));let V=!1;if(!v||v&&S){const e=[];v&&e.push({as:"availableDoctor",model:ot,required:!1,where:{deleted_at:null}});const t=this.shallowCopy(yield this.__repo.findAll({id:{[jn.ne]:_},cancelled:!1,case_id:y,deleted_at:null,patient_id:p,pushed_to_front_desk:!1,[jn.and]:[ra.where(ra.fn("datediff",this.convertDateToLocal(new Date(m),w),ra.col("scheduled_date_time")),{[jn.and]:[{[jn.gt]:-1},{[jn.lt]:1}]})]},{include:[{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null}},...e]})),n=this.shallowCopy(yield this.__specialityRepo.findOne({deleted_at:null,id:S}));if(S&&!this.shallowCopy(yield this.__specialityRepo.findOne({deleted_at:null,id:S})).is_create_appointment&&!v)throw Error("Selected speciality doesn't allow appointments to be created");for(const e of t){const{scheduled_date_time:t,time_slots:o}=e,s=new Date(m),l=new Date(t),d=new Date(l.getTime()+6e4*o);if((null===(i=null==e?void 0:e.availableSpeciality)||void 0===i?void 0:i.speciality_id)==S&&s.getDay()===l.getDay()&&(V=!0),S==(null===(a=null==e?void 0:e.availableSpeciality)||void 0===a?void 0:a.speciality_id)&&s.getTime()===l.getTime()&&!n.over_booking)throw un("SAME_TIME_APPOINTMENT_ERROR");if(s.getTime()>=l.getTime()&&s.getTime()<d.getTime()&&!n.over_booking)throw un("TIME_SLOTS_ISSUE")}}const x=F.speciality_id,K=this.shallowCopy(yield this.__specialityRepo.findOne({deleted_at:null,id:x},{include:[{as:"specialityVisitType",model:Y,where:{speciality_id:x,appointment_type_id:f,deleted_at:null}}]}));if(!K&&!Object.keys(K).length)throw un("NO_SPECIALITY_FOUND");if(new Date(e.scheduled_date_time).getTime()!=new Date(m).getTime()){const e=new Date(m);e.setMinutes(e.getMinutes()+I),yield this.checkIsThisTimeFreeOrNot({appointmentEndTime:e,startDateTime:new Date(m),specialityId:S,doctorId:v,caseId:y,patientId:p,time_zone:w,speciality:K,desiredTimeSlot:I})}const z=I/K.time_slot,G=x===S?K:this.shallowCopy(yield this.__specialityRepo.findById(S)),H=z*G.time_slot,W=new Date(m),Q=new Date(m);let X,Z,ee=new Date(m);if(ee.setMinutes(ee.getMinutes()+H),!c){W.setHours(W.getHours()-24),Q.setHours(Q.getHours()+24);const e={cancelled:!1,case_id:y,deleted_at:null,id:{[jn.ne]:_},patient_id:p,pushed_to_front_desk:!1};X=this.shallowCopy(yield this.__repo.findAll(Object.assign(Object.assign({},e),{scheduled_date_time:{[jn.between]:[W,m]}}))),Z=this.shallowCopy(yield this.__repo.findOne(Object.assign(Object.assign({},e),{scheduled_date_time:{[jn.and]:[{[jn.gt]:new Date(m)},{[jn.lt]:Q}]}}),{limit:1,order:[["scheduled_date_time","ASC"]]}));const t=null==X?void 0:X.filter((e=>{const t=new Date(e.scheduled_date_time);if(null==t||t.setMinutes((null==t?void 0:t.getMinutes())+e.time_slots),new Date(m).getDate()<t.getDate())return e}));if(!K.specialityVisitType[0].is_multiple_same_day&&((null==t?void 0:t.length)||(null==Z?void 0:Z.length)&&new Date(Z[0].scheduled_date_time).getTime()<new Date(ee).getTime()))throw un("PATIENT_ALREADY_HAVE_ASSIGNMENT")}const{id:te}=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({slug:"no_show"})),ie={caseId:y,patientId:p,appointmentTypeId:f,specialityId:S,noShowId:te,config:k};if(yield this.checkVisitTypes(ie,$,V,e),!K.specialityVisitType[0].is_multiple_same_day)if(f!==j.id){const t=this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:y,deleted_at:null,id:{[jn.ne]:_},patient_id:p,pushed_to_front_desk:!1,scheduled_date_time:{[jn.between]:[new Date(e.scheduled_date_time),new Date(m)]},type_id:j.id},{include:[{as:"availableDoctor",include:{as:"doctor",attributes:{exclude:["password"]},model:le,required:!0,where:{deleted_at:null}},model:ot,required:!0,where:{deleted_at:null}},{as:"availableSpeciality",model:it,required:!0,where:{speciality_id:S,deleted_at:null}}]}));if(this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:y,deleted_at:null,id:{[jn.ne]:_},patient_id:p,pushed_to_front_desk:!1,scheduled_date_time:{[jn.between]:[new Date(e.scheduled_date_time),new Date(m)]},type_id:j.id},{include:{as:"availableSpeciality",model:it,where:{deleted_at:null,speciality_id:S}}}))||t)throw un("NO_RESCHEDULED_INTIAL_APPONTMENT")}else{const t=this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:y,deleted_at:null,id:{[jn.ne]:_},patient_id:p,pushed_to_front_desk:!1,scheduled_date_time:{[jn.between]:[new Date(e.scheduled_date_time),new Date(m)]},type_id:{[jn.ne]:j.id}},{include:[{as:"availableDoctor",include:[{as:"doctor",attributes:{exclude:["password"]},model:le,required:!0,where:{deleted_at:null}},{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!0,where:{deleted_at:null}},model:it,required:!0,where:{deleted_at:null,speciality_id:S}}],model:ot,required:!0,where:{deleted_at:null}},{as:"availableSpeciality",model:it,required:!0,where:{speciality_id:S,deleted_at:null}}]}));if(this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:y,deleted_at:null,id:{[jn.ne]:_},patient_id:p,pushed_to_front_desk:!1,scheduled_date_time:{[jn.between]:[new Date(e.scheduled_date_time),new Date(m)]},type_id:{[jn.ne]:j.id}},{include:{as:"availableSpeciality",model:it,where:{deleted_at:null,speciality_id:S}}}))||t)throw un("NO_RESCHEDULED_APPOINTMENT")}const ae={facility_location_id:b,deleted_at:null},ne=[];if(v){ae.doctor_id=v,ne.push({as:"availableSpeciality",include:{as:"speciality",model:ue,required:!0,where:{deleted_at:null}},model:it,required:!0,where:{deleted_at:null,speciality_id:S}});const e=this.shallowCopy(yield this.__unAvailableDoctorRepo.findOne({[jn.or]:[{[jn.and]:[{approval_status:1,deleted_at:null,doctor_id:v,end_date:{[jn.gt]:new Date(ee)},start_date:{[jn.lte]:new Date(m)}}]},{[jn.and]:[{approval_status:1,deleted_at:null,doctor_id:v,end_date:{[jn.lte]:new Date(ee),[jn.gte]:new Date(m)}}]}]}));if(e&&Object.keys(e).length)throw un("NO_PROVIDER_AVAILABLE")}else ae.speciality_id=S;const oe=v?"doctor":"speciality",se={include:[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[jn.gte]:new Date(ee)},start_date:{[jn.lte]:new Date(m)}}},...ne]},de=this.shallowCopy(yield this[this.__getAssigmentMethod[`${oe}`]].findAll(Object.assign({},ae),Object.assign({},se)));if(!de||!de.length)throw un("NO_ASSIGNMENT_FOUND");const _e=de.map((e=>{const{dateList:t}=e;return null==t?void 0:t.map((t=>({available_speciality_id:null==e?void 0:e.available_speciality_id,date_list_id:null==t?void 0:t.id,end_date:null==t?void 0:t.end_date,id:null==e?void 0:e.id,no_of_doctors:null==t?void 0:t.no_of_doctors,no_of_slots:null==t?void 0:t.no_of_slots,start_date:null==t?void 0:t.start_date})))})).flat(),re=this.getTimeSlotOfAssignment(_e[0]);ee=new Date(m),ee.setMinutes(ee.getMinutes()+re*z);const{start_date:ce,end_date:pe,id:me}=_e[0],ye=this.shallowCopy(yield this.__repo.findAll({deleted_at:null,id:{[jn.ne]:_},scheduled_date_time:{[jn.between]:{startDateFromDateList:ce,endDateFromDateList:pe}},[jn.or]:[{available_doctor_id:me},{available_speciality_id:me}]})),he=this.getFreeSlotsForAssignment(_e[0],ye,G.over_booking+1,G.time_slot,1),fe=null==he?void 0:he.find((e=>{const t=new Date(e.startDateTime),i=new Date(e.startDateTime);if(i.setMinutes(i.getMinutes()+re),t.getTime()<=new Date(m).getTime()&&new Date(m).getTime()<i.getTime()&&e.count>0)return e}));if(!fe||!Object.keys(fe).length)throw un("NO_SLOTS_REMAINING");const{id:ve}=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({deleted_at:null,slug:"re_scheduled"}));P={config:k};const ge=this.shallowCopy(yield this.__http.get(`${process.env.FRONT_DESK_URL}single_speciality`,Object.assign(Object.assign({},k),{params:{id:S}}))),{result:{data:{visit_types:be}}}=ge,{appointmentType:{id:Se}}=e;if(Se!=f&&!$){let e,t;for(const i of be){const{id:a}=i;Se===a&&(e=i),f===a&&(t=i)}if(!t)throw un("CHECK_MASTER_VISIT_TYPE");if(e&&e.position>t.position){const i=t;t=e,e=i}if(e&&e.is_required&&1===this.shallowCopy(yield this.__repo.count("id",{cancelled:!1,case_id:y,deleted_at:null,patient_id:p,type_id:e.id,pushed_to_front_desk:!1}))&&!e.is_multiple)throw un("APPOINTMENT_CANNOT_UPDATED");if(t.is_required&&1===this.shallowCopy(yield this.__repo.count("id",{cancelled:!1,case_id:y,deleted_at:null,patient_id:p,type_id:t.id,pushed_to_front_desk:!1}))&&!t.is_multiple)throw un("APPOINTMENT_CANNOT_UPDATED")}if(S!==(null===(n=null==e?void 0:e.availableSpeciality)||void 0===n?void 0:n.speciality_id)||v!==(null===(o=null==e?void 0:e.availableDoctor)||void 0===o?void 0:o.doctor_id)){const e=yield this.getAppointmentById({appointment_id:[_],user_id:null},t);this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:e,action_point:"deleted",deleted_appointment_ids:[_]},k)}const Ie=yield this.__repo.update(_,{appointment_title:r,available_doctor_id:"doctor"===oe?de[0].id:null,available_speciality_id:"speciality"===oe?de[0].id:null===(s=_e[0])||void 0===s?void 0:s.available_speciality_id,cd_image:null!=R?R:null,comments:u,confirmation_status:c,date_list_id:null===(d=null===(l=de[0])||void 0===l?void 0:l.dateList[0])||void 0===d?void 0:d.id,is_speciality_base:h,physician_id:null!=O?O:null,reading_provider_id:null!=C?C:null,technician_id:T,scheduled_date_time:new Date(m),status_id:ve,time_slots:re*z,type_id:f,is_transportation:null!=E?E:null,updated_at:new Date,updated_by:D},L),De=[],we=[];if(E||(yield this.__transportationsRepo.updateByReferenceIds({appointment_id:Ie.id},{deleted_at:new Date},L)),A&&A.length){for(const e of A){const{id:t,is_deleted:i}=e;t?t&&i?we.push(Object.assign(Object.assign({},e),{deleted_at:new Date})):t&&we.push(Object.assign({},e)):De.push(Object.assign({appointment_id:Ie.id},e))}this.shallowCopy(yield this.__transportationsRepo.bulkCreate(De,L)),this.shallowCopy(yield this.__transportationsRepo.bulkUpdate(we,L,null,["is_pickup","is_dropoff","type","comments","street_address","suit","city","state","zip","phone","deleted_at"]))}N&&N.length&&(K.is_multiple_visit||(yield this.__schAppointmentCptCodesRepo.updateByReferenceIds({appointment_id:Ie.id},{deleted_at:new Date},L),yield this.addAppointmentsCptCodes(Ie.id,N,L)));const Oe=this.shallowCopy(yield this.__casePatientSessionRepo.findOne({appointment_id:_,case_id:y}));if(!Oe||!Object.keys(Oe).length)throw Error("Visit Status not exists!");const Te=this.shallowCopy(yield this.__casePatientSessionStatusesRepo.findOne({slug:"re_scheduled"}));yield this.__casePatientSessionRepo.updateByColumnMatched({appointment_id:_,case_id:y,deleted_at:null},{status_id:Te.id,updated_by:null!=D?D:null},L),yield L.commit()}catch(e){throw yield L.rollback(),e}const j=yield this.createAppointmentWithCptCodess({appointment_id:_,cpt_codes:N,time_zone:w,user_id:D},t),B=yield this.getAppointmentById({appointment_id:[_],user_id:D},t);return this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:B,action_point:"updated"},P.config),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments`,{},P.config),{msg_alert_1:j.msg_alert_1,msg_alert_2:j.msg_alert_2,appointment:j.appointments}})),this.removeEvaluationTime=(e,t)=>kn(this,void 0,void 0,(function*(){const{id:t,user_id:i}=e,a=this.shallowCopy(yield this.__repo.findById(t));if(!a||!Object.keys(a).length)throw Error("Invalid id");return this.__repo.update(t,{evaluation_date_time:null})})),this.resolveAppointmentForDoctor=(e,t)=>kn(this,void 0,void 0,(function*(){const{appointment_ids:i,available_doctor_id:a,user_id:n=Number(process.env.USERID),facility_location_tpye:o,unavailibility_end_date:s}=e,l=this.shallowCopy(yield this.__repo.findAll({deleted_at:null,id:{[jn.in]:i}},{include:[{as:"availableDoctor",include:[{as:"doctor",attributes:{exclude:["password"]},include:{as:"userFacilities",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:Ie,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}}],model:ot,required:!0,where:{deleted_at:null}},{as:"dateList",model:qe,required:!1,where:{deleted_at:null}}],order:[["scheduled_date_time","ASC"]]}));if(!l||!l.length||l.length!==i.length)throw un("NO_APPOINTMENT_FOUND");const d=this.formatAvailableDoctorForAutoResolve(l,a),_=d[1],r=d[0],c=s?new Date(s):new Date(_.end_date),p=new Date(new Date(c).setMonth(c.getMonth()+2)),u=yield this.findFacilityLocations(_.doctor_id,n),m={doctor_id:_.doctor_id,end_date:{[jn.lte]:p},facility_location_id:{[jn.in]:u},start_date:{[jn.gte]:c}};a&&(m.id={[jn.ne]:a});const y=this.shallowCopy(yield this.__availableDoctorRepo.findAll(Object.assign({},m),{include:[{as:"appointments",model:He,required:!1,where:{deleted_at:null}},{as:"doctor",attributes:{exclude:["password"]},include:{as:"userFacilities",model:Ie,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}}]}));if(!y||!y.length)throw un("NO_OTHER_ASSIGNMENTS_FOUND");const h=this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({approval_status:1,doctor_id:_.doctor_id,end_date:{[jn.lte]:p},start_date:{[jn.gte]:c}}));let f,v=y.map((e=>e.appointments)).flat(),g=[],b=0;for(;r.length>b;)f=null==y?void 0:y.find((e=>{if(v=[...v,...null==g?void 0:g.filter((t=>!(t.available_doctor_id!==e.id)))],"same"!==o){const{doctor:{userFacilities:t}}=e;for(const i of t)if((null==_?void 0:_.speciality_id)===i.speciality_id){let t=this.getFreeSlotsForAssignment(_,v,_.over_booking+1,_.time_slot,0);t=this.getFreeSlotsWithUnavailabilityChk(t,h,_.time_slot);const i=this.resolveDoctorAppointmentOnFreeSlots(t,r,e.id,_.time_slot);if(0===i[1].length)return g=[...g,...i[0]],e;g=[...g,...i[0]]}}else if(_.facility_location_id===e.facility_location_id){let t=this.getFreeSlotsForAssignment(_,v,_.over_booking+1,_.time_slot,0);t=this.getFreeSlotsWithUnavailabilityChk(t,h,_.time_slot);const i=this.resolveDoctorAppointmentOnFreeSlots(t,r,e.id,_.time_slot);if(0===i[1].length)return g=[...g,...i[0]],e;g=[...g,...i[0]]}g=this.filterNonNull(g)})),b+=1;if(!g.length)throw un("NO_FREE_SLOTS_FOUND");if(s&&g.length!==i.length)throw un("CANNOT_FIND_FREESLOTS");const S=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({deleted_at:null,slug:"re_scheduled"})),I=null==g?void 0:g.map((e=>Object.assign(Object.assign({},e),{status_id:null==S?void 0:S.id}))),D=l.map((e=>e.id));yield this.__repo.updateByIds(D,{deleted_at:new Date,updated_by:n});const w={headers:{Authorization:t}},O=yield this.getAppointmentById({appointment_id:D,user_id:null},t);this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:O,action_point:"deleted",deleted_appointment_ids:D},w);const T=this.shallowCopy(yield this.__repo.bulkCreate([...I])),A=yield this.getAppointmentById({appointment_id:null==T?void 0:T.map((e=>e.id)),user_id:n},t);return this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:A,action_point:"created"},w),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:D},w),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments`,{},w),T})),this.resolveAppointmentForSpeciality=(e,t)=>kn(this,void 0,void 0,(function*(){const{appointment_ids:i,user_id:a=Number(process.env.USERID),facility_location_tpye:n}=e,o=this.shallowCopy(yield this.__userRepo.findOne({deleted_at:null,id:a}));if(!o||!Object.keys(o).length)throw un("LOGGED_IN_NOT_FOUND");const s=this.shallowCopy(yield this.__modelHasRolesRepo.findOne({model_id:a},{include:{model:he,as:"role",required:!1}}));if(!s||!Object.keys(s).length)throw un("USER_HAS_NO_ROLES");const{role:{slug:l}}=s||{},d=this.shallowCopy(yield this.__repo.findAll({cancelled:!1,deleted_at:null,id:{[jn.in]:i},pushed_to_front_desk:!1},{include:[{as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null}},{as:"dateList",model:qe,required:!1,where:{deleted_at:null}}]}));if(!d||!d.length)throw un("NO_APPOINTMENT_FOUND");let _="super_admin"===l?this.shallowCopy(yield this.__facilityLocationRepo.findAll({deleted_at:null,is_main:!1})).map((e=>e.id)):this.shallowCopy(yield this.__userFacilityRepo.findAll({user_id:a,deleted_at:null})).map((e=>e.facility_location_id));_=this.filterUnique(_);const r=this.filterUnique(this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,facility_location_id:{[jn.in]:_},speciality_id:{[jn.ne]:null}})).map((e=>e.user_id)));let c,p,u,m=d.length,y=[];for(const e of d){const{dateList:{start_date:t,end_date:i,no_of_doctors:a,no_of_slots:o},available_speciality_id:s,availableSpeciality:{speciality_id:l,facility_location_id:h}}=e||{},f=new Date(t),v=new Date(i),g=new Date(v),b=new Date(g.setMonth(g.getMonth()+2)),S="same"===n.toLowerCase()?{facility_location_id:h}:{facility_location_id:{[jn.in]:_}},I=this.shallowCopy(yield this.__recurrenceDateListRepo.findAll({available_speciality_id:{[jn.ne]:s},deleted_at:null,start_date:{[jn.gte]:v,[jn.lte]:b}},{include:{as:"availableSpeciality",model:it,required:!0,where:Object.assign({deleted_at:null,speciality_id:l},S)}})),D=this.shallowCopy(yield this.__specialityRepo.findOne({deleted_at:null,id:l}));let w;for(const e of I){const{available_speciality_id:t,start_date:i,end_date:n,no_of_doctors:s,no_of_slots:l}=e,_=new Date(i),h=new Date(n),g=this.shallowCopy(yield this.__recurrenceDateListRepo.findAll({deleted_at:null},{include:{as:"availableDoctor",model:ot,required:!0,where:{available_speciality_id:t,deleted_at:null}}}));let b=(v.getTime()-f.getTime())/1e3/60/o;b*=a;let S=d.map((e=>{const t=e.time_slots/b*D.time_slot;return Object.assign(Object.assign({},e),{time_slots:Math.floor(t)})}));if(0===g.length){c=(h.getTime()-_.getTime())/1e3/60/l,c*=s;let i=this.shallowCopy(yield this.__repo.findAll({available_speciality_id:t,deleted_at:null,scheduled_date_time:{[jn.between]:[_,h]}},{order:[["scheduled_date_time","ASC"]]}));i=[...i,...null==y?void 0:y.filter((e=>(null==e?void 0:e.available_speciality_id)===t))],p=this.getFreeSlotsForAutoResolveAppointment(e,i,s,c,!0),u=this.resolveAppointmentsOnFreeSlots(p[0],S,null,t,c),m-=u[0].length,y=[...y,...u[0]],S=u[1]}else if((null==g?void 0:g.length)===s)for(const e of g){const{availableDoctor:{doctor_id:i,available_speciality_id:a},start_date:n,end_date:o}=e,s=new Date(n),l=new Date(o);if(c=(new Date(e.end_date).getTime()-new Date(e.start_date).getTime())/1e3/60/e.no_of_slots,r.includes(i)){const n=this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({[jn.or]:[{[jn.and]:[{start_date:{[jn.lte]:s}},{end_date:{[jn.gt]:s}},{doctor_id:i},{approval_status:!0}]},{[jn.and]:[{start_date:{[jn.gte]:s}},{start_date:{[jn.lt]:l}},{doctor_id:i},{approval_status:!0}]}]}));let o=this.shallowCopy(yield this.__repo.findAll({available_doctor_id:e.available_doctor_id,deleted_at:null,scheduled_date_time:{[jn.between]:[s,l]}},{order:[["scheduled_date_time","ASC"]]}));if(o=[...o,...null==y?void 0:y.filter((e=>(null==e?void 0:e.available_speciality_id)===t))],p=this.getFreeSlotsForAutoResolveAppointment(e,o,1,c,!1,n),u=this.resolveAppointmentsOnFreeSlots(p[0],S,e.available_doctor_id,a,c),m-=u[0].length,y=[...y,...u[0]],S=u[1],0===m)break}}else{let i;for(const e of g){const{availableDoctor:{doctor_id:a,available_speciality_id:n},start_date:o,end_date:s}=e,l=new Date(o),d=new Date(s);if(c=(new Date(e.end_date).getTime()-new Date(e.start_date).getTime())/1e3/60/e.no_of_slots,r.includes(a)){const o=this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({[jn.or]:[{[jn.and]:[{start_date:{[jn.lte]:l}},{end_date:{[jn.gt]:l}},{doctor_id:a},{approval_status:!0}]},{[jn.and]:[{start_date:{[jn.gte]:l}},{start_date:{[jn.lt]:d}},{doctor_id:a},{approval_status:!0}]}]}));let s=this.shallowCopy(yield this.__repo.findAll({available_doctor_id:e.available_doctor_id,deleted_at:null,scheduled_date_time:{[jn.between]:[l,d]}},{order:[["scheduled_date_time","ASC"]]}));if(s=[...s,...null==y?void 0:y.filter((e=>(null==e?void 0:e.available_speciality_id)===t))],p=this.getFreeSlotsForAutoResolveAppointment(e,s,1,c,!1,o),u=this.resolveAppointmentsOnFreeSlots(p[0],S,e.available_doctor_id,n,c),m-=u[0].length,y=[...y,...u[0]],S=u[1],0===m){i=e;break}}}if(!i||!Object.keys(i).length){c=(h.getTime()-_.getTime())/1e3/60/l,c*=s;let i=this.shallowCopy(yield this.__repo.findAll({available_speciality_id:t,deleted_at:null,scheduled_date_time:{[jn.between]:[_,h]}},{order:[["scheduled_date_time","ASC"]]}));i=[...i,...null==y?void 0:y.filter((e=>(null==e?void 0:e.available_speciality_id)===t))],p=this.getFreeSlotsForAutoResolveAppointment(e,i,s,c,!0);const n=v.getTime()-f.getTime();let r=n/1e3/60/o;r=n*a,S=d.map((e=>{const t=e.time_slots/b*D.time_slot;return Object.assign(Object.assign({},e),{time_slots:t})})),u=this.resolveAppointmentsOnFreeSlots(p[0],S,null,t,c),m-=u[0].length,y=[...y,...u[0]],S=u[1]}}if(0===m){w=e;break}}if(!w||!Object.keys(w).length)throw un("APPOINTMENT_CAN_NOT_RESOLVED")}if(y=this.filterNonNull(y),y.length!==i.length)throw un("APPOINTMENT_CAN_NOT_RESOLVED");const h=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({deleted_at:null,slug:"re_scheduled"})),f=this.shallowCopy(yield this.__casePatientSessionStatusesRepo.findOne({deleted_at:null,slug:"re_scheduled"})),v=null==y?void 0:y.map((e=>Object.assign(Object.assign({},e),{status_id:null==h?void 0:h.id}))),g=d.map((e=>e.id)),b={headers:{Authorization:t}},S=d.map((e=>({appointment_id:e.id,case_id:null==e?void 0:e.case_id}))).map((e=>({appointments:[e],deleted_at:new Date,updated_by:a}))),{status:I}=this.shallowCopy(yield this.__http.put(`${process.env.KIOSK_URL}case-patient-session/update-by-appointment-ids`,Object.assign(Object.assign({},S),{trigger_socket:!0}),b));if(200!==I)throw un("ERROR_WHILE_UPDATING_STATUS");yield this.__repo.updateByIds(g,{deleted_at:new Date,updated_by:a});const D=yield this.getAppointmentById({appointment_id:g,user_id:null},t);this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:D,action_point:"deleted",deleted_appointment_ids:g},b),this.__http.emailGenator(`${process.env.EMAIL_TEMPLATE_GENERATOR_URL}appointment/generate-data-with-multiple-context`,{appointment_ids:[g],email_title:"Appointment Deleted"},b),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:g},b);const w=this.shallowCopy(yield this.__repo.bulkCreate([...v])),O=yield this.getAppointmentById({appointment_id:w.map((e=>e.id)),user_id:a},t);this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:O,action_point:"created"},b),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments`,{},b);const T=w.map((e=>({appointment_id:e.id,case_id:null==e?void 0:e.case_id}))).map((e=>({appointments:[e],status_id:null==f?void 0:f.id}))),{status:A}=this.shallowCopy(yield this.__http.put(`${process.env.KIOSK_URL}case-patient-session/update-by-appointment-ids`,Object.assign(Object.assign({},T),{trigger_socket:!0}),b));if(200!==A)throw un("ERROR_WHILE_UPDATING_STATUS");return w})),this.suggest=(e,t)=>kn(this,void 0,void 0,(function*(){var t;const{case_id:i,facility_location_id:a,case_type:n,case_type_id:o,status_id:s,speciality_id:l,patient_id:d,type_id:_,doctor_id:r,start_date:c,end_date:p,over_booking:u,priority_slug:m,start_time:y,end_time:h,appointment_title:f,days:v}=e,g=[],b=this.shallowCopy(yield this.__specialityRepo.findById(l));if(!b||!Object.keys(b).length)throw un("INVALID_SPECIALITY_IDS");const{over_booking:S,time_slot:I,name:D,qualifier:w}=b,O=u?u+1:S+1,T=new Date(c),A=(new Date(p),this.formatDatesForSuggestion({days:v,endDateString:p,endTime:h,startDateString:c,startTime:y}));if(!A||!A.length)throw un("NO_DAYS_FOUND");const N={facility_location_id:a,deleted_at:null};r?N.doctor_id=r:N.speciality_id=l;const C=this.shallowCopy(yield this.__appointmentPrioritiesRepo.findOne({slug:m})),R=this.shallowCopy(yield this.__userRepo.findById(r,{include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}}})),E=this.shallowCopy(yield this.__facilityLocationRepo.findOne({deleted_at:null,id:a},{include:{as:"facility",model:Ut,required:!1,where:{deleted_at:null}}}));for(const e of A){const c={include:{as:"dateList",model:qe,required:!0,where:{[jn.or]:[{deleted_at:null,start_date:{[jn.gte]:e.start,[jn.lt]:e.end}},{deleted_at:null,end_date:{[jn.gt]:e.start},start_date:{[jn.lte]:e.start}}]}}},p=r?"doctor":"speciality",u=this.shallowCopy(yield this[this.__getAssigmentMethod[`${p}`]].findAll(Object.assign({},N),Object.assign({},c))).map((e=>{const{dateList:t}=e;return null==t?void 0:t.map((t=>Object.assign(Object.assign({},e),{end_date:t.end_date,no_of_doctors:null==t?void 0:t.no_of_doctors,no_of_slots:null==t?void 0:t.no_of_slots,start_date:t.start_date})))})).flat();for(const r of u){const{speciality_id:c,start_date:u,end_date:m,id:y,doctor_id:h}=r,v={deleted_at:null,scheduled_date_time:{[jn.between]:[u,m]}};c?v.available_speciality_id=y:v.available_doctor_id=y;const b=this.shallowCopy(yield this.__repo.findAll(Object.assign({},v))),S=this.getTimeSlotOfAssignment(r),I=this.getFreeSlotsWithOverBookingCheck(e,r,b,O,S);let A=I;if(h){const t=this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({[jn.or]:[{approval_status:!0,doctor_id:h,end_date:{[jn.gt]:e.start},start_date:{[jn.lte]:e.start}},{approval_status:!0,doctor_id:h,start_date:{[jn.gte]:e.start,[jn.lt]:e.start}}]}));A=t&&t.length?this.getFreeSlotsWithUnavailabilityChk(I,t,S):A}const N=e.start.getDate()<10?`0${T.getDate()}`:T.getDate(),L=`${e.start.getFullYear()}-${e.start.getMonth()+1}-${N}`;A&&A.length&&!(null==g?void 0:g.find((e=>e.date_for_comparison===L)))&&g.push({appointment_title:f,case_id:i,case_type:n,case_type_id:o,created_at:Date.now(),doctor_basic_information:null==R?void 0:R.userBasicInfo,doctor_id:"doctor"===p?r.doctor_id:null,facility_location_detail:E,facility_location_id:a,patient_id:d,priority_id:C.id,speciality_id:l,speciality_name:D,speciality_qualifier:null!=w?w:null,start_date_time:null===(t=A[0])||void 0===t?void 0:t.startDateTime,status_id:s,type_id:_})}}if(!g||!g.length)throw un("NO_SLOT_FOUND");return g})),this.triggerAppointmentSocket=(e,t)=>kn(this,void 0,void 0,(function*(){const{id:i,action:a}=e,n={headers:{Authorization:t}},o=yield this.getAppointmentById({appointment_id:i,user_id:null},t);return this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:o,action_point:a},n),null})),this.updateAppointmentAndVisitStatus=(e,t)=>kn(this,void 0,void 0,(function*(){const{id:i,appointment_status:a,visit_status:n,case_id:o,trigger_socket:s}=e;if(!this.shallowCopy(yield this.__repo.exists(i)))throw un("NO_APPOINTMENT_FOUND");const l=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({slug:a})),d=this.shallowCopy(yield this.__casePatientSessionStatusesRepo.findOne({slug:n})),_={headers:{Authorization:t}},{status:r}=this.shallowCopy(yield this.__http.put(`${process.env.KIOSK_URL}case-patient-session`,{case_id:o,status_id:d.id,appointment_id:i,trigger_socket:s},_));if(200!==r)throw un("ERROR_WHILE_UPDATING_STATUS");yield this.__repo.update(i,{status_id:l.id});const c=yield this.getAppointmentById({appointment_id:[i],user_id:null},t);return s||this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:c,action_point:"updated"},_),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:[i]},_),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments`,{},_),this.shallowCopy(yield this.__repo.findById(i))})),this.updateAppointmentDoctor=(e,t,i)=>kn(this,void 0,void 0,(function*(){const{appointment_ids:t,doctor_id:a,user_id:n}=e;for(const e of t){const t=this.shallowCopy(yield this.__repo.findOne({id:e},{include:{as:"availableDoctor",include:{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null}},model:ot,required:!1,where:{deleted_at:null}}})),{scheduled_date_time:o,availableDoctor:s}=t;if(!s||!Object.keys(s).length)throw Error(`No doctor assignment found for appointment id: ${e}`);const{availableSpeciality:l,facility_location_id:d}=s;if(!l||!Object.keys(l).length)throw Error(`Existing doctor do not have speciality assignemnt for appointment id: ${e}`);const{speciality_id:_}=l,r=new Date(o),c=this.shallowCopy(yield this.__availableDoctorRepo.findOne({deleted_at:null,doctor_id:a,facility_location_id:d},{include:[{as:"availableSpeciality",model:it,where:{deleted_at:null,speciality_id:_}},{as:"dateList",model:qe,where:{deleted_at:null,end_date:{[jn.gt]:r},start_date:{[jn.lte]:r}}}]}));if(!c||!Object.keys(c).length)throw Error(`No doctor assignment found for doctor id: ${a} on ${String(r)} against facility location id: ${d} & speciality id: ${_} to update appointment id: ${e}`);const{dateList:p}=c,u=p[0].id;yield this.__repo.update(e,{available_doctor_id:c.id,available_speciality_id:c.available_speciality_id,date_list_id:u,updated_by:n},i),yield this.__visitSessionRepo.updateByColumnMatched({appointment_id:e,deleted_at:null},{doctor_id:a,updated_by:n},i)}return`${t.length} appointments updated with Doctor id: ${a}`})),this.updateAppointmentEvaluation=(e,t,i)=>kn(this,void 0,void 0,(function*(){var i;const{appointment_id:a,case_id:n,visit_status:o,appointment_status:s,trigger_socket:l=!1,no_exit:d,delete_visit_for_finalize_appointment:_}=e,r=this.shallowCopy(yield this.__repo.findOne({id:a,deleted_at:null,cancelled:0,pushed_to_front_desk:0}));if(!r)throw un("APPOINTMENT_NOT_FOUND");if(null===r.evaluation_date_time)throw un("EVALUATION_ALREADY_UPDATE");const{available_speciality_id:c,available_doctor_id:p,is_speciality_base:u,scheduled_date_time:m,time_slots:y}=r,h=new Date(m);let f;if(h.setMinutes(h.getMinutes()+y),u){const e=this.shallowCopy(yield this.__availableSpecialityRepo.findOne({deleted_at:null,id:c},{include:{as:"dateList",model:qe,required:!0,where:{[jn.or]:[{deleted_at:null,end_date:{[jn.gte]:h},start_date:{[jn.lte]:m}}]}}})),{dateList:t}=e;f=null===(i=t[0])||void 0===i?void 0:i.id}this.shallowCopy(yield this.__repo.update(r.id,Object.assign({available_doctor_id:r.is_speciality_base?null:r.available_doctor_id,evaluation_date_time:null},u&&{date_list_id:f})));const v={headers:{Authorization:t}};return this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:[a]},v),this.updateAppointmentAndVisitStatus({appointment_status:s,case_id:n,id:r.id,visit_status:o,trigger_socket:l,no_exit:d},t)})),this.updateAppointmentForIos=(e,t,i)=>kn(this,void 0,void 0,(function*(){var a,n,o,s,l,d;const{id:_,doctor_id:r,confirm:c,user_id:p=Number(process.env.USERID)}=e,u=this.shallowCopy(yield this.__repo.findById(_,{include:[{as:"availableDoctor",include:[{as:"dateList",model:qe},{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:{as:"dateList",model:qe},model:it,required:!1,where:{deleted_at:null}},{as:"dateList",model:qe,required:!1,where:{deleted_at:null}}]},i));if(!u||!Object.keys(u).length)throw un("NO_APPOINTMENT_OF_GIVEN_ID");const{availableDoctor:m,availableSpeciality:y,dateList:h,available_doctor_id:f,available_speciality_id:v,scheduled_date_time:g,time_slots:b,case_id:S}=u||{},I=(null===(a=null==m?void 0:m.availableSpeciality)||void 0===a?void 0:a.speciality_id)?null===(n=null==m?void 0:m.availableSpeciality)||void 0===n?void 0:n.speciality_id:null!==(o=null==y?void 0:y.speciality_id)&&void 0!==o?o:null;let D;if(f){const{dateList:e}=m;D=null==e?void 0:e.find((e=>e.id===h.id))}if(v&&!D){const{dateList:e}=y;D=null==e?void 0:e.find((e=>e.id===h.id))}const w=this.getTimeSlotOfAssignment(D),O=u.time_slots/w,T=new Date(g);T.setMinutes(T.getMinutes()+b);const A=I?[{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:it,required:!0,where:{speciality_id:I,deleted_at:null}}]:[],N=this.shallowCopy(yield this.__availableDoctorRepo.findOne({deleted_at:null,doctor_id:r,facility_location_id:f?m.facility_location_id:y.facility_location_id},{include:[{as:"dateList",model:qe,required:!0,where:{end_date:{[jn.gte]:T},start_date:{[jn.lte]:g}}},{as:"doctor",attributes:{exclude:["password"]},include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}},...A]},i));if(!N||!Object.keys(N).length)throw un("NO_ASSIGNMENT_FOUND_FOR_GIVEN_APPOINTMENT_TIME");if(m&&m.doctor_id!==r&&!c)throw un("ASSIGNMENT_TO_YOURSELF");const{id:C,dateList:R,start_date:E,end_date:L,doctor_id:k,availableSpeciality:P,doctor:{userFacilities:j,userBasicInfo:{first_name:B,last_name:U,middle_name:q}}}=N,F=this.getTimeSlotOfAssignment(R[0]),M=new Date(g);M.setMinutes(M.getMinutes()+F*O);const $=this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({approval_status:!0,doctor_id:r,end_date:{[jn.gt]:M},start_date:{[jn.lte]:g}},null,i));if($&&$.length)throw un("NO_PROVIDER_AVAILABLE");const V=this.shallowCopy(yield this.__repo.findAll({available_doctor_id:k,deleted_at:null,id:{[jn.ne]:_},scheduled_date_time:{[jn.between]:[E,L]}},null,i)),x=this.getFreeSlotsForAssignment(R[0],V,null===(s=null==P?void 0:P.speciality)||void 0===s?void 0:s.over_booking,F,1);let K;const z=null==x?void 0:x.find(((e,t)=>{const i=new Date(e.startDateTime),a=new Date(e.startDateTime);if(a.setMinutes(a.getMinutes()+F),i.getTime()<=new Date(u.scheduled_date_time).getTime()&&new Date(u.scheduled_date_time).getTime()<a.getTime()&&e.count>0)return K=new Date(e.startDateTime),e}));if(!z||!Object.keys(z).length)throw un("NO_SLOTS_REMAINING");const G=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({slug:"re_scheduled"},null,i));yield this.__repo.update(_,{available_doctor_id:C,scheduled_date_time:new Date(K),status_id:G.id,time_slots:F*w,updated_at:new Date,updated_by:p},i);const H={headers:{Authorization:t}},Y=yield this.getAppointmentById({appointment_id:[_],user_id:null},t,i);this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:Y,action_point:"updated"},H),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:[_]},H),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments`,{},H);const W=this.shallowCopy(yield this.__casePatientSessionStatusesRepo.findOne({slug:"re_scheduled"},null,i));yield this.__http.put(`${process.env.KIOSK_URL}/case-patient-session`,{case_id:S,appointment_id:_,status_id:W.id},H);const Q=this.shallowCopy(yield this.__repo.findById(_,null,i));return[Object.assign(Object.assign({},Q),{doctor_id:k,doctor_name:q?`${B} ${q} ${U}`:`${B} ${U}`,speciality_id:P?null==P?void 0:P.speciality_id:null,speciality_name:P?null===(l=null==P?void 0:P.speciality)||void 0===l?void 0:l.name:null,speciality_qualifier:P?null===(d=null==P?void 0:P.speciality)||void 0===d?void 0:d.qualifier:null})]})),this.updateAppointmentStatus=(e,t)=>kn(this,void 0,void 0,(function*(){var i,a,n,o,s;const{request_from_ios:l,facility_location_id:d,case_type_id:_,appointment_type_id:r,current_date_time:c,id:p,doctor_id:u,user_id:m=Number(process.env.USERID),speciality_id:y,confirm:h,time_zone:f,is_speciality_base:v}=e,b={headers:{Authorization:t}},S=[],I=this.shallowCopy(yield this.__repo.findOne({deleted_at:null,id:p},{include:{as:"patientSessions",include:{as:"visitStatus",model:Pt,required:!1,where:{deleted_at:null}},model:B,required:!1,where:{deleted_at:null}}}));if(y&&S.push({as:"availableSpeciality",model:it,required:!0,where:{speciality_id:y,deleted_at:null}}),l){const e={filter:1,facility_location_id:[d],page:1,per_page:1e3,pagination:1,specialty_id:[y],visit_type_id:[r],case_type_id:[_],user_id:u},i={headers:{Authorization:t},params:Object.assign({},e)},a=yield this.__http.get(`${process.env.FRONT_DESK_URL}v2/get_all_templates`,i);if(0===a.result.data.length)throw new Error("No template exists for this provider");if(!a.result.data.find((e=>"static_ios"===e.template_type&&e.is_default)))throw new Error("Please Use Web app to access this template on IOS Apps when using Paper template/Dynamic templates")}const D={include:[{as:"availableDoctor",include:{as:"dateList",model:qe},model:ot,required:!1,where:{deleted_at:null}},{as:"dateList",model:qe,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:{as:"dateList",model:qe},model:it,required:!1,where:{deleted_at:null}},{as:"appointmentStatus",model:g,required:!1},{as:"appointmentType",model:J,required:!1},{model:ti,as:"case",required:!1,where:{deleted_at:null}}]},w=240==this.getTimezoneOffset(new Date,"America/New_York")?1:0,O=new Date;O.setHours(O.getHours()+w);const T=c?new Date(c):new Date(O),A=new Date(new Date(T).setUTCHours(0,0,0,0)),N=this.shallowCopy(yield this.__repo.findOne({id:p},D)),{is_transferring_case:C}=N.case,{avoid_checkedin:R}=null==N?void 0:N.appointmentType;if(new Date(N.scheduled_date_time).getTime()<new Date((new Date).setUTCHours(0,0,0,0)).getTime())throw un("PAST_APPOINTMENTS");const E=new Date((0,Cn.format)(new Date(A),"MM-dd-yyyy"));if(new Date((0,Cn.format)(new Date(N.scheduled_date_time),"MM-dd-yyyy")).getTime()>E.getTime())throw un("FUTURE_APPOINTMENTS");if(!N)throw un("INVALID_APPOINTMENT_TYPE_ID");if("no_show"===(null===(i=N.appointmentStatus)||void 0===i?void 0:i.slug))throw un("VISIT_STATUS_IS_NO_SHOW");const L=this.shallowCopy(yield this.__modelHasRolesRepo.findOne({model_id:m},{include:{model:he,as:"role",required:!1}}));if(!L||!Object.keys(L).length)throw un("LOGGED_IN_NOT_FOUND");const{role:{slug:k,id:P}}=L;if(v)try{yield this.assignToYourSelf({confirm:h,startDate:T,doctor_id:u,id:p,user_id:m,slug:k,specialityId:y,superAdminId:P},t)}catch(e){throw yield this.updateAppointmentToPreviosStart(I),e}const j=this.shallowCopy(yield this.__visitSessionRepo.findOne({case_id:null==N?void 0:N.case_id,appointment_id:null==N?void 0:N.id,deleted_at:null},{include:{as:"visitState",model:$e}})),{visitState:U}=j||{};if("un_finalized"===(null==U?void 0:U.slug)||"finalized"===(null==U?void 0:U.slug))return{};const q=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({slug:"arrived",deleted_at:null})),F=this.shallowCopy(yield this.__casePatientSessionStatusesRepo.findAll({slug:{[jn.or]:["checked_in","in_session"]},deleted_at:null}));try{const{status:e,result:{data:t}}=this.shallowCopy(yield this.__http.get(`${process.env.KIOSK_URL}case-patient-session`,Object.assign(Object.assign({},b),{params:{appointment_id:p,case_id:N.case_id,deleted_at:null}})));if(200!==e)throw un("ERROR_WHILE_GETTING_STATUS_FROM_KIOSK");if((null==t?void 0:t.status_id)!==(null===(a=F.find((e=>"checked_in"===e.slug)))||void 0===a?void 0:a.id)&&!R)throw un("VISIT_STATUS_IS_NOT_CHECKED_IN")}catch(e){throw yield this.updateAppointmentToPreviosStart(I),e}if(!(null===(n=N.case)||void 0===n?void 0:n.is_active))try{yield this.__http.post(`${process.env.KIOSK_URL}patient/activate`,{case_id:N.case_id,patient_id:N.patient_id,user_id:m},b),yield this.activateAppointment({case_id:N.case_id,patient_id:N.patient_id,user_id:m},t)}catch(e){throw yield this.updateAppointmentToPreviosStart(I),e}if("super_admin"===k)return this.updateAppointmentStatusForSuperAdmin({arrivedStatus:q,currentDateTime:c,foundAppointment:N,id:p,userId:m,visitStatuses:F},t,I);const M=this.shallowCopy(yield this.__specialityRepo.findOne({deleted_at:null,id:y}));if(!M||!Object.keys(M).length)throw un("INVALID_SPECIALITY_IDS");const $=new Date(T),V=new Date(T);$.setHours($.getHours()-24),V.setHours(V.getHours()+24);const x=this.shallowCopy(yield this.__availableDoctorRepo.findOne({deleted_at:null,doctor_id:u,facility_location_id:(null==N?void 0:N.available_doctor_id)?null===(o=null==N?void 0:N.availableDoctor)||void 0===o?void 0:o.facility_location_id:null===(s=null==N?void 0:N.availableSpeciality)||void 0===s?void 0:s.facility_location_id},{include:[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[jn.gt]:T},start_date:{[jn.lte]:T}}},...S]}));if(!x||!Object.keys(x).length)throw un("NO_ASSIGNMENT_FOUND");const K=x.dateList[0],z={available_speciality_id:x.supervisor_id,doctor_id:x.doctor_id,end_date:K.end_date,facility_location_id:x.facility_location_id,id:x.id,no_of_slots:K.no_of_slots,start_date:K.start_date,supervisor_id:x.supervisor_id},G=this.getTimeSlotOfAssignment(z);let H;if(N.dateList.available_doctor_id){const{dateList:e}=N.availableDoctor;H=null==e?void 0:e.find((e=>e.id===N.date_list_id))}else{const{dateList:e}=N.availableSpeciality;H=null==e?void 0:e.find((e=>e.id===N.date_list_id))}this.getTimeSlotOfAssignment(H);const Y=(N.time_slots,this.shallowCopy(yield this.__repo.findAll({available_doctor_id:z.id,deleted_at:null}))),W=this.getFreeSlotsForAssignment(z,Y,M.over_booking+1,G),Q=null==W?void 0:W.find((e=>{const t=new Date(e.startDateTime),i=new Date(e.startDateTime);if(i.setMinutes(i.getMinutes()+G),t.getTime()<=T.getTime()&&T.getTime()<i.getTime()&&e.count>0)return e}));if(!Q||!Object.keys(Q).length)throw un("NO_SLOTS_REMAINING");const{id:X}=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({deleted_at:null,slug:"arrived"})),Z=this.shallowCopy(yield this.__repo.findOne({cancelled:0,deleted_at:null,status_id:X,id:{[jn.ne]:N.id},patient_id:N.patient_id,case_id:N.case_id,pushed_to_front_desk:0,scheduled_date_time:{[jn.between]:[A,V]}},{include:[{as:"patientSessions",include:{as:"visitStatus",model:Pt,where:{deleted_at:null,slug:"in_session"}},model:B,where:{deleted_at:null}},{as:"availableDoctor",include:[{as:"doctor",attributes:{exclude:["password"]},include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!0,where:{deleted_at:null}},model:it,required:!0,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null}}]}));if(Z&&Object.keys(Z).length){const{availableDoctor:{doctor:{userBasicInfo:{first_name:e,middle_name:t,last_name:i}},availableSpeciality:{speciality:a}}}=Z;throw{message:`Patient is already in session with ${e?" "+e:""}${t?" "+t:""}${i?" "+i:""} - ${a.name}.`,status:406}}const{id:ee}=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({deleted_at:null,slug:"no_show"})),te=this.shallowCopy(yield this.__appoitmentTypeRepo.findAll()),ie=this.shallowCopy(yield this.__repo.findOne({cancelled:0,case_id:N.case_id,deleted_at:null,evaluation_date_time:null,id:{[jn.ne]:N.id},patient_id:N.patient_id,pushed_to_front_desk:0,status_id:{[jn.ne]:ee},type_id:te.find((e=>"initial_evaluation"===e.slug)).id},{include:[{as:"availableDoctor",include:{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null,speciality_id:y}},model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null,speciality_id:y}}]}));if(ie&&Object.keys(ie).length&&new Date(ie.scheduled_date_time).getTime()===new Date(T).getTime()&&!C)throw un("APPOINTMENT_ALREADY_IN_PROCESS");const ae=this.shallowCopy(yield this.__caseTypesRepo.findOne({deleted_at:null,slug:"worker_compensation"}));let ne=!0;if(N.case_type_id===ae.id){const e=this.shallowCopy(yield this.__medicalIdentifierRepo.findOne({deleted_at:null,user_id:u,wcb_auth:!0}));ne=!(!e||!Object.keys(e).length)}if(!ne)throw un("NO_WC_AUTHORIZE");const oe={appointment_id:N.id,case_id:N.case_id,trigger_socket:!0,status_id:null==F?void 0:F.find((e=>"in_session"===e.slug)).id};try{const{status:e}=this.shallowCopy(yield this.__http.put(`${process.env.KIOSK_URL}case-patient-session`,oe,b));if(200!==e)throw un("ERROR_WHILE_UPDATING_STATUS")}catch(e){throw yield this.updateAppointmentToPreviosStart(I),e}try{yield this.__repo.update(p,{available_doctor_id:x.id,evaluation_date_time:new Date(T),status_id:q.id,updated_by:m});const e=yield this.getAppointmentById({appointment_id:[p],user_id:null},t);return this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:e,action_point:"updated",is_speciality_based:v},b),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:[p]},b),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments`,{},b),[{appointment:yield this.__repo.findOne({id:N.id},{include:{as:"availableDoctor",model:ot,required:!1,where:{deleted_at:null}}})}]}catch(e){throw yield this.updateAppointmentToPreviosStart(I,!0),e}})),this.updateStatus=(e,t,i)=>kn(this,void 0,void 0,(function*(){const{appointment_id:a,appointment_status_id:n,confirmation_status:o,visit_status_id:s,user_id:l}=e;if(!a)throw new Error("Invalid Request Object!");const d=this.shallowCopy(yield this.__repo.findById(a));if(!d||!Object.keys(d).length)throw new Error("Invalid Appointment Selected!");const _={headers:{Authorization:t}};n&&(yield this.__repo.update(a,Object.assign({status_id:n},o&&{confirmation_status:1}),i));const{case_id:r,scheduled_date_time:c}=d,p=(0,Cn.format)(new Date(c),"MM-dd-yyyy"),u=(0,Cn.format)(new Date,"MM-dd-yyyy");s&&(yield this.__http.put(`${process.env.KIOSK_URL}case-patient-session/update-on-appintment`,{case_id:r,status_id:s,appointment_id:a,user_id:l,update_check_in_time:u===p},_)),yield i.commit();const m=yield this.getAppointmentById({appointment_id:[a],user_id:l},t);return this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-soft-patient-listing`,{},_),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:m,action_point:"updated"},_),d})),this.updateStatusMultipleAppointments=(e,t)=>kn(this,void 0,void 0,(function*(){const{appointment_ids:i,status_id:a,trigger_socket:n=!1}=e,o=this.shallowCopy(yield this.__repo.findAll({id:{[jn.in]:i}}));if(!o||!o.length||o.length!==i.length)throw un("INVALID_APPOINTMENT_IDS");const s=yield this.__repo.updateByIds(i,{status_id:a}),l={headers:{Authorization:t}},d=yield this.getAppointmentById({appointment_id:i,user_id:null},t);return n||this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:d,action_point:"updated"},l),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:i},l),s})),this.addAppointmentsCptCodes=(e,t,i)=>kn(this,void 0,void 0,(function*(){const a=t.map((t=>({billing_code_id:t,appointment_id:e})));this.shallowCopy(yield this.__schAppointmentCptCodesRepo.bulkCreate(a,i))})),this.addDaysForReccurence=(e,t)=>new Date(e.setTime(e.getTime()+24*t*60*60*1e3)),this.addTransportations=(e,t,i)=>kn(this,void 0,void 0,(function*(){t.map((e=>(delete e.id,e))),t=t.map((t=>Object.assign(Object.assign({},t),{appointment_id:e}))),this.shallowCopy(yield this.__transportationsRepo.bulkCreate(t,i))})),this.appointmentWithAvailableDoctorId=e=>kn(this,void 0,void 0,(function*(){const{availableDoctorId:t}=e,i=this.shallowCopy(yield this.__availableDoctorRepo.findById(t[0],{attributues:["id","billable","available_doctor_id","case_id","patient_id","scheduled_date_time","time_slots"],include:[{as:"appointments",include:[{as:"patient",model:Et,required:!1,where:{deleted_at:null}},{as:"appointmentStatus",attributes:["name","slug"],model:g,required:!1,where:{deleted_at:null}}],model:He,required:!1,where:{cancelled:!1,deleted_at:null,pushed_to_front_desk:!1}},{as:"doctor",attributes:{exclude:["password"]},include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}}]})),{appointments:a}=i||{};return null==a?void 0:a.map((e=>({appointment_billable:e.billable,appointment_id:e.id,appointment_status:e.appointmentStatus.name,appointment_status_slug:e.appointmentStatus.slug,available_doctor_id:t,case_id:e.case_id,doctor_id:i.doctor_id,doctor_info:i.doctor.userBasicInfo,patient_id:e.patient_id,patient_info:e.patient,scheduled_date_time:e.scheduled_date_time,time_slots:e.time_slots})))})),this.appointmentWithAvailableSpecialityId=e=>kn(this,void 0,void 0,(function*(){const{availableSpecialityId:t,availableDoctorId:i}=e,a=this.shallowCopy(yield this.__availableSpecialityRepo.findById(t,{include:{as:"appointments",include:[{as:"patient",model:Et,required:!1,where:{deleted_at:null}},{as:"appointmentStatus",model:g,required:!1,where:{deleted_at:null}},{as:"availableDoctor",include:{as:"doctor",attributes:{exclude:["password"]},include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}},model:ot,required:!1,where:{deleted_at:null}}],model:He,required:!1,where:{cancelled:!1,deleted_at:null,pushed_to_front_desk:!1}}})),n=this.shallowCopy(yield this.__repo.findAll({available_doctor_id:{[jn.in]:i},available_speciality_id:{[jn.ne]:t},cancelled:!1,deleted_at:null,pushed_to_front_desk:!1},{attributues:["id","billable","available_doctor_id","case_id","patient_id","scheduled_date_time","time_slots"],include:[{as:"patient",model:Et,required:!1,where:{deleted_at:null}},{as:"appointmentStatus",attributes:["name","slug"],model:g,required:!1,where:{deleted_at:null}},{as:"availableDoctor",include:{as:"doctor",attributes:{exclude:["password"]},include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}},model:ot,required:!1,where:{deleted_at:null}}]})),{appointments:o}=a||{},s=[...o,...n];return null==s?void 0:s.map((e=>({appointment_billable:e.billable,appointment_id:e.id,appointment_status:e.appointmentStatus.name,appointment_status_slug:e.appointmentStatus.slug,available_doctor_id:e.available_doctor_id,available_speciality_id:t,case_id:e.case_id,doctor_id:e.available_doctor_id?e.availableDoctor.doctor_id:null,doctor_info:e.available_doctor_id?e.availableDoctor.doctor.userBasicInfo:null,patient_id:e.patient_id,patient_info:e.patient,scheduled_date_time:e.scheduled_date_time,speciality_id:a.speciality_id,time_slots:e.time_slots})))})),this.appointmentWithDateListId=e=>kn(this,void 0,void 0,(function*(){const{dateListId:t}=e,i=this.shallowCopy(yield this.__repo.findAll({cancelled:0,date_list_id:{[jn.in]:t},deleted_at:null,pushed_to_front_desk:0},{attributues:["id","billable","available_doctor_id","available_speciality_id","case_id","patient_id","scheduled_date_time","time_slots"],include:[{as:"patient",model:Et,required:!1,where:{deleted_at:null}},{as:"appointmentStatus",atttributes:["name","slug"],model:g,required:!1,where:{deleted_at:null}},{as:"availableDoctor",include:[{as:"doctor",attributes:{exclude:["password"]},include:{As:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null}}]}));return i&&i.length?[...this.formatedAppointmentAgainstDateList(i)]:[]})),this.assignToYourSelf=(e,t)=>kn(this,void 0,void 0,(function*(){var t;const{id:i,startDate:a,doctor_id:n,confirm:o,slug:s,superAdminId:l,specialityId:d,user_id:_=Number(process.env.USERID)}=e,r=this.shallowCopy(yield this.__repo.findOne({deleted_at:null,id:i},{include:[{as:"availableDoctor",include:{as:"dateList",model:qe},model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:{as:"dateList",model:qe},model:it,required:!1,where:{deleted_at:null}},{as:"dateList",model:qe,required:!1,where:{deleted_at:null}}]}));if(!r||!Object.keys(r).length)throw un("NO_APPOINTMENT_OF_GIVEN_ID");const{availableDoctor:c,availableSpeciality:p,dateList:u,available_doctor_id:m,available_speciality_id:y,scheduled_date_time:h,time_slots:f,case_id:v}=r||{};let g;if(m){const{dateList:e}=c;g=null==e?void 0:e.find((e=>e.id===u.id))}if(y&&!g){const{dateList:e}=p;g=null==e?void 0:e.find((e=>e.id===u.id))}const b=this.getTimeSlotOfAssignment(g),S=r.time_slots/b,I=new Date(h);I.setMinutes(I.getMinutes()+f);const D=d?[{as:"availableSpeciality",model:it,include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},required:!0,where:{speciality_id:d,deleted_at:null}}]:[],w=this.shallowCopy(yield this.__availableDoctorRepo.findOne({deleted_at:null,doctor_id:n,facility_location_id:m?c.facility_location_id:p.facility_location_id},{include:[{as:"dateList",attributes:{exclude:["created_at","updated_at"]},model:qe,required:!0,where:{deleted_at:null,end_date:{[jn.gte]:I},start_date:{[jn.lte]:a}}},{as:"doctor",attributes:{exclude:["password"]},include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}},...D]})),O=this.shallowCopy(yield this.__userRepo.findOne({deleted_at:null,id:_},{attributes:{exclude:["password"]},include:{as:"userBasicInfo",model:Ce,where:{deleted_at:null}}}));if(!w||!Object.keys(w).length){if(O){const{userBasicInfo:e}=O||{};throw Error(`${null==e?void 0:e.first_name} ${null==e?void 0:e.last_name} assignment not found at the given time.`)}throw un("NO_PROVIDER_ASSIGNMENT_FOUND_FOR_GIVEN_APPOINTMENT_TIME")}if(c&&c.doctor_id!==Number(n)&&!o)throw un("ASSIGNMENT_TO_YOURSELF");const{id:T,dateList:A,start_date:N,end_date:C,doctor_id:R,availableSpeciality:E}=w,L=this.getTimeSlotOfAssignment(A[0]),k=new Date(h);k.setMinutes(k.getMinutes()+L*S);const P=this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({approval_status:!0,doctor_id:n,end_date:{[jn.gt]:k},start_date:{[jn.lte]:h}}));if(P&&P.length)throw un("NO_PROVIDER_AVAILABLE");const j=this.shallowCopy(yield this.__repo.findAll({available_doctor_id:R,deleted_at:null,id:{[jn.ne]:i},scheduled_date_time:{[jn.between]:[N,C]}})),B=this.getFreeSlotsForAssignment(A[0],j,null===(t=null==E?void 0:E.speciality)||void 0===t?void 0:t.over_booking,L,1);let U;const q=null==B?void 0:B.find(((e,t)=>{const i=new Date(e.startDateTime),n=new Date(e.startDateTime);if(n.setMinutes(n.getMinutes()+L),i.getTime()<=new Date(a).getTime()&&new Date(a).getTime()<n.getTime()&&e.count>0)return U=new Date(e.startDateTime),e}));if(!q||!Object.keys(q).length)throw un("NO_SLOTS_REMAINING");return yield this.__repo.update(i,{date_list_id:A[0].id,available_doctor_id:T,scheduled_date_time:new Date(U),time_slots:b,updated_at:new Date,updated_by:_}),null})),this.availibilityWiseMapping=(e,t)=>null==t?void 0:t.map((t=>{const{availibilities:i}=t,a=Pn(t,["availibilities"]);return Object.assign({availibilities:i.map((t=>{const{date_list_id:i}=t||{};return Object.assign(Object.assign({},t),{appointments:this.filterNonNull([e.filter((e=>e.date_list_id===i))]).flat()||[]})}))},a)})),this.checkBackDated=(e,t)=>{const{billable:i,appointmentVisit:a}=e||{};return{back_dated_check:!(!(null==a?void 0:a.document_uploaded)||null===i)}},this.checkExitAppointment=(e,t,i,a,n,o)=>kn(this,void 0,void 0,(function*(){const{id:s,over_booking:l}=t,d=this.shallowCopy(yield this.__repo.findAll({case_id:e,deleted_at:null,cancelled:!1,pushed_to_front_desk:!1,status_id:{[jn.ne]:o},[jn.and]:[ra.where(ra.fn("datediff",this.convertDateToLocal(new Date(a),n),ra.col("scheduled_date_time")),{[jn.and]:[{[jn.gt]:-1},{[jn.lt]:1}]})]},{include:[{as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null,speciality_id:s}}]}));let _=!1,r=0;for(const e of d){const{scheduled_date_time:t,time_slots:n}=e,o=new Date(a),s=new Date(t);if(i==(null==e?void 0:e.type_id)&&o.getDay()===s.getDay()&&(_=!0),o.getTime()===s.getTime()){if(r==l)throw un("SAME_TIME_APPOINTMENT_ERROR");r++}}return _})),this.checkVisitTypes=(e,t,i=!1,a=null)=>kn(this,void 0,void 0,(function*(){const{caseId:n,patientId:o,appointmentTypeId:s,specialityId:l,noShowId:d,config:_}=e,r=this.shallowCopy(yield this.__http.get(`${process.env.FRONT_DESK_URL}single_speciality`,Object.assign(Object.assign({},_),{params:{id:l}}))),{result:{data:{visit_types:c}}}=r;c.sort(((e,t)=>e.position-t.position));let p=null;for(let e=0;e<c.length&&null===p;e++)c[e].id===s&&(p=e);if(null===p)throw un("SELECTED_APPOINTMENT_SPECIALITY_ERROR");for(const e of c){const{id:_,is_required:r,is_multiple:c,is_multiple_same_day:p,name:u}=e;if(_===s){if(i){if(p)break;throw un("PATIENT_ALREADY_HAVE_APPOINTMENT_SAME_DAY")}if(!c){const e=this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:n,deleted_at:null,patient_id:o,type_id:_,status_id:{[jn.ne]:d},pushed_to_front_desk:!1},{include:[{as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null,speciality_id:l}},{as:"appointmentVisit",model:Ke,required:!1,where:{deleted_at:null}}]}));if(e||(null==e?void 0:e.appointmentVisit)){if(!a)throw un("APPOINTMENT_WITH_SAME_CRITERIA_EXIST");this.shallowCopy(yield this.__schAppointmentCptCodesRepo.findAll({appointment_id:a.id,deleted_at:null}))}}break}if(_!==s&&!t&&r){const e=this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:n,deleted_at:null,patient_id:o,status_id:{[jn.ne]:d},type_id:_,pushed_to_front_desk:!1},{include:[{as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null,speciality_id:l}},{as:"appointmentVisit",model:Ke,required:!1,where:{deleted_at:null}}]}));if(!e)throw new Error(`${u} is required against this appointment first.`);if(!(null==e?void 0:e.appointmentVisit))throw new Error(`Visit session required for ${u} apppointment first.`)}}})),this.confirmDescriptionsOfPatient=e=>this.filterNonNull(e.map((e=>0===e.confirmation_status||!1===e.confirmation_status?Object.assign(Object.assign({},e),{reading_provider:null==e?void 0:e.readingProvider,confirm_description:"Not Confirm"}):1===e.confirmation_status||!0===e.confirmation_status?Object.assign(Object.assign({},e),{reading_provider:null==e?void 0:e.readingProvider,confirm_description:"Confirm"}):e))),this.confirmStatusFromKiosk=(e,t)=>{if(!t.case_patients||!t.case_patients.length)return e;const{case_patients:i}=t;for(const t of i)return t.patient_sessions.length?e.map((e=>{var i,a,n,o,s,l,d,_,r,c,p,u,m,y;const{availableDoctor:h}=e,f=Object.assign({provider_title:h?null===(a=null===(i=null==h?void 0:h.doctor)||void 0===i?void 0:i.medicalIdentifiers)||void 0===a?void 0:a.billingTitle.name:null},e);return t.patient_id===e.patient_id&&t.id===e.case_id&&2!==e.status_id&&(f.patient_status="Checked In",(null===(n=t.patient_sessions)||void 0===n?void 0:n.find((e=>"Checked In"===e.status)))&&(f.checked_in_time=null===(s=null===(o=t.patient_sessions)||void 0===o?void 0:o.find((e=>"Checked In"===e.status)))||void 0===s?void 0:s.updated_at),"In Session"===t.patient_sessions[0].status&&t.patient_sessions[0].appointment_id===e.id&&(f.patient_status=t.patient_sessions[0].status,f.in_session_time=t.patient_sessions[0].updated_at,(null===(l=t.patient_sessions)||void 0===l?void 0:l.find((e=>"Checked In"===e.status)))&&(f.checked_in_time=null===(_=null===(d=t.patient_sessions)||void 0===d?void 0:d.find((e=>"Checked In"===e.status)))||void 0===_?void 0:_.updated_at)),"Checked Out"===t.patient_sessions[0].status&&t.patient_sessions[0].appointment_id===e.id&&(f.patient_status=t.patient_sessions[0].status,f.checked_out_time=t.patient_sessions[0].updated_at,(null===(r=t.patient_sessions)||void 0===r?void 0:r.find((e=>"In Session"===e.status)))&&(f.checked_in_time=null===(p=null===(c=t.patient_sessions)||void 0===c?void 0:c.find((e=>"In Session"===e.status)))||void 0===p?void 0:p.updated_at),(null===(u=t.patient_sessions)||void 0===u?void 0:u.find((e=>"Checked In"===e.status)))&&(f.checked_in_time=null===(y=null===(m=t.patient_sessions)||void 0===m?void 0:m.find((e=>"Checked In"===e.status)))||void 0===y?void 0:y.updated_at)),"No Show"===t.patient_sessions[0].status&&t.patient_sessions[0].appointment_id===e.id&&(f.patient_status=t.patient_sessions[0].status)),f})).flat():e},this.convertDateToLocal=(e,t)=>new Date(e.setMinutes(e.getMinutes()-t)),this.createAppointment=(e,t)=>kn(this,void 0,void 0,(function*(){const{formatDates:i,startDateTime:a,existingCasePatientSession:n,appointmentStatus:o,isAlradyCheckedIn:s,desiredTimeSlot:l,doctorId:d,specialityId:_,caseId:r,patientId:c,time_zone:p,confirmationStatus:u,appointmentType:m,speciality:y,appointmentTypeId:h,facilityLocationId:f,caseType:v,comments:b,priorityId:S,isSpecialityBase:I,isSoftRegistered:D,caseTypeId:w,slotsForThisAppointment:O,userId:T,physicianId:A,transportation:N,technicianId:C}=e,R={headers:{Authorization:t}},E=[];try{const e=yield Promise.all(i.map((e=>kn(this,void 0,void 0,(function*(){var t,i,L,k,P,j,B,U;const q=(0,Cn.format)(new Date(a),"MM-dd-yyyy")===(0,Cn.format)(new Date,"MM-dd-yyyy"),F=(n&&Object.keys(n).length||s)&&q?o.find((e=>"arrived"===e.slug)).id:o.find((e=>"scheduled"===e.slug)).id,M=new Date(e);null==M||M.setMinutes((null==M?void 0:M.getMinutes())+l);const $=new Date(e),V=new Date(e);let x,K;if(!d||d&&_){const t=this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:r,deleted_at:null,patient_id:c,pushed_to_front_desk:!1,[jn.and]:[ra.where(ra.fn("datediff",this.convertDateToLocal(new Date(e),p),ra.col("scheduled_date_time")),{[jn.and]:[{[jn.gt]:-1},{[jn.lt]:1}]})]},{include:{as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null,speciality_id:_}}})),i=this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:r,deleted_at:null,[jn.and]:[ra.where(ra.fn("datediff",this.convertDateToLocal(new Date(e),p),ra.col("scheduled_date_time")),{[jn.and]:[{[jn.gt]:-1},{[jn.lt]:1}]})],patient_id:c,pushed_to_front_desk:!1},{include:{as:"availableDoctor",include:{as:"doctor",attributes:{exclude:["password"]},include:{as:"userFacilities",model:Ie,required:!0,where:{deleted_at:null,speciality_id:_}},model:le,required:!0,where:{deleted_at:null}},model:ot,required:!0,where:{deleted_at:null}}}));if(t||i)throw un("PATIENT_ALREADY_HAVE_APPOINTMENT_SAME_DAY")}if(!u){$.setHours($.getHours()-24),V.setHours(V.getHours()+24);const t={cancelled:!1,deleted_at:null,patient_id:c,pushed_to_front_desk:!1};x=this.shallowCopy(yield this.__repo.findAll(Object.assign(Object.assign({},t),{scheduled_date_time:{[jn.between]:[$,e]}}))),K=this.shallowCopy(yield this.__repo.findAll(Object.assign(Object.assign({},t),{scheduled_date_time:{[jn.and]:[{[jn.gt]:e},{[jn.lt]:V}]}}),{limit:1,order:[["scheduled_date_time","ASC"]]}));const i=null==x?void 0:x.filter((t=>{const i=new Date(t.scheduled_date_time);if(null==i||i.setMinutes((null==i?void 0:i.getMinutes())+t.time_slots),new Date(e).getTime()<i.getTime())return t}));if(null==i?void 0:i.length)throw un("PATIENT_ALREADY_HAVE_ASSIGNMENT")}const z={include:[{as:"availableDoctor",include:{as:"doctor",attributes:{exclude:["password"]},include:{as:"userFacilities",model:Ie,required:!1,where:{deleted_at:null,speciality_id:_}},model:le,required:!1,where:{deleted_at:null}},model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null,speciality_id:_}}]},G={cancelled:!1,case_id:r,deleted_at:null,patient_id:c,pushed_to_front_desk:!1,type_id:m.id};let H=!1,Y=!1;const W=this.shallowCopy(yield this.__repo.findAll(Object.assign({},G),Object.assign({},z))),{id:Q}=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({slug:"no_show"})),J=W.find((e=>{var t,i;return(e.availableSpeciality||(null===(i=null===(t=e.availableDoctor)||void 0===t?void 0:t.doctor)||void 0===i?void 0:i.userFacilities.length))&&e.status_id!==Q}));if(J&&Object.keys(J).length&&(J.availableSpeciality||(null===(i=null===(t=J.availableDoctor)||void 0===t?void 0:t.doctor)||void 0===i?void 0:i.userFacilities))){const{available_doctor_id:t,availableDoctor:i,scheduled_date_time:a,availableSpeciality:n}=Object.assign({},J),o=null===(k=null===(L=null==i?void 0:i.doctor)||void 0===L?void 0:L.userFacilities)||void 0===k?void 0:k.map((e=>null==e?void 0:e.speciality_id)),s=null==o?void 0:o.includes(_);H=!(!(t&&s||(null==n?void 0:n.speciality_id)===_)||J.status_id===Q||null===J.evaluation_date_time),H=J.status_id!==Q,Y=!!(H&&new Date(a).getTime()<new Date(e).getTime())}if(h===m.id&&H)throw un("PATIENT_ALREADY_HAVE_INITIAL_EVALUATION_ASSIGNMENT");if(h!==m.id&&!H)throw un("NO_INITIAL_EVALUATION_ASSIGNMENT");if(h===m.id&&!H||h!==m.id&&H){if(!H&&(H||Y))throw un("APPOINTMENT_CAN_NOT_DONE_BEFORE_INITIAL_EVALUATION");if(h!==m.id){const e=this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:r,deleted_at:null,patient_id:c,pushed_to_front_desk:!1,scheduled_date_time:{[jn.gt]:new Date(a)},type_id:m.id},{include:{as:"availableDoctor",include:{as:"doctor",attributes:{exclude:["password"]},include:{as:"userFacilities",model:Ie,required:!0,where:{deleted_at:null,speciality_id:_}},model:le,required:!0,where:{deleted_at:null}},model:ot,required:!0,where:{deleted_at:null}}}));if(this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:r,deleted_at:null,patient_id:c,pushed_to_front_desk:!1,scheduled_date_time:{[jn.gt]:new Date(a)},type_id:m.id},{include:{as:"availableSpeciality",model:it,where:{deleted_at:null,speciality_id:_}}}))||e)throw un("APPOINTMENT_NOT_CREATED_BEFORE_INTIAL")}else{const e=this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:r,deleted_at:null,patient_id:c,pushed_to_front_desk:!1,scheduled_date_time:{[jn.gt]:new Date(a)},type_id:{[jn.ne]:m.id}},{include:{as:"availableDoctor",include:{as:"doctor",attributes:{exclude:["password"]},include:{as:"userFacilities",model:Ie,required:!0,where:{deleted_at:null,speciality_id:_}},model:le,required:!0,where:{deleted_at:null}},model:ot,required:!0,where:{deleted_at:null}}}));if(this.shallowCopy(yield this.__repo.findOne({cancelled:!1,case_id:r,deleted_at:null,patient_id:c,pushed_to_front_desk:!1,scheduled_date_time:{[jn.gt]:new Date(a)},type_id:{[jn.ne]:m.id}},{include:{as:"availableSpeciality",model:it,where:{deleted_at:null,speciality_id:_}}}))||e)throw un("NO_CREATED_APPOINTMENT")}if(!d){if(!y.is_create_appointment)throw un("CANNOT_CREATE_SPECIALITY_APPOINTMENT");let t=null;const i={deleted_at:null,facility_location_id:f,speciality_id:_},a={include:{as:"users",include:{as:"medicalIdentifiers",model:Mt,required:!0,where:{deleted_at:null,wcb_auth:1}},model:le,required:!0,where:{deleted_at:null}}};if("worker_compensation"===v&&(t=this.shallowCopy(yield this.__userFacilityRepo.findAll(Object.assign({},i),Object.assign({},a)))),!("worker_compensation"!==v||t&&t.length))throw un("NO_PROVIDER_FOUND_FOR_WORKER_COMPENSATION");const o=this.shallowCopy(yield this.__availableSpecialityRepo.findAll({deleted_at:null,facility_location_id:f,speciality_id:_},{include:[{as:"appointments",model:He,required:!1,where:{deleted_at:null}},{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[jn.gte]:M},start_date:{[jn.lte]:e}}}]}));if(!o||!o.length)throw un("NO_SPECIALITY_ASSIGNMENT_FOUND");let l,d,p=new Date(e);const m=o.map((e=>{const{dateList:t}=e;return null==t?void 0:t.map((t=>({appointments:e.appointments,date_list_id:t.id,end_date:t.end_date,id:e.id,no_of_doctors:t.no_of_doctors,no_of_slots:t.no_of_slots,start_date:t.start_date})))})).flat();for(const t of m){d=this.getTimeSlotOfAssignment(t);const i=new Date(e);if(i.setMinutes(i.getMinutes()+d*O),u||!K.length||new Date(null===(P=K[0])||void 0===P?void 0:P.scheduled_date_time).getTime()>new Date(i).getTime()){const i=this.getFreeSlotsForAssignment(t,null==t?void 0:t.appointments,((null==y?void 0:y.over_booking)+1)*(null==t?void 0:t.no_of_doctors),d).find((t=>{const i=new Date(null==t?void 0:t.startDateTime),a=new Date(null==t?void 0:t.startDateTime);if(a.setMinutes(a.getMinutes()+d),i.getTime()<=new Date(e).getTime()&&new Date(e).getTime()<a.getTime()&&t.count>0)return t}));p=null==i?void 0:i.startDateTime,i&&Object.keys(i).length&&(l=t)}}if(!l)throw un("NO_SLOTS_REMAINING");const g=this.shallowCopy(yield this.__repo.create({available_speciality_id:null==l?void 0:l.id,case_id:r,case_type_id:w,chartNo:c,comments:b,confirmation_status:u,created_by:T,date_list_id:null==l?void 0:l.date_list_id,is_speciality_base:I,patient_id:c,priority_id:S||null,scheduled_date_time:e,status_id:F,time_slots:d*O,type_id:h,is_soft_registered:D,is_active:!D,physician_id:A,technician_id:C}));N&&N.length,E.push(g.id);try{const e=(n&&Object.keys(n).length||s)&&q?"checked_in":"scheduled",t=this.shallowCopy(yield this.__http.get(`${process.env.KIOSK_URL}case-patient-session-statuses`,Object.assign(Object.assign({},R),{params:{slug:e}}))),{result:{data:i}}=t||{};yield this.__http.post(`${process.env.KIOSK_URL}case-patient-session`,{case_id:r,status_id:null===(j=i[0])||void 0===j?void 0:j.id,appointment_id:g.id,trigger_socket:!0,request_from_sch:!0},R)}catch(e){throw yield this.deleteAppointmentById(g.id,T),e}return g}const t=this.shallowCopy(yield this.__medicalIdentifierRepo.findOne({deleted_at:null,user_id:d,wcb_auth:!0}));if(!("worker_compensation"!==v||t&&Object.keys(t).length))throw un("PROVIDER_DOES_NOT_HAVE_WC_AUTH");const i=this.shallowCopy(yield this.__availableDoctorRepo.findOne({deleted_at:null,doctor_id:d,facility_location_id:f},{include:{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[jn.gte]:M},start_date:{[jn.lte]:e}}}}));if(!i||!Object.keys(i).length)throw un("ASSIGNMENT_NOT_FOUND");const{dateList:o}=i||{},l={available_speciality_id:null==i?void 0:i.available_speciality_id,date_list_id:o[0].id,end_date:o[0].end_date,id:i.id,no_of_slots:i.no_of_slots,start_date:o[0].start_date},p=new Date(e),L=this.getTimeSlotOfAssignment(l);if(p.setMinutes(p.getMinutes()+L*O),!u&&(null==K?void 0:K.length)&&new Date(null===(B=K[0])||void 0===B?void 0:B.scheduled_date_time).getTime()<new Date(p).getTime())throw un("PATIENT_ALREADY_HAVE_ASSIGNMENT");const k=this.shallowCopy(yield this.__repo.findAll({available_doctor_id:l.id,cancelled:!1,deleted_at:null,pushed_to_front_desk:!1})),$=this.getFreeSlotsForAssignment(l,k,y.over_booking+1,L),V=null==$?void 0:$.find((t=>{const i=new Date(t.startDateTime),a=new Date(t.startDateTime);if(a.setMinutes(a.getMinutes()+L),i.getTime()<=e.getTime()&&e.getTime()<a.getTime()&&t.count>0)return t}));if(!V||!Object.keys(V).length)throw un("NO_SLOTS_REMAINING");const x=this.shallowCopy(yield this.__unAvailableDoctorRepo.findOne({[jn.or]:[{[jn.and]:[{approval_status:1,deleted_at:null,doctor_id:d,end_date:{[jn.gt]:p},start_date:{[jn.lte]:e}}]},{[jn.and]:[{approval_status:1,deleted_at:null,doctor_id:d,start_date:{[jn.gte]:e,[jn.lt]:p}}]}]}));if(x&&Object.keys(x).length)throw un("NO_PROVIDER_AVAILABLE");const z=this.shallowCopy(yield this.__repo.create({available_doctor_id:null==l?void 0:l.id,available_speciality_id:null==l?void 0:l.available_speciality_id,case_id:r,case_type_id:w,chartNo:c,comments:b,confirmation_status:u,created_by:T,date_list_id:null==l?void 0:l.date_list_id,is_speciality_base:I,patient_id:c,priority_id:S||null,scheduled_date_time:e,status_id:F,time_slots:L*O,type_id:h,is_soft_registered:D,is_active:!D,physician_id:A,technician_id:C}));N&&N.length,E.push(z.id);try{const e=(n&&Object.keys(n).length||s)&&q?"checked_in":"scheduled",t=this.shallowCopy(yield this.__http.get(`${process.env.KIOSK_URL}case-patient-session-statuses`,Object.assign(Object.assign({},R),{params:{slug:e}}))),{result:{data:i}}=t||{};yield this.__http.post(`${process.env.KIOSK_URL}case-patient-session`,{case_id:r,status_id:null===(U=i[0])||void 0===U?void 0:U.id,appointment_id:z.id,trigger_socket:!0,request_from_sch:!0},R)}catch(e){throw yield this.deleteAppointmentById(z.id,T),e}const G=this.shallowCopy(yield this.__repo.findOne({id:z.id},{include:[{as:"appointmentStatus",model:g,required:!1,where:{deleted_at:null}},{as:"patient",model:Et,required:!1,where:{deleted_at:null}},{as:"caseType",model:Wt,required:!1,where:{deleted_at:null}}]})),W=new Date(G.scheduled_date_time);W.setMinutes(W.getMinutes()+G.time_slots);const Q=this.shallowCopy(yield this.__kioskContactPersonTypesRepo.findOne({slug:"self"}));return this.shallowCopy(yield this.__kioskContactPersonRepo.findOne({case_id:G.case_id,contact_person_type_id:Q.id,deleted_at:null})),z}})))));if(E&&E.length){const e=yield this.getAppointmentById({appointment_id:E,user_id:T},t);this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:e,action_point:"created"},R),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:E},R)}return e}catch(e){if(E&&E.length){const e=yield this.getAppointmentById({appointment_id:E,user_id:T},t);this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:e,action_point:"created"},R),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:E},R)}throw e}})),this.isOverlaping=(e,t,i)=>{t=t.getTime(),i=i.getTime();let a=0,n=!1;for(let o=0;o<e.length;++o){const s=e[o];(s[0]<=t&&t<s[1]||s[0]<i&&i<=s[1])&&(a+=1,n=!0)}return{count:a,exist:n}},this.removeOverlapping=e=>{e.sort();const t=[];for(const i of e)t.length&&t[t.length-1][0]<=i[0]&&i[0]<=t[t.length-1][1]?t[t.length-1][1]=Math.max(t[t.length-1][1],i[1]):t.push(this.shallowCopy(i));return t},this.findFreeSlot=(e,t,i)=>{t=t.getTime();const a=(i=i.getTime())-t;let n=0;if(e.length>1){for(let t=1;t<e.length;++t){const i=e[t-1],o=e[t];i[1]-o[0]>=a&&(n=i[1])}0==n&&(n=e[e.length-1][1])}else n=e[0][1];return t>n?t:n},this.multipleAppointmentsAgainstCptCode=(e,t=!0)=>kn(this,void 0,void 0,(function*(){var i,a;const n=[],o=null===(i=e.speciality)||void 0===i?void 0:i.specialityVisitType;if(e.speciality)if(e.speciality.is_multiple_visit&&o&&o.length&&o[0].is_multiple_same_day){let i=e.speciality.over_booking;const a=this.shallowCopy(e.cptCodes?e.cptCodes:[]);e.cptCodes=[];const o=new Date(e.startDateTime);o.setMinutes(o.getMinutes()+e.desiredTimeSlot);const s=[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[jn.gte]:o},start_date:{[jn.lte]:e.startDateTime}}},...e.specialityId&&[{as:"availableSpeciality",model:it,required:!0,where:{speciality_id:e.specialityId,deleted_at:null}}]];let l;if(l=e.doctorId?this.shallowCopy(yield this.__availableDoctorRepo.findOne({deleted_at:null,doctor_id:e.doctorId,facility_location_id:e.facilityLocationId},{include:s})):this.shallowCopy(yield this.__availableSpecialityRepo.findOne({speciality_id:e.specialityId,facility_location_id:e.facilityLocationId,deleted_at:null},{include:[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[jn.gte]:o},start_date:{[jn.lte]:e.startDateTime}}}]})),(null==l?void 0:l.dateList)&&l.dateList.length){const o=[];e.doctorId&&o.push({as:"availableDoctor",model:ot,required:!0,where:{deleted_at:null,doctor_id:e.doctorId}});const s=this.shallowCopy(yield this.__repo.findAll(Object.assign(Object.assign(Object.assign({cancelled:!1,deleted_at:null,pushed_to_front_desk:!1},!e.doctorId&&{available_doctor_id:null}),e.doctorId&&{available_doctor_id:{[jn.not]:null}}),{[jn.and]:[ra.where(ra.fn("datediff",this.convertDateToLocal(new Date(e.startDateTime),e.time_zone),ra.col("scheduled_date_time")),{[jn.and]:[{[jn.gt]:-1},{[jn.lt]:1}]})]}),{include:[{as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null,speciality_id:e.specialityId}},...o]})).map((t=>{var i;if((null===(i=null==t?void 0:t.availableSpeciality)||void 0===i?void 0:i.speciality_id)==e.specialityId)return new Date(t.scheduled_date_time).toISOString()})),d=Bn.countBy(s);let _=0;const r=new Date(e.startDateTime);if(!(null==a?void 0:a.length)){if(r.toISOString()in d){if(i>=d[r.toISOString()])return n.push(e),n;throw un("NO_SLOTS_REMAINING")}{const t=new Date(r);return new Date(l.dateList[0].end_date).getTime()<t.setMinutes(t.getMinutes()+e.desiredTimeSlot)?[]:(n.push(e),n)}}for(;_<a.length;){if(i){if(r.toISOString()in d)if(i>=d[r.toISOString()]){if(e.cptCodes.push(a[_]),n.push(this.shallowCopy(e)),d[r.toISOString()]+=1,e.cptCodes=[],_+=1,_>=a.length)return n}else{if(0==_&&t)throw un("NO_SLOTS_REMAINING");r.setMinutes(r.getMinutes()+e.desiredTimeSlot),e.startDateTime=r,e.formatDates.length>1?e.formatDates=e.formatDates.map((e=>(e.setHours(r.getHours()),e.setMinutes(r.getMinutes()),e.setSeconds(r.getSeconds()),e))):e.formatDates=[r]}else if(e.cptCodes.push(a[_]),n.push(this.shallowCopy(e)),d[r.toISOString()]=1,e.cptCodes=[],_+=1,_>=a.length)return n}else{if(r.toISOString()in d){if(0==_&&t)throw un("NO_SLOTS_REMAINING")}else if(e.cptCodes.push(a[_]),n.push(this.shallowCopy(e)),d[r.toISOString()]=1,e.cptCodes=[],_+=1,_>=a.length)return n;r.setMinutes(r.getMinutes()+e.desiredTimeSlot),e.startDateTime=r,e.formatDates.length>1?e.formatDates=e.formatDates.map((e=>(e.setHours(r.getHours()),e.setMinutes(r.getMinutes()),e.setSeconds(r.getSeconds()),e))):e.formatDates=[r]}const o=new Date(r);if(new Date(l.dateList[0].end_date).getTime()<o.setMinutes(o.getMinutes()+e.desiredTimeSlot))return n}}}else{if(!o[0].is_multiple_same_day){const t=new Date(e.startDateTime);t.setMinutes(t.getMinutes()+e.desiredTimeSlot);const i=[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[jn.gte]:t},start_date:{[jn.lte]:e.startDateTime}}},...e.specialityId&&[{as:"availableSpeciality",model:it,required:!0,where:{speciality_id:e.specialityId,deleted_at:null}}]];let o;if(o=e.doctorId?this.shallowCopy(yield this.__availableDoctorRepo.findOne({deleted_at:null,doctor_id:e.doctorId,facility_location_id:e.facilityLocationId},{include:i})):this.shallowCopy(yield this.__availableSpecialityRepo.findOne({speciality_id:e.specialityId,facility_location_id:e.facilityLocationId,deleted_at:null},{include:[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[jn.gte]:t},start_date:{[jn.lte]:e.startDateTime}}}]})),(null==o?void 0:o.dateList)&&o.dateList.length){const t=[];e.doctorId&&t.push({as:"availableDoctor",model:ot,required:!0,where:{deleted_at:null,doctor_id:e.doctorId}});const i=this.shallowCopy(yield this.__repo.findAll(Object.assign(Object.assign(Object.assign({cancelled:!1,case_id:e.caseId,deleted_at:null,patient_id:e.patientId,pushed_to_front_desk:!1},!e.doctorId&&{available_doctor_id:null}),e.doctorId&&{available_doctor_id:{[jn.not]:null}}),{[jn.and]:[ra.where(ra.fn("datediff",this.convertDateToLocal(new Date(e.startDateTime),e.time_zone),ra.col("scheduled_date_time")),{[jn.and]:[{[jn.gt]:-1},{[jn.lt]:1}]})]}),{include:[{as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null,speciality_id:e.speciality.id}},...t]}));if(i.length)return[];const s=i.map((t=>{if(t.availableSpeciality.speciality_id==e.specialityId)return new Date(t.scheduled_date_time).toISOString()})),l=Bn.countBy(s),d=new Date(e.startDateTime),_=new Date(d);return new Date(o.dateList[0].end_date).getTime()<_.setMinutes(_.getMinutes()+e.desiredTimeSlot)&&(yield this.throwErrorOnInitialSlotNotAvailable(e.cptCodes,e.doctorId)),d.toISOString()in l?[]:((null===(a=e.cptCodes)||void 0===a?void 0:a.length)&&e.speciality.is_multiple_visit&&(e.cptCodes=[e.cptCodes[0]]),n.push(e),n)}yield this.throwErrorOnInitialSlotNotAvailable(e.cptCodes,e.doctorId)}n.push(e)}return n})),this.createAppointmentV1=(e,t,i,a,n)=>kn(this,void 0,void 0,(function*(){const{sessionStatusId:o,undoAppointmentStatusId:s,formatDates:l,startDateTime:d,existingCasePatientSession:_,appointmentStatus:r,isAlradyCheckedIn:c,desiredTimeSlot:p,doctorId:u,specialityId:m,caseId:y,patientId:h,time_zone:f,confirmationStatus:v,appointmentType:b,speciality:S,appointmentTypeId:I,facilityLocationId:D,caseType:w,comments:O,priorityId:T,isSpecialityBase:A,isSoftRegistered:N,caseTypeId:C,slotsForThisAppointment:R,userId:E,physicianId:L,transportation:k,technicianId:P,cptCodes:j,readingProviderId:B,cdImage:U,isTransportation:q}=e,F={headers:{Authorization:n}},M=[],{is_transferring_case:$}=this.shallowCopy(yield this.__kioskCaseRepo.findOne({id:y},{attributes:["is_transferring_case"]}));try{if(m&&!this.shallowCopy(yield this.__specialityRepo.findOne({deleted_at:null,id:m})).is_create_appointment&&!u)throw Error("Selected speciality doesn't allow appointments to be created");const{id:e}=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({slug:"no_show"})),b=yield Promise.all(l.map((n=>kn(this,void 0,void 0,(function*(){var l,b,V,x,K,z,G,H;const Y=yield _a.transaction();try{const W=(0,Cn.format)(new Date(d),"MM-dd-yyyy")===(0,Cn.format)(new Date,"MM-dd-yyyy"),Q=(_&&Object.keys(_).length||c)&&W?r.find((e=>"arrived"===e.slug)).id:r.find((e=>"scheduled"===e.slug)).id,J=new Date(n);null==J||J.setMinutes((null==J?void 0:J.getMinutes())+p);const X=new Date(n),Z=new Date(n);let ee,te,ie=!1;if(!u||u&&m){const e=[];u&&e.push({as:"availableDoctor",model:ot,required:!1,where:{deleted_at:null}});const t=this.shallowCopy(yield this.__repo.findAll({cancelled:!1,case_id:y,deleted_at:null,patient_id:h,pushed_to_front_desk:!1,[jn.and]:[ra.where(ra.fn("datediff",this.convertDateToLocal(new Date(n),f),ra.col("scheduled_date_time")),{[jn.and]:[{[jn.gt]:-1},{[jn.lt]:1}]})]},{include:[{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null}},...e]}));for(const e of t){const{scheduled_date_time:t,time_slots:i}=e,a=new Date(d),n=new Date(t),o=new Date(n.getTime()+6e4*i);if((null===(l=null==e?void 0:e.availableSpeciality)||void 0===l?void 0:l.speciality_id)==m&&I==(null==e?void 0:e.type_id)&&a.getDay()===n.getDay()&&(ie=!0),m==(null===(b=null==e?void 0:e.availableSpeciality)||void 0===b?void 0:b.speciality_id)&&a.getTime()===n.getTime()&&!(null===(V=null==S?void 0:S.specialityVisitType[0])||void 0===V?void 0:V.is_multiple_same_day))throw un("SAME_TIME_APPOINTMENT_ERROR");if(a.getTime()>=n.getTime()&&a.getTime()<o.getTime()&&!(null===(x=null==S?void 0:S.specialityVisitType[0])||void 0===x?void 0:x.is_multiple_same_day))throw un("TIME_SLOTS_ISSUE")}}if(!v){X.setHours(X.getHours()-24),Z.setHours(Z.getHours()+24);const e={cancelled:!1,deleted_at:null,patient_id:h,pushed_to_front_desk:!1};ee=this.shallowCopy(yield this.__repo.findAll(Object.assign(Object.assign({},e),{scheduled_date_time:{[jn.between]:[X,n]}}))),te=this.shallowCopy(yield this.__repo.findAll(Object.assign(Object.assign({},e),{scheduled_date_time:{[jn.and]:[{[jn.gt]:n},{[jn.lt]:Z}]}}),{limit:1,order:[["scheduled_date_time","ASC"]]})),null==ee||ee.filter((e=>{const t=new Date(e.scheduled_date_time);if(null==t||t.setMinutes((null==t?void 0:t.getMinutes())+e.time_slots),new Date(n).getTime()<t.getTime())return e}))}const ae={caseId:y,patientId:h,appointmentTypeId:I,specialityId:m,noShowId:e,config:F};if(yield this.checkVisitTypes(ae,$,ie),!u){if(!S.is_create_appointment)throw un("CANNOT_CREATE_SPECIALITY_APPOINTMENT");let e=null;const l={deleted_at:null,facility_location_id:D,speciality_id:m},d={include:{as:"users",include:{as:"medicalIdentifiers",model:Mt,required:!0,where:{deleted_at:null,wcb_auth:1}},model:le,required:!0,where:{deleted_at:null}}};if("worker_compensation"===w&&(e=this.shallowCopy(yield this.__userFacilityRepo.findAll(Object.assign({},l),Object.assign({},d)))),!("worker_compensation"!==w||e&&e.length))throw un("NO_PROVIDER_FOUND_FOR_WORKER_COMPENSATION");const r=this.shallowCopy(yield this.__availableSpecialityRepo.findAll({deleted_at:null,facility_location_id:D,speciality_id:m},{include:[{as:"appointments",model:He,required:!1,where:{deleted_at:null}},{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[jn.gte]:J},start_date:{[jn.lte]:n}}}]}));let p,f;r&&r.length||(yield this.checkErrorMultipleCptAppointments(i,t.slice(0,a),!0,u,S));let g=new Date(n);const b=r.map((e=>{const{dateList:t}=e;return null==t?void 0:t.map((t=>({appointments:e.appointments,date_list_id:t.id,end_date:t.end_date,id:e.id,no_of_doctors:t.no_of_doctors,no_of_slots:t.no_of_slots,start_date:t.start_date})))})).flat();for(const e of b){f=this.getTimeSlotOfAssignment(e);const t=new Date(n);if(t.setMinutes(t.getMinutes()+f*R),v||!te.length||new Date(null===(K=te[0])||void 0===K?void 0:K.scheduled_date_time).getTime()>=new Date(t).getTime()){const t=this.getFreeSlotsForAssignment(e,null==e?void 0:e.appointments,((null==S?void 0:S.over_booking)+1)*(null==e?void 0:e.no_of_doctors),f).find((e=>{const t=new Date(null==e?void 0:e.startDateTime),i=new Date(null==e?void 0:e.startDateTime);if(i.setMinutes(i.getMinutes()+f),t.getTime()<=new Date(n).getTime()&&new Date(n).getTime()<i.getTime()&&e.count>0)return e}));g=null==t?void 0:t.startDateTime,t&&Object.keys(t).length&&(p=e)}}if(!p)throw un("NO_SLOTS_REMAINING");const $=this.shallowCopy(yield this.__repo.create({available_speciality_id:null==p?void 0:p.id,case_id:y,case_type_id:C,chartNo:h,comments:O,confirmation_status:v,created_by:E,date_list_id:null==p?void 0:p.date_list_id,is_speciality_base:A,patient_id:h,priority_id:T||null,scheduled_date_time:n,status_id:s||Q,time_slots:f*R,type_id:I,is_soft_registered:N,is_active:!N,physician_id:L,technician_id:P,reading_provider_id:B,cd_image:U,is_transportation:null!=q?q:null},Y));k&&k.length&&(yield this.addTransportations($.id,k,Y)),j&&j.length&&(yield this.addAppointmentsCptCodes($.id,j,Y)),yield Y.commit(),M.push($.id);try{const e=(_&&Object.keys(_).length||c)&&W?"checked_in":"scheduled",t=this.shallowCopy(yield this.__http.get(`${process.env.KIOSK_URL}case-patient-session-statuses`,Object.assign(Object.assign({},F),{params:{slug:e}}))),{result:{data:i}}=t||{};yield this.__http.post(`${process.env.KIOSK_URL}case-patient-session/`,{appointment_id:$.id,case_id:y,request_from_sch:!0,status_id:o||(null===(z=i[0])||void 0===z?void 0:z.id),trigger_socket:!0},F),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}case-patient-session/change-in-waiting-list`,{user_id:E},F)}catch(e){throw yield this.deleteAppointmentById($.id,E),e}return $}const ne=this.shallowCopy(yield this.__medicalIdentifierRepo.findOne({deleted_at:null,user_id:u,wcb_auth:!0}));if(!("worker_compensation"!==w||ne&&Object.keys(ne).length))throw un("PROVIDER_DOES_NOT_HAVE_WC_AUTH");const oe=[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[jn.gte]:J},start_date:{[jn.lte]:n}}},...m&&[{as:"availableSpeciality",model:it,required:!0,where:{speciality_id:m,deleted_at:null}}]],se=this.shallowCopy(yield this.__availableDoctorRepo.findOne({deleted_at:null,doctor_id:u,facility_location_id:D},{include:oe}));if(!se||!Object.keys(se).length)throw yield this.checkErrorMultipleCptAppointments(i,t.slice(0,a),!0,u,S),un("ASSIGNMENT_NOT_FOUND");const{dateList:de}=se||{},_e={available_speciality_id:null==se?void 0:se.available_speciality_id,date_list_id:de[0].id,end_date:de[0].end_date,id:se.id,no_of_slots:se.no_of_slots,start_date:de[0].start_date},re=new Date(n),ce=this.getTimeSlotOfAssignment(_e);if(re.setMinutes(re.getMinutes()+ce*R),!v&&(null==te?void 0:te.length)&&new Date(null===(G=te[0])||void 0===G?void 0:G.scheduled_date_time).getTime()<new Date(re).getTime())throw un("PATIENT_ALREADY_HAVE_ASSIGNMENT");const pe=this.shallowCopy(yield this.__repo.findAll({available_doctor_id:_e.id,cancelled:!1,deleted_at:null,pushed_to_front_desk:!1})),ue=this.getFreeSlotsForAssignment(_e,pe,S.over_booking+1,ce),me=null==ue?void 0:ue.find((e=>{const t=new Date(e.startDateTime),i=new Date(e.startDateTime);if(i.setMinutes(i.getMinutes()+ce),t.getTime()<=new Date(n).getTime()&&new Date(n).getTime()<i.getTime()&&e.count>0)return e}));if(!me||!Object.keys(me).length)throw S.is_multiple_visit&&(yield this.checkErrorMultipleCptAppointments(i,t.slice(0,a),!0,u,S)),un("NO_SLOTS_REMAINING");const ye=this.shallowCopy(yield this.__unAvailableDoctorRepo.findOne({[jn.or]:[{[jn.and]:[{approval_status:1,deleted_at:null,doctor_id:u,end_date:{[jn.gt]:re},start_date:{[jn.lte]:n}}]},{[jn.and]:[{approval_status:1,deleted_at:null,doctor_id:u,start_date:{[jn.gte]:n,[jn.lt]:re}}]},{[jn.and]:[{approval_status:1,deleted_at:null,doctor_id:u,end_date:{[jn.lte]:re,[jn.gte]:n}}]}]}));if(ye&&Object.keys(ye).length)throw un("NO_PROVIDER_AVAILABLE");const he=this.shallowCopy(yield this.__repo.create({available_doctor_id:null==_e?void 0:_e.id,available_speciality_id:null==_e?void 0:_e.available_speciality_id,case_id:y,case_type_id:C,chartNo:h,comments:O,confirmation_status:v,created_by:E,date_list_id:null==_e?void 0:_e.date_list_id,is_speciality_base:A,patient_id:h,priority_id:T||null,scheduled_date_time:n,status_id:s||Q,time_slots:ce*R,type_id:I,is_soft_registered:N,is_active:!N,physician_id:L,technician_id:P,reading_provider_id:B,cd_image:U,is_transportation:null!=q?q:null},Y));k&&k.length&&(yield this.addTransportations(he.id,k,Y)),j&&j.length&&(yield this.addAppointmentsCptCodes(he.id,j,Y)),yield Y.commit(),M.push(he.id);try{const e=(_&&Object.keys(_).length||c)&&W?"checked_in":"scheduled",t=this.shallowCopy(yield this.__http.get(`${process.env.KIOSK_URL}case-patient-session-statuses`,Object.assign(Object.assign({},F),{params:{slug:e}}))),{result:{data:i}}=t||{};yield this.__http.post(`${process.env.KIOSK_URL}case-patient-session/`,{appointment_id:he.id,case_id:y,request_from_sch:!0,status_id:o||(null===(H=i[0])||void 0===H?void 0:H.id),trigger_socket:!0},F),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}case-patient-session/change-in-waiting-list`,{user_id:E},F)}catch(e){throw yield this.deleteAppointmentById(he.id,E),e}const fe=this.shallowCopy(yield this.__repo.findOne({id:he.id},{include:[{as:"appointmentStatus",model:g,required:!1,where:{deleted_at:null}},{as:"patient",model:Et,required:!1,where:{deleted_at:null}},{as:"caseType",model:Wt,required:!1,where:{deleted_at:null}}]})),ve=new Date(fe.scheduled_date_time);ve.setMinutes(ve.getMinutes()+fe.time_slots);const ge=this.shallowCopy(yield this.__kioskContactPersonTypesRepo.findOne({slug:"self"})),be=this.shallowCopy(yield this.__kioskContactPersonRepo.findOne({case_id:fe.case_id,contact_person_type_id:ge.id,deleted_at:null}));return be&&be.email&&this.sentEmailForAppointment({appointmentId:fe.id,appointmentStatus:fe.appointmentStatus.name,caseId:fe.case_id,caseType:fe.caseType.name,confirmationStatus:fe.confirmation_status,email:be.email,emailTitle:"Create Appointment",endDateTime:new Date(ve),patientLastName:fe.patient.last_name,reason:"created",scheduledDateTime:new Date(fe.scheduled_date_time),timeSlot:fe.time_slots}),he}catch(e){throw yield Y.rollback(),e}})))));if(M&&M.length){const e=yield this.getAppointmentById({appointment_id:M,user_id:E},n);this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:e,action_point:"created"},F),this.__http.emailGenator(`${process.env.EMAIL_TEMPLATE_GENERATOR_URL}appointment/generate-data-with-multiple-context`,{appointment_ids:M,email_title:"Appointment Created"},F),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:M},F)}return b}catch(e){if(M&&M.length){const e=yield this.getAppointmentById({appointment_id:M,user_id:E},n);this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:e,action_point:"created"},F),this.__http.emailGenator(`${process.env.EMAIL_TEMPLATE_GENERATOR_URL}appointment/generate-data-with-multiple-context`,{appointment_ids:M,email_title:"Appointment Created"},F),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:M},F)}throw e}})),this.deleteAppointmentById=(e,t)=>kn(this,void 0,void 0,(function*(){return this.__repo.update(e,{deleted_at:new Date,updated_by:t})})),this.deleteKioskSessionByAppointmentId=(e,t)=>kn(this,void 0,void 0,(function*(){return this.__casePatientSessionRepo.update(e,{deleted_at:new Date,updated_by:t})})),this.facilityWiseMapping=(e,t,i)=>{const a=e.map((e=>e.dateList.map((i=>{var a,n,o,s,l,d,_,r,c,p,u,m,y,h,f;if(null==t?void 0:t.find((t=>t.id===e.facility_location_id)))return{appointments:[],date_list_id:i.id,doctor_id:null==e?void 0:e.doctor_id,end_date:null==i?void 0:i.end_date,id:null==e?void 0:e.id,speciality_id:null!==(n=null===(a=null==e?void 0:e.availableSpeciality)||void 0===a?void 0:a.speciality_id)&&void 0!==n?n:null===(o=null==e?void 0:e.speciality)||void 0===o?void 0:o.id,speciality_qualifier:null!==(d=null===(l=null===(s=null==e?void 0:e.availableSpeciality)||void 0===s?void 0:s.speciality)||void 0===l?void 0:l.qualifier)&&void 0!==d?d:null===(_=null==e?void 0:e.speciality)||void 0===_?void 0:_.qualifier,speciality_name:null!==(p=null===(c=null===(r=null==e?void 0:e.availableSpeciality)||void 0===r?void 0:r.speciality)||void 0===c?void 0:c.name)&&void 0!==p?p:null===(u=null==e?void 0:e.speciality)||void 0===u?void 0:u.name,speciality_key:null!==(h=null===(y=null===(m=null==e?void 0:e.availableSpeciality)||void 0===m?void 0:m.speciality)||void 0===y?void 0:y.speciality_key)&&void 0!==h?h:null===(f=null==e?void 0:e.speciality)||void 0===f?void 0:f.speciality_key,start_date:null==i?void 0:i.start_date,supervisor_id:null==e?void 0:e.supervisor_id,facility_location_id:e.facility_location_id,facility_location_qualifier:e.qualifier}})))).flat();return t.map((e=>{var t,n,o;const s=null!==(n=null===(t=null==i?void 0:i.find((t=>t.object_id===e.id)))||void 0===t?void 0:t.code)&&void 0!==n?n:"#9d9d9d";if(a.length)return{availibilities:this.filterNonNull(a.filter((t=>t.facility_location_id===e.id))),color:s,facility_id:e.id,facility_name:`${e.facility.name}-${e.name}`,facility_qualifier:`${null===(o=null==e?void 0:e.facility)||void 0===o?void 0:o.qualifier}-${null==e?void 0:e.qualifier}`}}))},this.filterDatelist=(e,t)=>t&&t.length?e.filter((e=>!t.includes(e.dateDay))):e,this.findAvailableSlots=(e,t,i)=>{var a,n;if(e&&t.facility_location_id===i.facility_location_id){const e=null===(n=null===(a=null==i?void 0:i.availableSpeciality)||void 0===a?void 0:a.speciality)||void 0===n?void 0:n.over_booking;this.getFreeSlotsForAssignment(t,t.appointments,e+1,this.getTimeSlotOfAssignment(t),0)}},this.findEndDateForRecurrence=(e,t,i,a)=>kn(this,void 0,void 0,(function*(){if("weekly"===a){const a=new Date(e);let n,o=new Date(e);a.getDay()>i[i.length-1]&&(n=this.addDaysForReccurence(a,7-a.getDay()+1),o=n);const s=o;let l=0;for(;l<t;)o.getDay()>i[i.length-1]&&(n=this.addDaysForReccurence(o,7-o.getDay())),s.setTime(s.getTime()+6048e5),l+=1;const d=i[i.length-1]-o.getDay();return this.addDaysForReccurence(s,d)}const n=new Date(e);return function(e){const t=new Date(n.getTime());return t.setDate(n.getDate()+e),t}(t)})),this.findEndDateForRecurrenceMonthly=(e,t,i)=>kn(this,void 0,void 0,(function*(){const a=new Date(e);if(a.getDay()===i[0])for(let e=0;e<t;e+=1)a.setTime(a.getTime()+24192e5);else{let e=!0;for(;e;)if(a.setTime(a.getTime()+864e5),a.getDay()===i[0]){for(let e=0;e<t;e+=1)a.setTime(a.getTime()+24192e5);e=!1}}return new Date(a)})),this.findFacilityLocations=(e,t)=>kn(this,void 0,void 0,(function*(){const i=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,speciality_id:{[jn.ne]:null},user_id:e}));if(!i)throw un("NO_PROVIDE_PARACTICE");const a=i.map((e=>e.facility_location_id)),n=this.shallowCopy(yield this.__modelHasRolesRepo.findOne({model_id:t},{include:{model:he,as:"role",required:!1}}));if(!n||!Object.keys(n).length)throw un("LOGGED_IN_NOT_FOUND");const{role:o,role:{slug:s}}=n;if(o&&"super_admin"===s)return a;const l=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,facility_location_id:{[jn.in]:a},user_id:t}));if(!l)throw un("NO_USER_PRACTICE");return l.map((e=>e.facility_location_id)).filter((e=>a.includes(e)))})),this.formatAppointmentPatientForIos=(e,t,i)=>this.filterNonNull(e.map((e=>{var a,n,o,s,l,d,_,r,c,p,u,m,y,h,f,v,g,b,S,I,D,w,O,T,A,N,C,R,E,L,k,P,j,B,U,q,F,M,$,V,x,K,z,G,H;if(!e.patient||!Object.keys(e.patient).length)return null;const Y=this.checkBackDated(e,i);return Object.assign(Object.assign({},Y),{appointment_duration:null==e?void 0:e.time_slots,appointment_status:null===(a=null==e?void 0:e.appointmentStatus)||void 0===a?void 0:a.name,appointment_title:null==e?void 0:e.appointment_title,appointment_type_description:null===(n=null==e?void 0:e.appointmentType)||void 0===n?void 0:n.name,appointment_type_id:null==e?void 0:e.type_id,assign_to_me:!!t.includes(null===(o=null==e?void 0:e.availableDoctor)||void 0===o?void 0:o.doctor_id),available_doctor_id:null==e?void 0:e.available_doctor_id,available_speciality_id:null==e?void 0:e.available_speciality_id,case_id:null==e?void 0:e.case_id,case_type_id:null==e?void 0:e.case_type_id,case_type:null!==(d=null===(l=null===(s=null==e?void 0:e.case)||void 0===s?void 0:s.caseType)||void 0===l?void 0:l.name)&&void 0!==d?d:null,comments:null==e?void 0:e.comments,confirmation_status:null==e?void 0:e.confirmation_status,created_at:null==e?void 0:e.created_at,created_by:null==e?void 0:e.created_by,date_list_id:null==e?void 0:e.date_list_id,doctor_first_name:(null==e?void 0:e.available_doctor_id)&&null!==(p=null===(c=null===(r=null===(_=null==e?void 0:e.availableDoctor)||void 0===_?void 0:_.doctor)||void 0===r?void 0:r.userBasicInfo)||void 0===c?void 0:c.first_name)&&void 0!==p?p:null,doctor_id:(null==e?void 0:e.available_doctor_id)&&null!==(m=null===(u=null==e?void 0:e.availableDoctor)||void 0===u?void 0:u.doctor_id)&&void 0!==m?m:null,doctor_last_name:(null==e?void 0:e.available_doctor_id)&&null!==(v=null===(f=null===(h=null===(y=null==e?void 0:e.availableDoctor)||void 0===y?void 0:y.doctor)||void 0===h?void 0:h.userBasicInfo)||void 0===f?void 0:f.middle_name)&&void 0!==v?v:null,doctor_middle_name:(null==e?void 0:e.available_doctor_id)&&null!==(I=null===(S=null===(b=null===(g=null==e?void 0:e.availableDoctor)||void 0===g?void 0:g.doctor)||void 0===b?void 0:b.userBasicInfo)||void 0===S?void 0:S.last_name)&&void 0!==I?I:null,evaluation_date_time:null==e?void 0:e.evaluation_date_time,facility_location_id:(null==e?void 0:e.available_doctor_id)?null===(D=null==e?void 0:e.availableDoctor)||void 0===D?void 0:D.facility_location_id:null===(w=null==e?void 0:e.availableSpeciality)||void 0===w?void 0:w.facility_location_id,first_name:null==e?void 0:e.patient.first_name,has_app:(null==e?void 0:e.availableDoctor)?null===(T=null===(O=null==e?void 0:e.availableDoctor.availableSpeciality)||void 0===O?void 0:O.speciality)||void 0===T?void 0:T.has_app:null===(A=null==e?void 0:e.availableSpeciality)||void 0===A?void 0:A.speciality.has_app,id:null==e?void 0:e.id,last_name:null===(N=null==e?void 0:e.patient)||void 0===N?void 0:N.last_name,middle_name:null===(C=null==e?void 0:e.patient)||void 0===C?void 0:C.middle_name,patient_id:null==e?void 0:e.patient_id,priority_description:null===(R=null==e?void 0:e.priority)||void 0===R?void 0:R.name,priority_id:null==e?void 0:e.priority_id,profile_avatar:null==e?void 0:e.patient.profile_avatar,scheduled_date_time:null==e?void 0:e.scheduled_date_time,speciality:(null==e?void 0:e.availableSpeciality)?null===(L=null===(E=null==e?void 0:e.availableSpeciality)||void 0===E?void 0:E.speciality)||void 0===L?void 0:L.name:null===(P=null===(k=null==e?void 0:e.availableDoctor.availableSpeciality)||void 0===k?void 0:k.speciality)||void 0===P?void 0:P.name,speciality_id:(null==e?void 0:e.availableSpeciality)?null===(j=null==e?void 0:e.availableSpeciality)||void 0===j?void 0:j.speciality_id:null===(B=null==e?void 0:e.availableDoctor.availableSpeciality)||void 0===B?void 0:B.speciality_id,speciality_key:(null==e?void 0:e.availableSpeciality)?null===(q=null===(U=null==e?void 0:e.availableSpeciality)||void 0===U?void 0:U.speciality)||void 0===q?void 0:q.speciality_key:null===(M=null===(F=null==e?void 0:e.availableDoctor.availableSpeciality)||void 0===F?void 0:F.speciality)||void 0===M?void 0:M.speciality_key,time_slot:(null==e?void 0:e.availableDoctor)?null===(V=null===($=null==e?void 0:e.availableDoctor.availableSpeciality)||void 0===$?void 0:$.speciality)||void 0===V?void 0:V.time_slot:null===(K=null===(x=null==e?void 0:e.availableSpeciality)||void 0===x?void 0:x.speciality)||void 0===K?void 0:K.time_slot,updated_at:null==e?void 0:e.updated_at,updated_by:null==e?void 0:e.updated_by,visit_session_state_id:(null===(z=null==e?void 0:e.appointmentVisit)||void 0===z?void 0:z.visitState)?null==e?void 0:e.appointmentVisit.visitState.id:null,visit_session_state_name:(null===(G=null==e?void 0:e.appointmentVisit)||void 0===G?void 0:G.visitState)?null==e?void 0:e.appointmentVisit.visitState.name:null,visit_session_state_slug:(null===(H=null==e?void 0:e.appointmentVisit)||void 0===H?void 0:H.visitState)?null==e?void 0:e.appointmentVisit.visitState.slug:null,case_patient_sessions:e.kioskCasePatientSessions,is_speciality_base:e.is_speciality_base,start_date_time:null==e?void 0:e.scheduled_date_time})}))),this.formatAvailableDoctor=(e,t,i)=>{var a,n,o,s,l;const{dateList:{start_date:d,end_date:_,no_of_slots:r},available_doctor_id:c,availableDoctor:p,availableDoctor:{doctor:{userFacilities:u},supervisor_id:m,doctor_id:y}}=e,h={available_speciality_id:null==p?void 0:p.available_speciality_id,doctor_id:y,end_date:new Date(_),facility_location_id:null==p?void 0:p.facility_location_id,id:c,no_of_slots:r,over_booking:null!==(o=null===(n=null===(a=null==u?void 0:u.find((e=>e.facility_location_id===p.facility_location_id)))||void 0===a?void 0:a.speciality)||void 0===n?void 0:n.over_booking)&&void 0!==o?o:null,speciality_id:null!==(l=null===(s=null==u?void 0:u.find((e=>e.facility_location_id===p.facility_location_id)))||void 0===s?void 0:s.speciality_id)&&void 0!==l?l:null,start_date:new Date(d),supervisor_id:m,time_slot:i};return[t.map((e=>({appointment_title:e.appointment_title,available_doctor_id:e.available_doctor_id,available_speciality_id:e.available_speciality_id,case_id:e.case_id,comments:e.comments,confirmation_status:e.confirmation_status,evaluation_date_time:e.evaluation_date_time,id:e.id,patient_id:e.patient_id,priority_id:e.priority_id,scheduled_date_time:e.scheduled_date_time,status_id:e.status_id,time_slots:e.time_slots,type_id:e.type_id}))),h]},this.formatAvailableDoctorForAutoResolve=(e,t)=>{let i=[];if(!t){const{dateList:{start_date:t,end_date:i,no_of_slots:a}}=e[0],n=new Date(t);let o=new Date(i).getTime()-n.getTime();o/=6e4;const s=o/a;return this.formatAvailableDoctor(e[0],e,s)}return this.filterNonNull(e.map((t=>{var a,n,o,s,l;const{dateList:{start_date:d,end_date:_,no_of_slots:r},available_doctor_id:c,availableDoctor:p,availableDoctor:{doctor:{userFacilities:u},supervisor_id:m,doctor_id:y}}=t,h=new Date(d),f=new Date(_);let v=f.getTime()-h.getTime();v/=6e4;const g=v/r;if(!i.length)return this.formatAvailableDoctor(t,e,g);const b=null==i?void 0:i.find((e=>(null==e?void 0:e.available_doctor_id)===t.available_doctor_id));if(b&&Object.keys(b).length)return null;const S={available_speciality_id:null==p?void 0:p.available_speciality_id,doctor_id:y,end_date:f,facility_location_id:null==p?void 0:p.facility_location_id,id:c,no_of_slots:r,over_booking:null!==(o=null===(n=null===(a=null==u?void 0:u.find((e=>e.facility_location_id===p.facility_location_id)))||void 0===a?void 0:a.speciality)||void 0===n?void 0:n.over_booking)&&void 0!==o?o:null,speciality_id:null!==(l=null===(s=null==u?void 0:u.find((e=>e.facility_location_id===p.facility_location_id)))||void 0===s?void 0:s.speciality_id)&&void 0!==l?l:null,start_date:h,supervisor_id:m,time_slot:g};return i=this.filterNonNull(e.map((e=>t.available_doctor_id!==e.available_doctor_id?null:{appointment_title:e.appointment_title,available_doctor_id:e.available_doctor_id,available_speciality_id:e.available_speciality_id,case_id:e.case_id,comments:e.comments,confirmation_status:e.confirmation_status,evaluation_date_time:e.evaluation_date_time,id:e.id,patient_id:e.patient_id,priority_id:e.priority_id,scheduled_date_time:e.scheduled_date_time,status_id:e.status_id,time_slots:e.time_slots,type_id:e.type_id}))),[i,S]})).flat())},this.formatDatesCriteriaWithEndDate=e=>kn(this,void 0,void 0,(function*(){const{daysList:t,endDateString:i,endingCriteria:a,recurrenceEndDateString:n,startDateString:o}=e;if(o.slice(0,10)===n.slice(0,10))return[new Date(o)];const s=new Date(o),l=(new Date(i),new Date(n));let d=[];if("monthly"===a){const e=t.length;let i=1;for(;s.getTime()<=l.getTime();){const a=e*i;d=[...d,...this.filterNonNull(t.map(((e,i)=>{if(s.getDay()===t[i])return new Date(JSON.parse(JSON.stringify(s)))})))],a===d.length&&(i+=1,s.setMonth(s.getMonth()+1,0)),s.setTime(s.getTime()+864e5)}return d}for(;s.getTime()<=l.getTime();)d=[...d,...this.filterNonNull(t.map(((e,i)=>{if(s.getDay()===t[i])return new Date(JSON.parse(JSON.stringify(s)))})))],s.setTime(s.getTime()+864e5);return d})),this.formatDatesCriteriaWithOutEndDate=e=>kn(this,void 0,void 0,(function*(){const{endingCriteria:t,daysList:i,startDateString:a,endDateString:n,numberOfRecurrsion:o}=e,s=new Date(a);new Date(n);let l,d=[];if("monthly"===t){l=yield this.findEndDateForRecurrenceMonthly(s,o,i);const e=i.length;let t=1;for(;s.getTime()<=l.getTime();){const a=e*t;d=[...d,...this.filterNonNull(i.map(((e,t)=>{if(s.getDay()===i[t])return new Date(JSON.parse(JSON.stringify(s)))})))],a===d.length&&(t+=1,s.setMonth(s.getMonth()+1,0)),s.setTime(s.getTime()+864e5)}return d}for(l=yield this.findEndDateForRecurrence(s,o,i,t);s.getTime()<=(null==l?void 0:l.getTime());)d=[...d,...this.filterNonNull(i.map(((e,t)=>{if(s.getDay()===i[t])return new Date(JSON.parse(JSON.stringify(s)))})))],s.setTime(s.getTime()+864e5);return d})),this.formatDatesForSuggestion=(e,t)=>{const{startDateString:i,endDateString:a,endTime:n,startTime:o,days:s}=e,l=[],d=new Date(i),_=new Date(a);for(;d.getTime()<=_.getTime();){const e=d.getDate()<10?`0${d.getDate()}`:d.getDate(),t=d.getMonth()+1<9?`0${d.getMonth()+1}`:`${d.getMonth()+1}`;l.push({dateDay:d.getDay(),dateString:`${d.getFullYear()}-${t}-${e}`}),d.setDate(d.getDate()+1)}return this.filterDatelist(l,s).map((e=>({end:new Date(`${e.dateString}T${n}.000Z`),start:new Date(`${e.dateString}T${o}.000Z`)})))},this.formatedAppointmentAgainstDateList=e=>e.map((e=>{var t,i,a,n;return{appointment_billable:e.billable,appointment_id:e.id,appointment_status:e.appointmentStatus.name,appointment_status_slug:e.appointmentStatus.slug,available_doctor_id:e.available_doctor_id,available_speciality_id:e.available_speciality_id,case_id:e.case_id,doctor_id:e.available_doctor_id?null===(t=e.availableDoctor)||void 0===t?void 0:t.doctor_id:null,doctor_info:e.available_doctor_id?null===(a=null===(i=e.availableDoctor)||void 0===i?void 0:i.doctor)||void 0===a?void 0:a.userBasicInfo:null,patient_id:e.patient_id,patient_info:e.patient,scheduled_date_time:e.scheduled_date_time,speciality_id:e.available_speciality_id?null===(n=null==e?void 0:e.availableSpeciality)||void 0===n?void 0:n.speciality_id:null,time_slots:e.time_slots}})),this.formatJoinClause=(e,t,i,a)=>{const n=this.__repo.getJoinClause("get_appointment_list_mandatory"),o=null==n?void 0:n.find((e=>"availableDoctor"===e.as)),{include:s}=o,l=Pn(o,["include"]),d={deleted_at:null};let _=!1;return t&&t.length&&(d.id={[jn.in]:t},_=!0),a&&(l.where={deleted_at:null,facility_location_id:{[jn.in]:e}}),i&&i.length&&(l.where={deleted_at:null,doctor_id:{[jn.in]:i}},l.required=!0),this.filterNonNull([...n.filter((e=>"availableDoctor"!==e.as)),Object.assign(Object.assign({},l),{include:[{as:"facilityLocations",include:{as:"facility",model:Ut,required:!1,where:{deleted_at:null}},model:Oe,required:!1,where:{deleted_at:null,id:{[jn.in]:e}}},{as:"doctor",attributes:{exclude:["password"]},include:[{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},{model:Mt,attributes:["id"],required:!1,include:{as:"billingTitle",required:!1,attributes:["id","name"],model:xt,where:{deleted_at:null}},where:{deleted_at:null}}],model:le,required:!0,where:{deleted_at:null}}]}),{as:"availableSpeciality",include:[{as:"facilityLocation",include:[{as:"facility",model:Ut,required:!1,where:{deleted_at:null}}],model:Oe,required:!0,where:{deleted_at:null,id:{[jn.in]:e}}},{as:"speciality",model:ue,required:_,where:Object.assign({},d)}],model:it,required:!(!d.id&&!e.length),where:{deleted_at:null,facility_location_id:{[jn.in]:e}}},{as:"case",model:ti,where:{deleted_at:null},include:{model:ni,as:"caseStatus"}},{as:"patientSessions",include:{as:"visitStatus",model:Pt,required:!0,where:{deleted_at:null}},model:B,required:!0,where:{deleted_at:null}}])},this.formatJoinClauseForAppointmentList=(e,t,i,a,n)=>{const o=this.__repo.getJoinClause("get_appointment_mandatory"),s={deleted_at:null},l={deleted_at:null},d={deleted_at:null};let _=!1;return t&&t.length&&(s.id={[jn.in]:t},l.speciality_id=t,_=!0),n&&(d.where={deleted_at:null,facility_location_id:{[jn.in]:e}}),d.required=!1,i&&i.length&&(d.where={deleted_at:null,doctor_id:{[jn.in]:i}}),[...o,{as:"availableSpeciality",include:[Object.assign(Object.assign({},d),{as:"availableSpecialityDoctor",required:!1,model:ot,include:[{as:"doctor",attributes:{exclude:["password"]},include:[{as:"userBasicInfo",attributes:["id","first_name","last_name","middle_name","user_id"],model:Ce,required:!1,where:{deleted_at:null}},{model:Mt,attributes:["id"],required:!1,include:{as:"billingTitle",required:!1,attributes:["id","name"],model:xt,where:{deleted_at:null}},where:{deleted_at:null}}],model:le,required:!1,where:{deleted_at:null}}]}),{as:"facilityLocation",include:{as:"facility",model:Ut,required:!1,where:{deleted_at:null}},model:Oe,required:!1,where:{deleted_at:null,id:{[jn.in]:e}}},{as:"speciality",model:ue,required:_,where:Object.assign({},s)}],model:it,required:_,where:Object.assign({facility_location_id:{[jn.in]:e}},l)},{as:"case",attributes:["id"],model:ti,where:{deleted_at:null},include:{model:ni,as:"caseStatus",attributes:["id","name"]}},{as:"patientSessions",include:{as:"visitStatus",attributes:["name","slug"],model:Pt,required:!0,where:{deleted_at:null}},model:B,required:!0,where:Object.assign({deleted_at:null},a&&a.length&&{status_id:{[jn.in]:a}})}]},this.formatProjectionClause=(e,t,i,a)=>e&&t?{cancelled:0,pushed_to_front_desk:0,patient_id:e,case_id:t,deleted_at:null}:{cancelled:0,pushed_to_front_desk:0,scheduled_date_time:{[jn.between]:[i,a]},deleted_at:null},this.formatProjectionClauseAppointment=(e,t,i)=>e?{cancelled:0,pushed_to_front_desk:0,patient_id:e,deleted_at:null}:{cancelled:0,pushed_to_front_desk:0,scheduled_date_time:{[jn.between]:[t,i]},deleted_at:null},this.formattedPatient=(e,t)=>null==e?void 0:e.map((e=>{var i,a,n,o,s,l,d,_,r,c,p,u,m,y,h,f,v,g,b,S,I,D,w,O,T,A,N,C,R,E,L,k,P,j,B,U,q,F,M,$,V,x,K,z,G,H,Y,W,Q,J,X,Z,ee;if(!(null==e?void 0:e.patient))return[];const{physicianClinic:te}=e,ie=this.checkBackDated(e,t);let ae=(e.patient_id+1e9).toString();ae=ae.substring(1,10);const ne=`${ae.substring(0,3)}-${ae.substring(3,5)}-${ae.substring(5,9)}`,oe=te?{physician:(null==te?void 0:te.physician)?Object.assign(Object.assign(Object.assign({clinic_location_id:null===(i=null==te?void 0:te.clinicLocation)||void 0===i?void 0:i.id,physician_clinic_id:null==te?void 0:te.id},null==te?void 0:te.clinic),null==te?void 0:te.clinicLocation),null==te?void 0:te.physician):null}:null;e.patient.chart_id=`${ae.substring(0,9)}`;const se=`${ne.substring(0,11)}`;return Object.assign(Object.assign({},ie),{appointment_billable:e.billable,appointment_duration:null==e?void 0:e.time_slots,appointment_status:null==e?void 0:e.appointmentStatus.name,appointment_status_id:null==e?void 0:e.status_id,appointment_status_slug:null==e?void 0:e.appointmentStatus.slug,appointment_title:null==e?void 0:e.appointment_title,appointment_type_description:null===(a=null==e?void 0:e.appointmentType)||void 0===a?void 0:a.name,appointment_type_qualifier:null===(n=null==e?void 0:e.appointmentType)||void 0===n?void 0:n.qualifier,appointment_type_slug:null===(o=null==e?void 0:e.appointmentType)||void 0===o?void 0:o.slug,appointment_type_id:null==e?void 0:e.type_id,appointment_visit_state_id:e.appointmentVisit?e.appointmentVisit:null,appointment_visit_state_name:e.appointmentVisit?null===(l=null===(s=e.appointmentVisit)||void 0===s?void 0:s.visitState)||void 0===l?void 0:l.name:null,appointment_visit_state_slug:e.appointmentVisit?null===(_=null===(d=e.appointmentVisit)||void 0===d?void 0:d.visitState)||void 0===_?void 0:_.slug:null,available_doctor_id:null==e?void 0:e.available_doctor_id,available_doctor_is_provider_assignment:!!(null===(r=null==e?void 0:e.availableDoctor)||void 0===r?void 0:r.is_provider_assignment),available_speciality_id:null==e?void 0:e.available_speciality_id,case_id:null==e?void 0:e.case_id,case_type_id:null!==(c=null==e?void 0:e.case_type_id)&&void 0!==c?c:null,case_type_name:null!==(m=null===(u=null===(p=null==e?void 0:e.case)||void 0===p?void 0:p.caseType)||void 0===u?void 0:u.name)&&void 0!==m?m:null,cd_image:null==e?void 0:e.cd_image,comments:null==e?void 0:e.comments,confirm_description:null==e?void 0:e.confirm_description,confirmation_status:null==e?void 0:e.confirmation_status,created_at:null==e?void 0:e.created_at,created_by:null==e?void 0:e.created_by,date_list_id:null==e?void 0:e.date_list_id,doctor_info:null!==(f=null===(h=null===(y=null==e?void 0:e.availableDoctor)||void 0===y?void 0:y.doctor)||void 0===h?void 0:h.userBasicInfo)&&void 0!==f?f:null,evaluation_date_time:null==e?void 0:e.evaluation_date_time,first_name:null===(v=null==e?void 0:e.patient)||void 0===v?void 0:v.first_name,has_app:(null==e?void 0:e.available_speciality_id)?null===(b=null===(g=null==e?void 0:e.availableSpeciality)||void 0===g?void 0:g.speciality)||void 0===b?void 0:b.has_app:null===(D=null===(I=null===(S=null==e?void 0:e.availableDoctor)||void 0===S?void 0:S.availableSpeciality)||void 0===I?void 0:I.speciality)||void 0===D?void 0:D.has_app,id:null==e?void 0:e.id,last_name:null===(w=null==e?void 0:e.patient)||void 0===w?void 0:w.last_name,middle_name:null===(O=null==e?void 0:e.patient)||void 0===O?void 0:O.middle_name,patient_id:null==e?void 0:e.patient_id,patient_status:null==e?void 0:e.patient_status,picture:null!==(A=null===(T=null==e?void 0:e.patient)||void 0===T?void 0:T.profile_avatar)&&void 0!==A?A:null,priority_description:null===(N=null==e?void 0:e.priority)||void 0===N?void 0:N.name,priority_id:null==e?void 0:e.priority_id,reading_provider_id:null==e?void 0:e.reading_provider_id,reading_provider:null==e?void 0:e.reading_provider,scheduled_date_time:null==e?void 0:e.scheduled_date_time,speciality_id:(null==e?void 0:e.available_speciality_id)?null===(C=null==e?void 0:e.availableSpeciality)||void 0===C?void 0:C.speciality_id:null===(E=null===(R=null==e?void 0:e.availableDoctor)||void 0===R?void 0:R.availableSpeciality)||void 0===E?void 0:E.speciality_id,speciality_key:(null==e?void 0:e.available_speciality_id)?null===(k=null===(L=null==e?void 0:e.availableSpeciality)||void 0===L?void 0:L.speciality)||void 0===k?void 0:k.speciality_key:null===(B=null===(j=null===(P=null==e?void 0:e.availableDoctor)||void 0===P?void 0:P.availableSpeciality)||void 0===j?void 0:j.specialit)||void 0===B?void 0:B.speciality_key,speciality_name:(null==e?void 0:e.available_speciality_id)?null===(q=null===(U=null==e?void 0:e.availableSpeciality)||void 0===U?void 0:U.speciality)||void 0===q?void 0:q.name:null===($=null===(M=null===(F=null==e?void 0:e.availableDoctor)||void 0===F?void 0:F.availableSpeciality)||void 0===M?void 0:M.specialit)||void 0===$?void 0:$.name,speciality_qualifier:(null==e?void 0:e.available_speciality_id)?null===(x=null===(V=null==e?void 0:e.availableSpeciality)||void 0===V?void 0:V.speciality)||void 0===x?void 0:x.qualifier:null===(G=null===(z=null===(K=null==e?void 0:e.availableDoctor)||void 0===K?void 0:K.availableSpeciality)||void 0===z?void 0:z.specialit)||void 0===G?void 0:G.qualifier,time_slot:(null==e?void 0:e.available_speciality_id)?null===(Y=null===(H=null==e?void 0:e.availableSpeciality)||void 0===H?void 0:H.speciality)||void 0===Y?void 0:Y.time_slot:null===(J=null===(Q=null===(W=null==e?void 0:e.availableDoctor)||void 0===W?void 0:W.availableSpeciality)||void 0===Q?void 0:Q.specialit)||void 0===J?void 0:J.time_slot,updated_at:null==e?void 0:e.updated_at,updated_by:null==e?void 0:e.updated_by,chart_id:null===(X=null==e?void 0:e.patient)||void 0===X?void 0:X.chart_id,chart_id_formatted:se,is_active:null==e?void 0:e.is_active,is_transportation:null==e?void 0:e.is_transportation,case_status:null===(ee=null===(Z=null==e?void 0:e.case)||void 0===Z?void 0:Z.caseStatus)||void 0===ee?void 0:ee.name,physician_clinic:oe,technician:null==e?void 0:e.technician,transportations:null==e?void 0:e.transportations,appointment_cpt_codes:null==e?void 0:e.appointmentCptCodes,appointmentType:null==e?void 0:e.appointmentType,patientSession:null==e?void 0:e.patientSessions})})),this.getApointmentListCount=(e,t)=>kn(this,void 0,void 0,(function*(){const{end_date:t,patient_id:i,case_id:a,doctor_ids:n,facility_location_ids:o,start_date:s,user_id:l=Number(process.env.USERID),appointment_type_ids:d,appointment_status_ids:_,speciality_ids:r,case_type_ids:c,patient_status_ids:p}=e,u=this.shallowCopy(yield this.__userRepo.findOne({deleted_at:null,id:l}));if(!u&&!Object.keys(u).length)throw un("NO_RECORD_FOUND");const m=this.shallowCopy(yield this.__modelHasRolesRepo.findOne({model_id:l},{include:{model:he,as:"role",required:!1}})),{role:y,role:{slug:h}}=m||{};if(y&&"kiosk"===h){const e=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,user_id:l}));if(!e&&!e.length)throw un("USER_NOT_ALLOWED");if(!e.filter((e=>o.includes(e.facility_location_id))).length)throw un("USER_NOT_ALLOWED")}let f;if(!Object.keys(y).length||"super_admin"!==h){const e=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,speciality_id:{[jn.ne]:null},user_id:l}));if(!e&&!e.length)throw un("NO_APPOINTMENT_TO_SHOW");f=l}const v=this.formatProjectionClause(i,a,new Date(s),new Date(t));d&&d.length&&(v.type_id={[jn.in]:d}),_&&_.length&&(v.status_id={[jn.in]:_}),c&&c.length&&(v.case_type_id={[jn.in]:c});const g=this.formatJoinClause(o,r,n,f),b=this.shallowCopy(yield this.__repo.findAll(Object.assign({},v),{include:[...g]}));return{appointment_count:null==b?void 0:b.map((e=>{const{availableDoctor:t,availableSpeciality:i,patient:a}=e,{facilityLocations:n}=t||{},{facilityLocation:o}=i||{};if(!(t&&n||i&&o))return[]})).flat().length}})),this.getApointmentListCountV1=(e,t)=>kn(this,void 0,void 0,(function*(){const{end_date:t,patient_id:i,case_ids:a,patient_name:n,doctor_ids:o,facility_location_ids:s,start_date:l,user_id:d=Number(process.env.USERID),appointment_type_ids:_,appointment_status_ids:r,speciality_ids:c,case_type_ids:p,patient_status_ids:u}=e,m=this.generateAppointmentListCountV1({patientStatusIds:u,facilityLocationIds:s,specialityIds:c,doctorIds:o,patientId:i,patientName:n,appointmentTypeIds:_,appointmentStatusIds:r,caseTypeIds:p,caseIds:a,startDate:l,endDate:t}),[y]=this.shallowCopy(yield _a.query(m)),[h]=y;return{appointment_count:h.total_count}})),this.getCancelAppointments=e=>e.filter((e=>e.cancelled&&null===e.deleted_at)),this.getCompletedAppointments=e=>e.filter((e=>{var t;return!e.cancelled&&null===e.deleted_at&&"completed"===(null===(t=null==e?void 0:e.appointmentStatus)||void 0===t?void 0:t.slug)})),this.getDeletedAppointmentsById=(e,t,i)=>kn(this,void 0,void 0,(function*(){const{appointment_id:t,user_id:a=Number(process.env.USERID)}=e;return this.shallowCopy(yield this.__repo.findAll({id:t},{include:[{as:"availableDoctor",include:{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:it,required:!1,where:{deleted_at:null}},model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:it,required:!1,where:{deleted_at:null}}]},i)).map((e=>{var t,i,a,n,o,s,l;const d=(null==e?void 0:e.available_doctor_id)?null===(i=null===(t=null==e?void 0:e.availableDoctor)||void 0===t?void 0:t.availableSpeciality)||void 0===i?void 0:i.speciality_id:null===(a=null==e?void 0:e.availableSpeciality)||void 0===a?void 0:a.speciality_id,_=(null==e?void 0:e.available_doctor_id)&&null!==(o=null===(n=null==e?void 0:e.availableDoctor)||void 0===n?void 0:n.doctor_id)&&void 0!==o?o:null,r=(null==e?void 0:e.available_doctor_id)?null===(s=null==e?void 0:e.availableDoctor)||void 0===s?void 0:s.facility_location_id:null===(l=null==e?void 0:e.availableSpeciality)||void 0===l?void 0:l.facility_location_id,c=(null==e?void 0:e.available_doctor_id)?`${_}_${d}`:null,p=r&&d?`${r}_${d}`:null;return{doctor_id:_,id:null==e?void 0:e.id,speciality_socket_id:p,socket_id:c,speciality_id:d}}))})),this.getFreeSlotsForAssignment=(e,t,i,a,n)=>{if(!a)return[];const o=[],s=new Date(e.start_date),l=new Date(e.end_date);for(;s.getTime()!==l.getTime()&&!(s.getTime()>l.getTime());){const e=new Date(s);e.setMinutes(e.getMinutes()+a),e.getTime()<=l.getTime()&&o.push({startDateTime:new Date(s),count:i}),s.setMinutes(s.getMinutes()+a)}if(t&&t.length)for(const e of t)if(!e.cancelled){const t=new Date(null==e?void 0:e.scheduled_date_time),i=new Date(null==e?void 0:e.scheduled_date_time);i.setMinutes(i.getMinutes()+(null==e?void 0:e.time_slots)),null==o||o.find(((a,n)=>{t.getTime()<=a.startDateTime.getTime()&&a.startDateTime.getTime()<i.getTime()&&null===(null==e?void 0:e.deleted_at)&&(o[n].count-=1)}))}return 0===n?o.map((e=>e.count===i)):o},this.getFreeSlotsWithOverBookingCheck=(e,t,i,a,n)=>{const o=[];let s=[];const l=new Date(t.start_date),d=new Date(t.end_date);for(;l.getTime()!==d.getTime()&&!(l.getTime()>d.getTime());){const e=new Date(l);e.setMinutes(e.getMinutes()+n),e.getTime()<=d.getTime()&&o.push({startDateTime:new Date(l),count:a}),l.setMinutes(l.getMinutes()+n)}if(i&&i.length)for(const e of i){const t=new Date(null==e?void 0:e.scheduled_date_time),i=new Date(null==e?void 0:e.scheduled_date_time);i.setMinutes(i.getMinutes()+(null==e?void 0:e.time_slots)),null==o||o.find(((a,n)=>{t.getTime()<=a.startDateTime.getTime()&&a.startDateTime.getTime()<i.getTime()&&null===(null==e?void 0:e.deleted_at)&&(o[n].count-=1)}))}return s=o.filter((t=>{if(t.count>0)for(let i=0;i<t.count;i++)if(new Date(e.start).getTime()<=new Date(t.startDateTime).getTime()&&new Date(t.startDateTime).getTime()<new Date(e.end).getTime())return t.startDateTime})),s},this.getFreeSlotsWithUnavailabilityChk=(e,t,i)=>t.length?(e.forEach(((a,n)=>{let o=!1;const s=new Date(a);s.setMinutes(s.getMinutes()+i),t.forEach(((e,t)=>{e[t+1]&&Number(e[t+1].startDate)<Number(s)&&Number(s)<=Number(e[t+1].endDate)&&(o=!0)}));for(const e of t)Number(e.start_date)<=Number(a)&&Number(a)<Number(e.end_date)&&(o=!0);o&&e.splice(n,0)})),e):e,this.getMaxTimezoneOffset=()=>{const e=new Date,t=new Date(e.getFullYear(),0,1),i=new Date(e.getFullYear(),6,1);return Math.max(t.getTimezoneOffset(),i.getTimezoneOffset())},this.getNoShowAppointments=e=>e.filter((e=>{var t;return!e.cancelled&&null===e.deleted_at&&"no_show"===(null===(t=null==e?void 0:e.appointmentStatus)||void 0===t?void 0:t.slug)})),this.getSpecialityIdByDoctor=e=>kn(this,void 0,void 0,(function*(){const{doctor_id:t,facility_location_id:i}=e,a=this.shallowCopy(yield this.__userFacilityRepo.findOne({user_id:t,facility_location_id:i,deleted_at:null,speciality_id:{[jn.ne]:null}}));if(!a||!Object.keys(a).length)throw un("NO_FIND_SPECIALIYT");return a.speciality_id})),this.getTimeSlotOfAssignment=e=>{const{start_date:t,end_date:i,no_of_doctors:a,no_of_slots:n}=e||{};let o=new Date(i).getTime()-new Date(t).getTime();if(o/=6e4,a&&n>0){const e=n/a;return Math.round(o/e)}return n>0?Math.round(o/n):0},this.getTodayAppointments=e=>e.filter((e=>{const t=(0,Cn.format)(new Date(e.scheduled_date_time),"MM-dd-yyyy"),i=(0,Cn.format)(new Date,"MM-dd-yyyy");if(!e.cancelled&&null===e.deleted_at&&t===i)return e})),this.getWaitingListCount=(e,t)=>kn(this,void 0,void 0,(function*(){const{case_ids:t,current_date:i}=e,a=this.shallowCopy(yield this.__kioskCaseRepo.findAll({id:{[jn.in]:t}},{attributes:["id"],include:[{model:Wt,as:"caseType",attributes:["id"]},{model:Et,as:"patient",attributes:["id"]}]})).length,n=this.shallowCopy(yield this.__casePatientSessionStatusesRepo.findAll({[jn.or]:[{slug:"walk_in"},{slug:"walk_in_not_seen"}]},{attributes:["id"]})).map((e=>e.id));return{case_patients:a,checked_in_patients:this.shallowCopy(yield this.__casePatientSessionRepo.findAll({status_id:{[jn.in]:n},date_of_check_in:i,deleted_at:null},{attributes:["id"],include:[{as:"case",attributes:["id"],model:ti,include:[{model:Et,as:"patient",attributes:["id"]},{model:Wt,as:"caseType",attributes:["id"]}]},{as:"sessionPatientNotSeenReason",attributes:["id"],model:hi}]})).length}})),this.resolveAppointmentsOnFreeSlots=(e,t,i,a,n)=>t.map((t=>{const o=Math.floor(t.time_slots/n);let s;const l=null==e?void 0:e.find(((i,a)=>{var l;if(!(null===(l=e[a+o-1])||void 0===l?void 0:l.startDateTime))return null;const d=new Date(e[a+o-1].startDateTime);d.setMinutes(d.getMinutes()+n);let _=d.getTime()-i.startDateTime.getTime();return _/=6e4,_===t.time_slots?(s=t,e.splice(a,o),i):void 0}));return[[l&&s&&Object.keys(s)?{available_doctor_id:i,available_speciality_id:a,case_id:null==s?void 0:s.case_id,case_type_id:null==s?void 0:s.case_type_id,date_list_id:null==s?void 0:s.date_list_id,patient_id:null==s?void 0:s.patient_id,priority_id:null==s?void 0:s.priority_id,scheduled_date_time:null==l?void 0:l.startDateTime,time_slots:null==s?void 0:s.time_slots,type_id:null==s?void 0:s.type_id}:null],[s]]})).flat(),this.resolveDoctorAppointmentOnFreeSlots=(e,t,i,a)=>t.map(((n,o)=>{const s=Math.floor(n.time_slots/a);let l;const d=null==e?void 0:e.find(((i,d)=>{var _;if(!(null===(_=e[d+s-1])||void 0===_?void 0:_.startDateTime))return null;const r=new Date(e[d+s-1].startDateTime);r.setMinutes(r.getMinutes()+a);let c=r.getTime()-i.startDateTime.getTime();return c/=6e4,c===n.time_slots?(l=n,e.splice(d,s),t.splice(o,1),i):void 0}));return[[d&&l&&Object.keys(l)?{available_doctor_id:i,case_id:null==l?void 0:l.case_id,case_type_id:null==l?void 0:l.case_type_id,date_list_id:null==l?void 0:l.date_list_id,patient_id:null==l?void 0:l.patient_id,priority_id:null==l?void 0:l.priority_id,scheduled_date_time:null==d?void 0:d.startDateTime,time_slots:null==l?void 0:l.time_slots,type_id:null==l?void 0:l.type_id}:null],[t]]})).flat(),this.sentEmailForAppointment=(e,t)=>kn(this,void 0,void 0,(function*(){const{email:t,caseId:i,caseType:a,appointmentId:n,appointmentStatus:o,confirmationStatus:s,timeSlot:l,scheduledDateTime:d,endDateTime:_,reason:r,patientLastName:c,emailTitle:p}=e,u=`${this.getFormatedEmailBody("createAppointment",{caseId:i,caseType:a,appointmentId:n,appointmentStatus:o,confirmationStatus:s,timeSlot:l,scheduledDateTime:d,endDateTime:_,reason:r,patientLastName:c})}`;yield this.__http.post(`${process.env.LAMBDA_URL}/development/email/generate-email-for-single-user`,{email:t,emailTitle:p,content:u},{})})),this.sentEmailForMultipleAppointment=(e,t)=>kn(this,void 0,void 0,(function*(){for(const t of e){const{email:e,caseId:i,caseType:a,appointmentId:n,appointmentStatus:o,confirmationStatus:s,timeSlot:l,scheduledDateTime:d,endDateTime:_,reason:r,patientLastName:c,emailTitle:p}=t,u=`${this.getFormatedEmailBody("createAppointment",{caseId:i,caseType:a,appointmentId:n,appointmentStatus:o,confirmationStatus:s,timeSlot:l,scheduledDateTime:d,endDateTime:_,reason:r,patientLastName:c})}`;yield this.__http.post(`${process.env.LAMBDA_URL}/development/email/generate-email-for-single-user`,{email:e,emailTitle:p,content:u},{})}})),this.updateAppointmentStatusForSuperAdmin=(e,t,i)=>kn(this,void 0,void 0,(function*(){const{foundAppointment:a,currentDateTime:n,visitStatuses:o,id:s,arrivedStatus:l,userId:d}=e,_={appointment_id:a.id,case_id:a.case_id,trigger_socket:!0,status_id:null==o?void 0:o.find((e=>"in_session"===e.slug)).id},r={headers:{Authorization:t}};try{const{status:e}=this.shallowCopy(yield this.__http.put(`${process.env.KIOSK_URL}case-patient-session`,_,r));if(200!==e)throw un("ERROR_WHILE_UPDATING_STATUS")}catch(e){throw yield this.updateAppointmentToPreviosStart(i),e}try{yield this.__repo.update(s,{evaluation_date_time:n?new Date(n):new Date,status_id:l.id,updated_by:d});const e=yield this.getAppointmentById({appointment_id:[s],user_id:d},t);return this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:e,action_point:"updated"},r),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:[s]},r),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments`,{},r),[{appointment:yield this.__repo.findOne({id:a.id},{include:{as:"availableDoctor",model:ot,required:!1,where:{deleted_at:null}}})}]}catch(e){throw yield this.updateAppointmentToPreviosStart(i,!0),e}})),this.updateAppointmentToPreviosStart=(e,t)=>kn(this,void 0,void 0,(function*(){const{id:i,evaluation_date_time:a,date_list_id:n,available_doctor_id:o,scheduled_date_time:s,status_id:l,time_slots:d,updated_at:_,updated_by:r}=e;if(yield this.__repo.update(i,{date_list_id:n,evaluation_date_time:a,available_doctor_id:o,scheduled_date_time:s,status_id:l,time_slots:d,updated_at:_,updated_by:r}),t){const{patientSessions:t}=e||{};if(t){const{id:e,status_id:i}=t;yield this.__casePatientSessionRepo.update(e,{status_id:i})}}return null})),this.checkErrorMultipleCptAppointments=(e,t,i,a,n)=>kn(this,void 0,void 0,(function*(){if(!e){if(null==t?void 0:t.length)return"Created new appointment";{let e="";throw n.specialityVisitType[0].is_multiple_same_day?(e+="Unable to create appointment",e+=a?" due to no provider assignment found at the given time.":" due to no speciality assignment found at the given time."):e+="Please select multiple on same day checkbox in specialty master to create appointment",e}}const o=t.map((e=>e.cptCodes)),s=yield this.__billingCodesRepo.findAll({id:o}),l=yield this.__billingCodesRepo.findAll({id:e||[]});if(!n.specialityVisitType[0].is_multiple_same_day){if(1==(null==e?void 0:e.length)&&t.length&&e.length==t.length||!n.is_multiple_visit&&e.length>1&&1==t.length){let e="";e+="Created new appointments for ";for(const[t,i]of l.entries())e+=i.name.toString(),t!=l.length-1&&(l.length-2==t?e+=" and ":e+=", ");return e+=".",e}if((null==e?void 0:e.length)>t.length){let i="";if(!o.length){i+="Please select multiple on same day checkbox in specialty master to create appointments for ";for(const[a,n]of l.entries())a>=t.length&&(i+=n.name.toString(),a!=e.length-1&&(e.length-2==a?i+=" and ":i+=", "));throw i+=".",i}i+="Created new appointment for ";for(const[e,t]of s.entries())i+=t.name.toString(),e!=s.length-1&&(s.length-2==e?i+=" and ":i+=", ");i+=". Please select multiple on same day checkbox in specialty master to create appointments for ";for(const[a,n]of l.entries())a>=t.length&&(i+=n.name.toString(),a!=e.length-1&&(e.length-2==a?i+=" and ":i+=", "));throw i}}if(!n.is_multiple_visit&&n.specialityVisitType[0].allow_multiple_cpt_codes&&(null==o?void 0:o.length)){const e=yield this.__billingCodesRepo.findAll({id:o[0]});if(e.length){let t="";t+="Created new appointment for ";for(const[i,a]of e.entries())t+=a.name.toString(),i!=e.length-1&&(e.length-2==i?t+=" and ":t+=", ");return t+=".",t}}if((null==e?void 0:e.length)&&t.length&&e.length==t.length){let e="";e+="Created new appointments for ";for(const[t,i]of s.entries())e+=i.name.toString(),t!=s.length-1&&(s.length-2==t?e+=" and ":e+=", ");return e+=".",e}if((null==e?void 0:e.length)>t.length){if(i){let i="";if(o.length){i+="Created new appointment for ";for(const[e,t]of s.entries())i+=t.name.toString(),e!=s.length-1&&(s.length-2==e?i+=" and ":i+=", ")}l.length&&o.length&&(i+=" but was "),o.length?i+="unable":i+="Unable",i+=" to create appointment for ";for(const[a,n]of l.entries())a>=t.length&&(i+=n.name.toString(),a!=e.length-1&&(e.length-2==a?i+=" and ":i+=", "));throw i+=a?" due to no provider assignment found at the given time.":" due to no speciality assignment found at the given time.",i}{let i="Updated Successfully ";if(o.length){i+="and created new appointment for ";for(const[e,t]of s.entries())i+=t.name.toString(),e!=s.length-1&&(s.length-2==e?i+=" and ":i+=", ");i+=" "}i+="but was unable to create appointment for ";for(const[a,n]of l.entries())a>=t.length&&(i+=n.name.toString(),a!=e.length-1&&(e.length-2==a?i+=" and ":i+=", "));throw i+=a?" due to no provider assignment found at the given time.":" due to no speciality assignment found at the given time.",i}}})),this.throwErrorOnInitialSlotNotAvailable=(e,t)=>kn(this,void 0,void 0,(function*(){if(!e){let e="";throw e+="Unable to create appointment",e+=t?" due to no provider assignment found at the given time.":" due to no speciality assignment found at the given time.",e}const i=yield this.__billingCodesRepo.findAll({id:e});let a="Unable to create appointment ";e.length&&(a+="for ");for(const[e,t]of i.entries())a+=t.name.toString(),e!=i.length-1&&e!=i.length-1&&(i.length-2==e?a+=" and ":a+=", ");throw a+=t?" due to no provider assignment found at the given time.":" due to no speciality assignment found at the given time.",a})),this.getNewResponseforUpdateApis=(e,t)=>kn(this,void 0,void 0,(function*(){let i=this.shallowCopy(yield this.__repo.findAll({id:e,deleted_at:null},{include:[{as:"availableDoctor",include:[{as:"doctor",attributes:{exclude:["password"]},include:{as:"userBasicInfo",attributes:["id","first_name","last_name","middle_name","profile_pic","user_id"],model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:{model:ue,as:"speciality",required:!1,where:Object.assign({deleted_at:null},t&&{id:t})},model:it,required:!1,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:[{model:ue,as:"speciality",required:!1,where:{deleted_at:null,id:t}},{model:Oe,as:"facilityLocation",required:!1,include:{model:Ut,as:"facility",required:!1}}],model:it,required:!1,where:{deleted_at:null}},{as:"case",attributes:["id"],model:ti,include:[{model:ni,as:"caseStatus",attributes:["id","name"],required:!1,where:{deleted_at:null}},{model:Wt,as:"caseType",attributes:["id","name"],required:!1,where:{deleted_at:null}}]},{model:Et,as:"patient",required:!1,where:{deleted_at:null}},{model:g,as:"appointmentStatus",required:!1,where:{deleted_at:null}},{model:Ui,as:"physicianClinic",attributes:["id","clinic_id","clinic_locations_id","physician_id"],required:!1,where:{deleted_at:null},include:[{model:Ii,as:"physician",attribute:["id","first_name","last_name","middle_name","cell_no","email","npi_no","license_no"],required:!1,where:{deleted_at:null}},{model:Mi,as:"clinic",required:!1,where:{deleted_at:null}},{model:xi,as:"clinicLocation",required:!1,where:{deleted_at:null}}]},{model:le,as:"technician",required:!1,attributes:["id","email"],include:{model:Ce},where:{deleted_at:null}},{model:le,as:"readingProvider",required:!1,attributes:["id","email"],include:{model:Ce},deleted_at:null},{model:gi,as:"transportations",required:!1,where:{deleted_at:null}},{model:Ni,as:"appointmentCptCodes",required:!1,where:{deleted_at:null},include:{model:Oi,as:"billingCode",required:!1,where:{deleted_at:null}}},{as:"appointmentType",attributes:["id","name","slug"],include:{as:"specialityVisitType",model:Y,where:{speciality_id:{[jn.eq]:t}}},model:J,required:!1,where:{deleted_at:null}},{as:"patientSessions",include:{as:"visitStatus",model:Pt,required:!1,where:{deleted_at:null}},model:B,required:!1,where:{deleted_at:null}}],order:[["scheduled_date_time","ASC"]]}));return i=i.map((e=>{var t,i,a,n,o,s,l,d,_,r;if(e.appointmentVisit=null,e.availableDoctor){let n=Object.assign({id:null===(t=e.availableDoctor.doctor)||void 0===t?void 0:t.id},null===(i=e.availableDoctor.doctor)||void 0===i?void 0:i.userBasicInfo);e.availableDoctor.doctor=n,null===(a=e.availableDoctor)||void 0===a||delete a.doctor.userBasicInfo}if(e.physicianClinic){const t=e.physicianClinic?{physician:(null===(n=e.physicianClinic)||void 0===n?void 0:n.physician)?Object.assign(Object.assign(Object.assign({clinic_location_id:null===(s=null===(o=e.physicianClinic)||void 0===o?void 0:o.clinicLocation)||void 0===s?void 0:s.id,physician_clinic_id:null===(l=e.physicianClinic)||void 0===l?void 0:l.id},null===(d=e.physicianClinic)||void 0===d?void 0:d.clinic),null===(_=e.physicianClinic)||void 0===_?void 0:_.clinicLocation),null===(r=e.physicianClinic)||void 0===r?void 0:r.physician):null}:null;e.physicianClinic=t}return e.readingProvider&&(e.reading_provider=this.shallowCopy(e.readingProvider),delete e.readingProvider),e})),i})),this.checkIsThisTimeFreeOrNot=e=>kn(this,void 0,void 0,(function*(){const t=[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[jn.gte]:e.appointmentEndTime},start_date:{[jn.lte]:e.startDateTime}}},...e.specialityId&&[{as:"availableSpeciality",model:it,required:!0,where:{speciality_id:e.specialityId,deleted_at:null}}]];let i;i=e.doctorId?this.shallowCopy(yield this.__availableDoctorRepo.findOne({deleted_at:null,doctor_id:e.doctorId},{include:t})):this.shallowCopy(yield this.__availableSpecialityRepo.findOne({speciality_id:e.specialityId,deleted_at:null},{include:[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[jn.gte]:e.appointmentEndTime},start_date:{[jn.lte]:e.startDateTime}}}]}));const a=[];e.doctorId&&a.push({as:"availableDoctor",model:ot,required:!0,where:{deleted_at:null,doctor_id:e.doctorId}});const n=this.shallowCopy(yield this.__repo.findAll(Object.assign(Object.assign(Object.assign({cancelled:!1,deleted_at:null,pushed_to_front_desk:!1},!e.doctorId&&{available_doctor_id:null}),e.doctorId&&{available_doctor_id:{[jn.not]:null}}),{[jn.and]:[ra.where(ra.fn("datediff",this.convertDateToLocal(new Date(e.startDateTime),e.time_zone),ra.col("scheduled_date_time")),{[jn.and]:[{[jn.gt]:-1},{[jn.lt]:1}]})]}),{include:[{as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null,speciality_id:e.specialityId}},...a]})).map((t=>{if(t.availableSpeciality.speciality_id==e.specialityId)return new Date(t.scheduled_date_time).toISOString()})),o=Bn.countBy(n),s=new Date(e.startDateTime),l=new Date(s);if(new Date(null==i?void 0:i.dateList[0].end_date).getTime()<l.setMinutes(l.getMinutes()+e.desiredTimeSlot))throw un("NO_ASSIGNMENT_FOUND");if(s.toISOString()in o&&e.speciality.over_booking<o[s.toISOString()])throw un("NO_SLOTS_REMAINING")})),this.__http=new C,this.__getKioskCreationSource={1:"Web",2:"Kiosk",3:"Health App"},this.__appointmentsHistoryChecks={completed:"getCompletedAppointments",no_show:"getNoShowAppointments",cancel:"getCancelAppointments",today:"getTodayAppointments"},this.__formatDatesCriteriaMethod={false:"formatDatesCriteriaWithOutEndDate",true:"formatDatesCriteriaWithEndDate"},this.__genericAppointmentListing={SCHEDULED:"appointmentListQuery",CANCELLED:"cancelledListQuery",RESCHEDULED:"rescheduledListQuery",PATIENT:"patientAppointmentQuery"},this.__getAppointmentForAssignments={dateList:"appointmentWithDateListId",doctor:"appointmentWithAvailableDoctorId",speciality:"appointmentWithAvailableSpecialityId"},this.__getAssigmentMethod={doctor:"__availableDoctorRepo",speciality:"__availableSpecialityRepo"},this.__getCount={appointmentList:"getWaitingListCount",waitingList:"getApointmentListCountV1"},this.__getSpecialityEnvironment={accu:"ACCU_URL",chiro:"CHIRO_URL",pt:"PT_URL"},this.__getSpecialityName={accu:"ACCU_URL",chiro:"CHIRO_URL",pt:"PT_URL"}}};Un=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object])],Un);ra.Op;let qn=class extends bn{constructor(e,t){super(),this.__repo=e,this.http=t,this.getAll=e=>{return t=this,i=void 0,n=function*(){return this.__repo.findAll()},new((a=void 0)||(a=Promise))((function(e,o){function s(e){try{d(n.next(e))}catch(e){o(e)}}function l(e){try{d(n.throw(e))}catch(e){o(e)}}function d(t){var i;t.done?e(t.value):(i=t.value,i instanceof a?i:new a((function(e){e(i)}))).then(s,l)}d((n=n.apply(t,i||[])).next())}));var t,i,a,n},this.__http=new t}};qn=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object])],qn);var Fn=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};const Mn=ra.Op;let $n=class extends bn{constructor(e,t,i,a,n,o,s,l,d,_,r,c,p,u,m,y,h){super(),this.__repo=e,this.__availableSpecialityRepo=t,this.__facilityLocationRepo=i,this.__userBasicInfoRepo=a,this.__specialityRepo=n,this.__recurrenceEndingCriteriaRepo=o,this.__dayListsRepo=s,this.__recurrenceDayListRepo=l,this.__userRepo=d,this.__unAvailableDoctorRepo=_,this.__availableDoctorNotificationRepo=r,this.__userFacilityRepo=c,this.__rolesRepo=p,this.__modelHasRolesRepo=u,this.__recurrenceDateListRepo=m,this.__appointmentRepo=y,this.http=h,this.automate=(e,t,i)=>Fn(this,void 0,void 0,(function*(){var t,a;const{facility_location_ids:n,doctor_ids:o,start_date:s,number_of_weeks:l,user_id:d=Number(process.env.USERID)}=e,_=new Date(s),r=new Date(s),c=o.length*n.length,p=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,facility_location_id:{[Mn.in]:n},speciality_id:{[Mn.ne]:null},user_id:{[Mn.in]:o}},{include:[{as:"users",include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}},{as:"speciality",model:ue,required:!1,where:{deleted_at:null}}]}));if(c!==p.length)throw un("NO_FACILITY_LOCATION_FOUND");const u=this.shallowCopy(yield this.__userBasicInfoRepo.findOne({deleted_at:null,user_id:d}));if(!u||!Object.keys(u).length)throw un("LOGGED_IN_NOT_FOUND");this.filterUnique(p.map((e=>e.user_id))),p.map((e=>e.speciality.time_slot)),_.setHours(0),_.setMinutes(0),_.setSeconds(0),_.setMilliseconds(0),_.setMinutes(_.getMinutes()-(new Date).getTimezoneOffset());const m=this.getEndDate(_,l),y=this.getLastDate(_,l),h=this.shallowCopy(yield this.__repo.findAll({available_speciality_id:null,doctor_id:{[Mn.in]:o},facility_location_id:{[Mn.in]:n}},{include:{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[Mn.lt]:_},start_date:{[Mn.gte]:y}}}}));if(!h||!h.length)throw un("NO_HISTORY_FOUND");const f=null==h?void 0:h.map((e=>{const{dateList:t}=e||{};return null==t?void 0:t.map((t=>({doctor_id:e.doctor_id,end_date:t.end_date,facility_location_id:e.facility_location_id,no_of_slots:t.no_of_slots,start_date:t.start_date,supervisor_id:e.supervisor_id})))})).flat().sort(((e,t)=>new Date(e.start_date).getTime()-new Date(t.start_date).getTime())),v=new Date(null===(t=f[0])||void 0===t?void 0:t.start_date).toISOString().slice(0,10),g=new Date(null===(a=f[0])||void 0===a?void 0:a.end_date).toISOString().slice(0,10),b=new Date(y).toISOString().slice(0,10);if(!Rn(b).isBetween(v,g,null,"[]"))throw un("NO_HISTORY_FOUND");const S=f.map((e=>{const{start_date:t,end_date:i}=e||{};return{end_date:new Date(i).toISOString().slice(11,-1),start_date:new Date(t).toISOString().slice(11,-1)}})),I=this.checkDoctorTimingSychronization(S,"start_date"),D=this.checkDoctorTimingSychronization(S,"end_date");if(!I||!D)throw un("NO_ASSIGNMENT_PROPOSED");const w=f.map((e=>new Date(e.start_date))),O=this.getPastPattern(y,m,w),T=O.map((e=>e[0]));if(!this.isPatternSychronized(O))throw un("NO_ASSIGNMENT_PROPOSED");const A=new Date(f[0].end_date);A.setDate(r.getDate()),A.setFullYear(r.getFullYear()),A.setMonth(r.getMonth());const N=new Date(f[0].start_date);N.setDate(r.getDate()),N.setFullYear(r.getFullYear()),N.setMonth(r.getMonth());const C=this.formatDatesForAutomation(T,A,m,N),R=this.getUniqueAvailableDoctors(f),E=C.map((e=>R.map((t=>({doctor_id:t.doctor_id,end_date:e.end_date,facility_location_id:t.facility_location_id,no_of_slots:t.no_of_slots,start_date:e.start_date,supervisor_id:t.supervisor_id}))))).flat(),L=this.shallowCopy(yield this.__repo.findAll({deleted_at:null,doctor_id:{[Mn.in]:o}},{include:{as:"dateList",model:qe,required:!0,where:{deleted_at:null,[Mn.or]:[{end_date:{[Mn.gt]:_},start_date:{[Mn.lt]:m}},{start_date:{[Mn.lt]:m,[Mn.gte]:_}}]}}})).map((e=>{const{dateList:t}=e||{};return null==t?void 0:t.map((t=>({doctor_id:e.doctor_id,end_date:t.end_date,facility_location_id:e.facility_location_id,no_of_slots:t.no_of_slots,start_date:t.start_date,supervisor_id:e.supervisor_id})))})).flat();let k=L&&L.length?this.getNonOverlappingAvailablities(E,L):E;const P=this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({[Mn.or]:[{approval_status:1,deleted_at:null,doctor_id:{[Mn.in]:o},end_date:{[Mn.gte]:m},start_date:{[Mn.lte]:_}},{approval_status:1,deleted_at:null,doctor_id:{[Mn.in]:o},start_date:{[Mn.gte]:_,[Mn.lte]:m}}]}));if(k=P&&P.length?this.getNonOverlappingAvailablities(k,P):k,!k||!k.length)throw un("NO_ASSIGNMENT_PROPOSED");const j=this.getUniqueAvailableDoctors(k),B=this.getUniqueDatesAvailableDoctors(k),U=this.shallowCopy(yield this.__repo.bulkCreate([...j],i)).map((e=>e.id)),q=B.map((e=>U.map((t=>({available_doctor_id:t,end_date:e.end_date,no_of_slots:e.no_of_slots,start_date:e.start_date}))))).flat();return this.__recurrenceDateListRepo.bulkCreate([...q],i)})),this.automateV1=(e,t,i)=>Fn(this,void 0,void 0,(function*(){var t,a;const{facility_location_ids:n,doctor_ids:o,start_date:s,number_of_weeks:l,speciality_ids:d,user_id:_=Number(process.env.USERID)}=e,r=new Date(s),c=new Date(s),p=this.shallowCopy(yield this.__userBasicInfoRepo.findOne({deleted_at:null,user_id:_}));if(!p||!Object.keys(p).length)throw un("LOGGED_IN_NOT_FOUND");r.setHours(0),r.setMinutes(0),r.setSeconds(0),r.setMilliseconds(0),r.setMinutes(r.getMinutes()-(new Date).getTimezoneOffset());const u=this.getEndDate(r,l),m=this.getLastDate(r,l),y=this.shallowCopy(yield this.__repo.findAll({deleted_at:null,doctor_id:{[Mn.in]:o},facility_location_id:{[Mn.in]:n}},{include:[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[Mn.lte]:r},start_date:{[Mn.gte]:m}}},{as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null,speciality_id:{[Mn.in]:d}}}]}));if(!y||!y.length)throw un("NO_HISTORY_FOUND");const h=null==y?void 0:y.map((e=>{const{dateList:t}=e||{};return null==t?void 0:t.map((t=>({doctor_id:e.doctor_id,end_date:t.end_date,facility_location_id:e.facility_location_id,no_of_slots:t.no_of_slots,start_date:t.start_date,supervisor_id:e.supervisor_id})))})).flat().sort(((e,t)=>new Date(e.start_date).getTime()-new Date(t.start_date).getTime())),f=new Date(null===(t=h[0])||void 0===t?void 0:t.start_date).toISOString().slice(0,10),v=new Date(null===(a=h[0])||void 0===a?void 0:a.end_date).toISOString().slice(0,10),g=new Date(m).toISOString().slice(0,10);if(!Rn(g).isBetween(f,v,null,"[]"))throw un("NO_HISTORY_FOUND");const b=h.map((e=>{const{start_date:t,end_date:i}=e||{};return{end_date:new Date(i).toISOString().slice(11,-1),start_date:new Date(t).toISOString().slice(11,-1)}})),S=this.checkDoctorTimingSychronization(b,"start_date"),I=this.checkDoctorTimingSychronization(b,"end_date");if(!S||!I)throw un("NO_ASSIGNMENT_PROPOSED");const D=h.map((e=>new Date(e.start_date))),w=this.getPastPattern(m,u,D),O=w.map((e=>e[0]));if(!this.isPatternSychronized(w))throw un("NO_ASSIGNMENT_PROPOSED");const T=new Date(h[0].end_date);T.setDate(c.getDate()),T.setFullYear(c.getFullYear()),T.setMonth(c.getMonth());const A=new Date(h[0].start_date);A.setDate(c.getDate()),A.setFullYear(c.getFullYear()),A.setMonth(c.getMonth());const N=this.formatDatesForAutomation(O,T,u,A),C=this.getUniqueAvailableDoctors(h),R=N.map((e=>C.map((t=>({doctor_id:t.doctor_id,end_date:e.end_date,facility_location_id:t.facility_location_id,no_of_slots:t.no_of_slots,start_date:e.start_date,supervisor_id:t.supervisor_id}))))).flat(),E=this.filterNonNull(null==y?void 0:y.map((e=>{const{availableSpeciality:t}=e||{};if(t)return{end_after_occurences:null==t?void 0:t.end_after_occurences,end_date:T,end_date_for_recurrence:null==t?void 0:t.end_date_for_recurrence,facility_location_id:null==t?void 0:t.facility_location_id,no_of_doctors:null==t?void 0:t.no_of_doctors,no_of_slots:null==t?void 0:t.no_of_slots,number_of_entries:null==t?void 0:t.number_of_entries,recurrence_ending_criteria_id:null==t?void 0:t.recurrence_ending_criteria_id,speciality_id:null==t?void 0:t.speciality_id,start_date:r}}))),L=this.getUniqueAvailableSpecialities(E),k=this.shallowCopy(yield this.__availableSpecialityRepo.bulkCreate([...L],i)),P=this.shallowCopy(yield this.__repo.findAll({deleted_at:null,doctor_id:{[Mn.in]:o}},{include:{as:"dateList",model:qe,required:!0,where:{deleted_at:null,[Mn.or]:[{end_date:{[Mn.gt]:r},start_date:{[Mn.lt]:u}},{start_date:{[Mn.lt]:u,[Mn.gte]:r}}]}}})).map((e=>{const{dateList:t}=e||{};return null==t?void 0:t.map((t=>({doctor_id:e.doctor_id,end_date:t.end_date,facility_location_id:e.facility_location_id,no_of_slots:t.no_of_slots,start_date:t.start_date,supervisor_id:e.supervisor_id})))})).flat();let j=P&&P.length?this.getNonOverlappingAvailablities(R,P):R;const B=this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({[Mn.or]:[{approval_status:1,deleted_at:null,doctor_id:{[Mn.in]:o},end_date:{[Mn.gte]:u},start_date:{[Mn.lte]:r}},{approval_status:1,deleted_at:null,doctor_id:{[Mn.in]:o},start_date:{[Mn.gte]:r,[Mn.lte]:u}}]}));if(j=B&&B.length?this.getNonOverlappingAvailablities(j,B):j,!j||!j.length)throw un("NO_ASSIGNMENT_PROPOSED");const U=this.getUniqueAvailableDoctors(j),q=k.map((e=>Object.assign(Object.assign({},U[0]),{available_speciality_id:e.id,is_provider_assignment:!0}))),F=this.getUniqueDatesAvailableDoctors(j),M=this.shallowCopy(yield this.__repo.bulkCreate([...q],i)).map((e=>e.id)),$=F.map((e=>M.map((t=>({available_doctor_id:t,end_date:e.end_date,no_of_slots:e.no_of_slots,start_date:e.start_date}))))).flat();return this.__recurrenceDateListRepo.bulkCreate([...$],i)})),this.delete=(e,t,i)=>Fn(this,void 0,void 0,(function*(){const{available_doctor_id:a,date_list_id:n,user_id:o=Number(process.env.USERID)}=e,s=this.shallowCopy(yield this.__recurrenceDateListRepo.findAll({available_doctor_id:a,deleted_at:null},{include:{as:"availableDoctor",model:ot,required:!0,where:{deleted_at:null}}}));if(!s||!s.length)throw un("INVALID_ASSIGNMENT_ID");let l=[];for(const e of s){const t=this.shallowCopy(yield this.__appointmentRepo.findAll({available_doctor_id:a,cancelled:0,deleted_at:null,pushed_to_front_desk:0,scheduled_date_time:{[Mn.between]:[new Date(e.start_date),new Date(e.end_date)]}}));l=[...l,...t]}const d=!n;return this[this.__deleteDoctorMethod[`${d}`]]({_authorization:t,appointmentAgainstDoctor:l,availableDoctorId:a,dateListId:n,transaction:i,userId:o})})),this.getAppointments=(e,t)=>Fn(this,void 0,void 0,(function*(){const{available_doctor_id:t}=e,i=this.shallowCopy(yield this.__repo.findById(t,{include:[{as:"doctor",attributes:{exclude:["password"]},include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}},{as:"appointments",include:{as:"patient",model:Et,required:!1,where:{deleted_at:null}},model:He,required:!1,where:{deleted_at:null}}]})),{appointments:a,doctor:{userBasicInfo:n}}=i;return a.map((e=>{var t,i,a,o;return{chart_no:"",doctor_first_name:null==n?void 0:n.first_name,doctor_last_name:null==n?void 0:n.last_name,doctor_middle_name:null==n?void 0:n.middle_name,first_name:null===(t=null==e?void 0:e.patient)||void 0===t?void 0:t.first_name,id:e.id,last_name:null===(i=null==e?void 0:e.patient)||void 0===i?void 0:i.last_name,middle_name:null===(a=null==e?void 0:e.patient)||void 0===a?void 0:a.middle_name,patient_id:null===(o=null==e?void 0:e.patient)||void 0===o?void 0:o.id,scheduled_date_time:null==e?void 0:e.scheduled_date_time,time_slots:null==e?void 0:e.time_slots}}))||[]})),this.getAvailabilities=(e,t)=>Fn(this,void 0,void 0,(function*(){const{facility_location_id:t,speciality_id:i,start_date:a,end_date:n}=e,o=new Date(a),s=new Date(n),l=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,facility_location_id:t,speciality_id:i})).map((e=>e.user_id));return l&&l.length?this.__repo.findAll({deleted_at:null,doctor_id:{[Mn.in]:l},facility_location_id:t},{include:[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,[Mn.or]:[{end_date:{[Mn.gt]:o},start_date:{[Mn.lte]:o}},{start_date:{[Mn.lt]:s,[Mn.gte]:o}}]}},{as:"doctor",attributes:{exclude:["password"]},include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}}]}):[]})),this.getDoctorAssignments=(e,t)=>Fn(this,void 0,void 0,(function*(){const{end_date:t,start_date:i,facility_location_ids:a,doctor_ids:n,user_id:o=Number(process.env.USERID)}=e,s=new Date(i),l=new Date(t),d=this.shallowCopy(yield this.__repo.findAll({deleted_at:null,doctor_id:{[Mn.in]:n},facility_location_id:{[Mn.in]:a}},{include:[{as:"facilityLocations",include:{as:"facility",model:Ut,required:!1,where:{deleted_at:null}},model:Oe,required:!1,where:{deleted_at:null}},{as:"doctor",attributes:{exclude:["password","remember_token","reset_key"]},include:[{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},{as:"userFacilities",model:Ie,required:!1,where:{deleted_at:null}},{as:"medicalIdentifiers",model:Mt,attributes:["id"],include:{as:"billingTitle",attributes:["name"],model:xt,where:{deleted_at:null}},where:{deleted_at:null}}],model:le,required:!1,where:{deleted_at:null}},{as:"dateList",include:{as:"appointments",model:He,required:!1,where:{cancelled:0,deleted_at:null,evaluation_date_time:null,pushed_to_front_desk:0,scheduled_date_time:{[Mn.between]:[s,l]}}},model:qe,required:!0,where:{[Mn.or]:[{deleted_at:null,end_date:{[Mn.gt]:s},start_date:{[Mn.lte]:s}},{deleted_at:null,[Mn.and]:[{start_date:{[Mn.gte]:s}},{start_date:{[Mn.lt]:l}}]}]}}]})),_=this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({[Mn.or]:[{[Mn.and]:[{start_date:{[Mn.lte]:s}},{end_date:{[Mn.gte]:s}},{doctor_id:{[Mn.in]:n}},{deleted_at:null}]},{[Mn.and]:[{start_date:{[Mn.gte]:s}},{start_date:{[Mn.lte]:l}},{doctor_id:{[Mn.in]:n}},{deleted_at:null}]}]})),r=this.shallowCopy(yield this.__userRepo.findOne({id:o,deleted_at:null},{include:[{as:"colorCodes",include:{as:"type",model:Qe,required:!1,where:{deleted_at:null,slug:"facility_location"}},model:Ze,required:!1,where:{deleted_at:null}}]}));if(!r||!Object.keys(r).length)throw un("NO_RECORD_FOUND");const{colorCodes:c}=r;return{assignments:d.map((e=>{var t,i;const a=null!==(i=null===(t=null==c?void 0:c.find((t=>t.object_id===e.facility_location_id)))||void 0===t?void 0:t.code)&&void 0!==i?i:"#9d9d9d";return Object.assign({facility_color:a},e)})),unavailabilities:_}})),this.getDoctorAssignmentsV1=(e,t)=>Fn(this,void 0,void 0,(function*(){const{end_date:t,start_date:i,facility_location_ids:a,doctor_ids:n,speciality_ids:o,user_id:s=Number(process.env.USERID)}=e,l=new Date(i),d=new Date(t),_=this.shallowCopy(yield this.__repo.findAll({deleted_at:null,doctor_id:{[Mn.in]:n},facility_location_id:{[Mn.in]:a}},{include:[{as:"facilityLocations",include:{as:"facility",model:Ut,required:!1,where:{deleted_at:null}},model:Oe,required:!1,where:{deleted_at:null}},{model:it,as:"availableSpeciality",required:!(!o||!o.length),where:{deleted_at:null},include:{model:ue,as:"speciality",required:!(!o||!o.length),where:Object.assign({deleted_at:null},o&&{id:o})}},{as:"doctor",include:[{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},{model:Mt,attributes:["id"],required:!1,include:{as:"billingTitle",required:!1,attributes:["id","name"],model:xt,where:{deleted_at:null}},where:{deleted_at:null}},{as:"userFacilities",model:Ie,required:!1,where:{deleted_at:null}}],model:le,required:!1,where:{deleted_at:null},attributes:{exclude:["password","remember_token","reset_key"]}},{as:"dateList",include:{as:"appointments",model:He,required:!1,where:{cancelled:0,deleted_at:null,evaluation_date_time:null,pushed_to_front_desk:0,scheduled_date_time:{[Mn.between]:[l,d]}}},model:qe,required:!0,where:{[Mn.or]:[{deleted_at:null,end_date:{[Mn.gt]:l},start_date:{[Mn.lte]:l}},{deleted_at:null,[Mn.and]:[{start_date:{[Mn.gte]:l}},{start_date:{[Mn.lt]:d}}]}]}}]})),r=this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({[Mn.or]:[{[Mn.and]:[{start_date:{[Mn.lte]:l}},{end_date:{[Mn.gte]:l}},{doctor_id:{[Mn.in]:n}},{deleted_at:null}]},{[Mn.and]:[{start_date:{[Mn.gte]:l}},{start_date:{[Mn.lte]:d}},{doctor_id:{[Mn.in]:n}},{deleted_at:null}]}]})),c=this.shallowCopy(yield this.__userRepo.findOne({id:s,deleted_at:null},{include:[{as:"colorCodes",include:{as:"type",model:Qe,required:!1,where:{deleted_at:null,slug:"speciality"}},model:Ze,required:!1,where:{deleted_at:null}}]}));if(!c||!Object.keys(c).length)throw un("NO_RECORD_FOUND");const{colorCodes:p}=c;return{assignments:_.map((e=>{var t,i;const a=null!==(i=null===(t=null==p?void 0:p.find((t=>{var i;return t.object_id===(null===(i=e.availableSpeciality)||void 0===i?void 0:i.speciality_id)})))||void 0===t?void 0:t.code)&&void 0!==i?i:"#9d9d9d";return Object.assign({speciality_color:a},e)})),unavailabilities:r}})),this.getFilteredDoctor=(e,t)=>Fn(this,void 0,void 0,(function*(){const{end_date:t,start_date:i,facility_location_ids:a,user_id:n=Number(process.env.USERID),doctor_id:o}=e,s=new Date(i),l=new Date(t),d=this.__userRepo.getJoinClause("get_filtered_doctor"),_=this.shallowCopy(yield this.__userRepo.findOne({id:n,deleted_at:null},{include:d}));if(!_&&!Object.keys(_).length)throw un("NO_RECORD_FOUND");const r=this.__modelHasRolesRepo.getJoinClause("get_filtered_doctor"),c=this.shallowCopy(yield this.__modelHasRolesRepo.findOne({model_id:n},{include:r})),{role:{slug:p}}=c,{colorCodes:u}=_;let m;const y=this.__userFacilityRepo.getJoinClause("get_filtered_doctor"),h="super_admin"!==p?this.formatProjectionClauseForFilteredDoctor(o,a):this.formatProjectionClauseForFilteredDoctorWithFacilityLocationIds(a);m=this.shallowCopy(yield this.__userFacilityRepo.findAll(Object.assign({},h),{include:y}));const f=m.map((e=>e.user_id)),v=m.map((e=>{const{users:t,users:{userFacilities:i,userTimings:n,userBasicInfo:o}}=e,s=i.filter((e=>a.includes(e.facility_location_id)));let l,d="#9d9d9d";const _=s&&s.length?s.map((e=>{var t,i;return d=null!==(i=null===(t=null==u?void 0:u.find((t=>t.object_id===e.speciality_id)))||void 0===t?void 0:t.code)&&void 0!==i?i:"#9d9d9d",l=null==n?void 0:n.find((t=>t.facility_location_id===e.facility_location_id)),{color:d,facility_location_id:e.facility_location_id}})):[],r=Object.assign({},..._);return{doctor:{info:Object.assign({},o),specialities:r,user_timings:[l]},user_id:t.id}})),g=this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({approval_status:1,deleted_at:null,doctor_id:{[Mn.in]:f},end_date:{[Mn.gte]:l},start_date:{[Mn.lte]:s}}));return g&&g.length?null==g?void 0:g.filter((e=>null==v?void 0:v.find((t=>t.user_id===e.doctor_id)))):v})),this.getFreeSlotsOfDoctors=(e,t)=>Fn(this,void 0,void 0,(function*(){const{start_date:t,end_date:i,facility_location_ids:a,doctor_id:n,time_zone:o}=e,s=this.convertDateToLocal(new Date(t),o),l=new Date(i),d=Math.abs(o)/60;s.getDate()==l.getDate()&&s.getFullYear()==l.getFullYear()&&s.getMonth()==l.getMonth()?(l.setUTCDate(l.getDate()+1),o>=0?0!=o&&l.setUTCHours(24-d,o%60):l.setUTCHours(d,d%60)):o>0?o&&l.setUTCHours(24-d,o%60):(l.setDate(l.getDate()+1),l.setUTCHours(d,o%60));let _={};a&&(_={facility_location_id:{[Mn.in]:a}});const r=Object.assign({doctor_id:n},_),c=this.shallowCopy(yield this.__repo.findAll(Object.assign({},r),{include:{as:"dateList",model:qe,required:!0,where:{[Mn.or]:[{deleted_at:null,end_date:{[Mn.lt]:l},start_date:{[Mn.gte]:s}},{deleted_at:null,start_date:{[Mn.gte]:s,[Mn.lt]:l}}]}}}));if(!c||!c.length)throw un("PROVIDER_NOT_AVAILABLE");const p=c.map((e=>{const{dateList:t}=e,i=function(e,t){var i={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(i[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(a=Object.getOwnPropertySymbols(e);n<a.length;n++)t.indexOf(a[n])<0&&Object.prototype.propertyIsEnumerable.call(e,a[n])&&(i[a[n]]=e[a[n]])}return i}(e,["dateList"]);return null==t?void 0:t.map((e=>Object.assign(Object.assign({},i),{date_list_id:e.id,end_date:e.end_date,no_of_doctors:null==e?void 0:e.no_of_doctors,no_of_slots:null==e?void 0:e.no_of_slots,start_date:e.start_date})))})).flat(),u=this.shallowCopy(yield this.__userFacilityRepo.findOne({facility_location_id:{[Mn.in]:a},speciality_id:{[Mn.ne]:null},user_id:n},{include:{as:"speciality",model:ue,required:!1}}));if(!u||!Object.keys(u).length)throw un("PROVIDER_NOT_FOUND");const{speciality:m}=u;if(!m||!Object.keys(m).length)throw un("PROVIDER_IS_NOT_ASSIGNED_TO_ANY_SPECIALITY");let y,h=[];for(const e of p){const{id:t,start_date:i,end_date:a,doctor_id:n,no_of_slots:o}=e,s=new Date(i),l=new Date(a);y=(l.getTime()-s.getTime())/1e3/60/o;const d=this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({[Mn.or]:[{approval_status:!0,deleted_at:null,doctor_id:n,end_date:{[Mn.gt]:s},start_date:{[Mn.lte]:s}},{approval_status:!0,deleted_at:null,doctor_id:n,start_date:{[Mn.gte]:s,[Mn.lt]:l}}]})),_=this.shallowCopy(yield this.__appointmentRepo.findAll({available_doctor_id:t,deleted_at:null,scheduled_date_time:{[Mn.between]:[s,l]}},{order:[["scheduled_date_time","ASC"]]}));h=[...h,...this.getFreeSlotsTimings(e,_,m.over_booking+1,y,!0,d)].flat()}const f=[];for(const e of h){let t=0,i=new Date(e.slot_time);i=this.convertDateToLocal(new Date(e.slot_time),o);const a=i.toLocaleDateString("en-US",{year:"numeric",month:"2-digit",day:"2-digit"}),n=i.toLocaleTimeString();if(f.length){let i=!1;for(const o of f)o.date===a&&(i=!0,f[t].time.push({slot:n,facility_location_id:e.facility_location_id})),t+=1;if(!i){const t={};t.date=a,t.time=[],t.time.push({slot:n,facility_location_id:e.facility_location_id}),f.push(t)}}else{const t={};t.date=a,t.time=[],t.time.push({slot:n,facility_location_id:e.facility_location_id}),f.push(t)}}return{available_slots:f,duration:parseInt(y.toString(),0)}})),this.getMaunalDoctorsList=(e,t)=>Fn(this,void 0,void 0,(function*(){const{end_date:t,start_date:i,facility_location_id:a,speciality_id:n,user_id:o=Number(process.env.USERID)}=e,s=new Date(i),l=new Date(t),d=this.shallowCopy(yield this.__userRepo.findOne({id:o,deleted_at:null},{include:[{as:"colorCodes",include:{as:"type",model:Qe,required:!1,where:{deleted_at:null,slug:"facility_location"}},model:Ze,required:!1,where:{deleted_at:null}}]}));if(!d&&!Object.keys(d).length)throw un("NO_RECORD_FOUND");const _=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,facility_location_id:a,speciality_id:n},{include:{as:"users",include:[{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},{as:"userTimings",model:Le,required:!0,where:{deleted_at:null,facility_location_id:a,specialty_id:n}},{as:"medicalIdentifiers",model:Mt,attributes:["id"],include:{as:"billingTitle",attributes:["name"],model:xt,where:{deleted_at:null}},where:{deleted_at:null}}],model:le,required:!0,where:{deleted_at:null}}})).map((e=>{var t,i,a,n,o,s,l;return{email:null===(t=null==e?void 0:e.users)||void 0===t?void 0:t.email,speciality_id:null==e?void 0:e.speciality_id,user_id:null===(i=null==e?void 0:e.users)||void 0===i?void 0:i.id,user_info:null===(a=null==e?void 0:e.users)||void 0===a?void 0:a.userBasicInfo,provide_title:(null===(n=null==e?void 0:e.users)||void 0===n?void 0:n.medicalIdentifiers)?null===(l=null===(s=null===(o=null==e?void 0:e.users)||void 0===o?void 0:o.medicalIdentifiers)||void 0===s?void 0:s.billingTitle)||void 0===l?void 0:l.name:null}})),r=_.map((e=>e.user_id)),c=this.shallowCopy(yield this.__repo.findAll({deleted_at:null,doctor_id:{[Mn.in]:r},facility_location_id:a},{include:[{as:"facilityLocations",model:Oe,required:!1,where:{deleted_at:null}},{as:"dateList",model:qe,required:!0,where:{[Mn.or]:[{deleted_at:null,end_date:{[Mn.gt]:s},start_date:{[Mn.lte]:s}},{deleted_at:null,start_date:{[Mn.gte]:s,[Mn.lt]:l}}]}},{as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null,speciality_id:n}}]}));if(!c&&!c.length)throw un("PROVIDER_NOT_AVAILABLE");const p=c.map((e=>{const{dateList:t}=e;return null==t?void 0:t.map((t=>Object.assign(Object.assign({},e),{date_list_id:t.id,end_date:t.end_date,no_of_slots:t.no_of_slots,start_date:t.start_date})))})).flat(),u=this.shallowCopy(yield this.__rolesRepo.findOne({slug:"super_admin"},{include:{as:"modelRoles",model:je,required:!1,where:{model_id:o}}})),{modelRoles:m}=u,y=m.length,h=this.shallowCopy(yield this.__userFacilityRepo.findAll({user_id:o,deleted_at:null})),{colorCodes:f}=d,v=p.map((e=>{var t,i;if(!h.find((t=>t.facility_location_id===e.facility_location_id))&&!y)throw un("USER_NOT_ALLOWED");const a=null!==(i=null===(t=null==f?void 0:f.find((t=>t.object_id===e.facility_location_id)))||void 0===t?void 0:t.code)&&void 0!==i?i:"#9d9d9d";return{date_list_id:e.date_list_id,doctor_id:e.doctor_id,end_date:e.end_date,facility_color:a,facility_id:e.facilityLocations.facility_id,facility_name:e.facilityLocations.name,id:e.id,is_facility_supervisor:!0,start_date:e.start_date}})),g=this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({[Mn.or]:[{[Mn.and]:[{start_date:{[Mn.lte]:s}},{end_date:{[Mn.gt]:s}},{doctor_id:{[Mn.in]:r}},{deleted_at:null},{approval_status:1}]},{[Mn.and]:[{start_date:{[Mn.gte]:s}},{start_date:{[Mn.lt]:l}},{doctor_id:{[Mn.in]:r}},{deleted_at:null},{approval_status:1}]}]}));let b=(null==g?void 0:g.length)>0?"partial":"none";return(null==g?void 0:g.filter((e=>new Date(e.start_date).getTime()<=s.getTime()&&new Date(e.end_date).getTime()>=l.getTime()))).length&&(b="full"),_.map((e=>Object.assign(Object.assign({},e),{assignments:[...v.filter((t=>t.doctor_id===e.user_id))],unavailability:b,unavailabilityTime:g})))})),this.getMaunalDoctorsListV1=(e,t)=>Fn(this,void 0,void 0,(function*(){const{end_date:t,start_date:i,facility_location_id:a,speciality_ids:n,user_id:o=Number(process.env.USERID)}=e,s=new Date(i),l=new Date(t),d=this.shallowCopy(yield this.__userRepo.findOne({id:o,deleted_at:null},{include:[{as:"colorCodes",include:{as:"type",model:Qe,required:!1,where:{deleted_at:null,slug:"facility_location"}},model:Ze,required:!1,where:{deleted_at:null}}]}));if(!d&&!Object.keys(d).length)throw un("NO_RECORD_FOUND");const _=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,facility_location_id:a,speciality_id:n},{group:["user_id"],include:{as:"users",include:[{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},{as:"userTimings",model:Le,required:!0,where:{deleted_at:null,facility_location_id:a}}],model:le,required:!0,where:{deleted_at:null}}})).map((e=>{var t,i,a;return{email:null===(t=null==e?void 0:e.users)||void 0===t?void 0:t.email,speciality_id:null==e?void 0:e.speciality_id,user_id:null===(i=null==e?void 0:e.users)||void 0===i?void 0:i.id,user_info:null===(a=null==e?void 0:e.users)||void 0===a?void 0:a.userBasicInfo}})),r=_.map((e=>e.user_id)),c=this.shallowCopy(yield this.__repo.findAll({deleted_at:null,doctor_id:{[Mn.in]:r},facility_location_id:a},{include:[{as:"facilityLocations",model:Oe,required:!1,where:{deleted_at:null}},{as:"dateList",model:qe,required:!0,where:{[Mn.or]:[{deleted_at:null,end_date:{[Mn.gt]:s},start_date:{[Mn.lte]:s}},{deleted_at:null,start_date:{[Mn.gte]:s,[Mn.lt]:l}}]}}]}));if(!c&&!c.length)throw un("PROVIDER_NOT_AVAILABLE");const p=c.map((e=>{const{dateList:t}=e;return null==t?void 0:t.map((t=>Object.assign(Object.assign({},e),{date_list_id:t.id,end_date:t.end_date,no_of_slots:t.no_of_slots,start_date:t.start_date})))})).flat(),u=this.shallowCopy(yield this.__rolesRepo.findOne({slug:"super_admin"},{include:{as:"modelRoles",model:je,required:!1}})),{modelRoles:m}=u,y=m[0].model_id,h=this.shallowCopy(yield this.__userFacilityRepo.findAll({user_id:o,deleted_at:null})),{colorCodes:f}=d,v=p.map((e=>{var t,i;if(!h.find((t=>t.facility_location_id===e.facility_location_id))&&y!==o)throw un("USER_NOT_ALLOWED");const a=null!==(i=null===(t=null==f?void 0:f.find((t=>t.object_id===e.facility_location_id)))||void 0===t?void 0:t.code)&&void 0!==i?i:"#9d9d9d";return{date_list_id:e.date_list_id,doctor_id:e.doctor_id,end_date:e.end_date,facility_color:a,facility_id:e.facilityLocations.facility_id,facility_name:e.facilityLocations.name,id:e.id,is_facility_supervisor:!0,start_date:e.start_date}})),g=this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({[Mn.or]:[{[Mn.and]:[{start_date:{[Mn.lte]:s}},{end_date:{[Mn.gt]:s}},{doctor_id:{[Mn.in]:r}},{deleted_at:null},{approval_status:1}]},{[Mn.and]:[{start_date:{[Mn.gte]:s}},{start_date:{[Mn.lt]:l}},{doctor_id:{[Mn.in]:r}},{deleted_at:null},{approval_status:1}]}]}));let b=(null==g?void 0:g.length)>0?"partial":"none";return(null==g?void 0:g.filter((e=>new Date(e.start_date).getTime()<=s.getTime()&&new Date(e.end_date).getTime()>=l.getTime()))).length&&(b="full"),_.map((e=>Object.assign(Object.assign({},e),{assignments:[...v.filter((t=>t.doctor_id===e.user_id))],unavailability:b,unavailabilityTime:g})))})),this.getPartialAvailableDoctor=(e,t)=>Fn(this,void 0,void 0,(function*(){const{end_date:t,start_date:i,facility_location_id:a,speciality_id:n,user_id:o=Number(process.env.USERID)}=e,s=new Date(i),l=new Date(t),d=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,facility_location_id:a,speciality_id:n}));if(!d||!d.length)return[];const _=d.map((e=>e.user_id));return this.__repo.findAll({deleted_at:null,doctor_id:{[Mn.in]:_},facility_location_id:a},{include:[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[Mn.gte]:l},start_date:{[Mn.lte]:s}}},{as:"doctor",attributes:{exclude:["password"]},include:[{as:"userBasicInfo",model:Ce,required:!0,where:{deleted_at:null}},{as:"medicalIdentifiers",model:Mt,attributes:["id"],required:!1,include:{as:"billingTitle",attributes:["name"],model:xt,where:{deleted_at:null}},where:{deleted_at:null}}],model:le,required:!1,where:{deleted_at:null}},{model:it,as:"availableSpeciality",required:!0,where:{deleted_at:null},include:{model:ue,as:"speciality",required:!0,where:{deleted_at:null,id:n}}}]})})),this.getPreCheckForUpdation=(e,t)=>Fn(this,void 0,void 0,(function*(){var t,i;const{available_doctor_id:a}=e,n=this.shallowCopy(yield this.__repo.findById(a,{include:{as:"appointments",model:He,required:!1,where:{deleted_at:null}}}));if(!n||!Object.keys(n).length)throw un("INVALID_ASSIGNMENT_ID");const{appointments:o}=n;if(!o||!o.length)return{end_time:null,start_time:null};const s=null===(t=o.map((e=>{const t=new Date(e.scheduled_date_time),i=new Date(e.scheduled_date_time);return t.setMinutes(t.getMinutes()+e.time_slots),i&&new Date(t).getTime()>new Date(i).getTime()?new Date(t):i})))||void 0===t?void 0:t.sort(),l=null===(i=null==o?void 0:o.map((e=>e.scheduled_date_time)))||void 0===i?void 0:i.sort();return{end_time:s.pop(),start_time:l[0]}})),this.post=(e,t,i)=>Fn(this,void 0,void 0,(function*(){var t,a;const{user_id:n=Number(process.env.USERID),doctor:{facility_location_id:o,doctor_id:s,end_date:l,start_date:d,days:_,recurrence_ending_criteria_id:r,end_date_for_recurrence:c,end_after_occurences:p}}=e;if(!r){const e=this.shallowCopy(yield this.__repo.findOne({deleted_at:null,doctor_id:s,facility_location_id:o},{include:{as:"dateList",model:qe,required:!0,where:{deleted_at:null,[Mn.or]:[{end_date:{[Mn.and]:[{[Mn.gt]:d},{[Mn.lte]:l}]}},{start_date:{[Mn.between]:[d,l]}}]}}}));if(e&&Object.keys(e).length)throw un("SAME_ASSIGNMENT_EXIST")}const u=this.shallowCopy(yield this.__facilityLocationRepo.findOne({deleted_at:null,id:o},{include:{as:"faciltyTiming",model:ge,required:!1,where:{deleted_at:null}}}));if(!u||!Object.keys(u).length)throw un("NO_FACILITY_LOCATION_FOUND");let m,y;if(r){m=this.shallowCopy(yield this.__recurrenceEndingCriteriaRepo.findById(r));const{slug:e}=m;y=null!=e?e:""}const{faciltyTiming:h}=u,f=!(!_&&!r);if(!(yield this.checkFacilityTimings(h,d,l,f,_,y)))throw un("ASSIGNMENT_DOES_NOT_FALL");const v=this.shallowCopy(yield this.__userRepo.findById(s,{include:[{as:"userTimings",model:Le,required:!1,where:{deleted_at:null,facility_location_id:o}},{as:"userFacilities",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:Ie,required:!1,where:{deleted_at:null,facility_location_id:o}}]}));if(!v||!Object.keys(v).length)throw un("NO_DOCTOR_FOUND");const{userTimings:g,userFacilities:b}=v;let S=_&&_.length?_:this.filterUnique(h.map((e=>e.day_id)));const I=yield this.checkDoctorTimings(g,d,l,f,S,y);if(!I.length)throw un("ASSIGNMENT_DOES_NOT_FALL_FOR_DOCTOR");"daily"===y&&(S=I.map((e=>e.day_id)).filter((e=>S.includes(e))));const D=this.shallowCopy(yield this.__repo.findAll({deleted_at:null,doctor_id:s,facility_location_id:o},{include:{as:"dateList",model:qe,required:!0,where:{deleted_at:null,[Mn.or]:[{deleted_at:null,end_date:{[Mn.gte]:l},start_date:{[Mn.lte]:d}},{deleted_at:null,start_date:{[Mn.gte]:d,[Mn.lt]:l}},{deleted_at:null,end_date:{[Mn.gt]:d,[Mn.lte]:l}}]}}}));if(D&&D.length)throw un("PROVIDER_ALREADY_ASSIGN");const w=new Date(l).getTime()-new Date(d).getTime(),O=null===(a=null===(t=b[0])||void 0===t?void 0:t.speciality)||void 0===a?void 0:a.time_slot,T=Math.floor(w/(60*O*1e3)),A=this.shallowCopy(yield this.__repo.create({doctor_id:s,end_date:l,facility_location_id:o,no_of_slots:T,start_date:d,supervisor_id:n},i)),{id:N}=A,C=!!r;return yield this[this.__createDaysAndDatesMethod[`${C}`]]({doctorId:s,endAfterOccurences:p,endDate:l,endDateForRecurrence:c,endingCriteria:y,facilityLocationId:o,formatedDays:S,newAvailableDoctorId:N,slots:T,startDate:d,transaction:i,userTimings:g}),this.__availableDoctorNotificationRepo.create({available_doctor_id:N,doctor_id:s},i)})),this.put=(e,t,i)=>Fn(this,void 0,void 0,(function*(){const{user_id:t=Number(process.env.USERID),available_doctor:{id:a,date_list_id:n,start_date:o,end_date:s,facility_location_id:l,doctor_id:d}}=e,_=new Date(o),r=new Date(s),c=this.shallowCopy(yield this.__repo.findById(a,{include:{model:it,as:"availableSpeciality",required:!1,where:{deleted_at:null},include:{model:ue,as:"speciality",required:!1,where:{deleted_at:null}}}})),{availableSpeciality:{speciality:p}}=c;if(!c||!Object.keys(c).length)throw un("INVALID_ASSIGNMENT_ID");const u=this.shallowCopy(yield this.__facilityLocationRepo.findById(l,{include:{as:"faciltyTiming",model:ge,where:{deleted_at:null}}})),{faciltyTiming:m}=u;if(!(yield this.checkFacilityTimings(m,o,s,!1)))throw un("ASSIGNMENT_DOES_NOT_FALL");const y=this.shallowCopy(yield this.__repo.findAll({doctor_id:d,deleted_at:null},{include:[{as:"dateList",model:qe,required:!0,where:{[Mn.or]:[{[Mn.and]:[{start_date:{[Mn.lte]:_},end_date:{[Mn.gte]:r},deleted_at:null}]},{[Mn.and]:[{start_date:{[Mn.gte]:_,[Mn.lt]:r},deleted_at:null}]},{[Mn.and]:[{end_date:{[Mn.gt]:_,[Mn.lte]:r},deleted_at:null}]}]}},{model:it,as:"availableSpeciality",required:!0,where:{deleted_at:null},include:{model:ue,as:"speciality",required:!0,where:{deleted_at:null,id:p.id}}}]}));if(y.length>1||1===y.length&&y[0].id!==a)throw un("NO_PROVIDER_AVAILABLE");const h=this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({[Mn.or]:[{[Mn.and]:[{start_date:{[Mn.lte]:_}},{end_date:{[Mn.gte]:r}},{doctor_id:d},{approval_status:!0},{deleted_at:null}]},{[Mn.and]:[{start_date:{[Mn.gte]:_}},{start_date:{[Mn.lte]:r}},{doctor_id:d},{approval_status:!0},{deleted_at:null}]}]})).filter((e=>e.start_date.getTime()<=_.getTime()&&e.end_date.getTime()>=r.getTime()));if(h&&h.length)throw un("NO_PROVIDER_AVAILABLE");const f=this.shallowCopy(yield this.__userFacilityRepo.findOne({deleted_at:null,facility_location_id:l,speciality_id:p.id,user_id:d},{include:[{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},{as:"users",include:{as:"userTimings",model:Le,required:!1,where:{deleted_at:null,facility_location_id:l}},model:le,required:!1,where:{deleted_at:null}}]})),{users:{userTimings:v},speciality:g}=f||{};if(!(yield this.checkDoctorTimings(v,o,s,!1)).length)throw un("NO_TIME_FALL");const b=(r.getTime()-_.getTime())/(60*g.time_slot*1e3);return this.__recurrenceDateListRepo.update(n,{end_date:r,no_of_slots:b,start_date:_,updated_at:new Date,updated_by:t},i)})),this.resolvePastAvailabilties=(e,t)=>Fn(this,void 0,void 0,(function*(){const{speciality_id:t,doctor_id:i,user_id:a=Number(process.env.USERID)}=e})),this.specificAppointments=(e,t)=>Fn(this,void 0,void 0,(function*(){const{available_doctor_id:t,start_date:i,end_date:a}=e,n=new Date(i),o=new Date(a);return this.__appointmentRepo.findAll({available_doctor_id:t,cancelled:!1,deleted_at:null,pushed_to_front_desk:!1,scheduled_date_time:{[Mn.between]:[n,o]}},{include:[{as:"patient",model:Et,required:!1,where:{deleted_at:null}},{as:"availableDoctor",include:{as:"doctor",attributes:{exclude:["password"]},include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}},model:ot,required:!1,where:{deleted_at:null}}]})})),this.addDaysForReccurence=(e,t)=>new Date(e.setTime(e.getTime()+24*t*60*60*1e3)),this.checkDoctorTimingSychronization=(e,t)=>e.every(((e,i,a)=>e[`${t}`]===a[0][`${t}`])),this.checkDoctorTimings=(e,t,i,a,n,o)=>Fn(this,void 0,void 0,(function*(){if(!a)return e.filter((e=>{const{day_id:a,start_time:n,end_time:o,time_zone:s}=e;if(a===new Date(t).getDay()){const a=this.convertDateToLocal(new Date(`${t.slice(0,10)}T${String(n)}.000Z`),s),l=this.convertDateToLocal(new Date(`${i.slice(0,10)}T${String(o)}.000Z`),s),d=new Date(`${i.slice(0,10)}T${l.toISOString().slice(-13)}`);a.toISOString().slice(0,10)!==d.toISOString().slice(0,10)&&d.setDate(a.getDate());const _=this.convertDateToLocal(new Date(t),s),r=this.convertDateToLocal(new Date(i),s);if(a.getTime()<=_.getTime()&&_.getTime()<=d.getTime()&&a.getTime()<=r.getTime()&&r.getTime()<=d.getTime())return e}}));if("daily"===o)return[...e];const s=[];return n.map((e=>e)).reduce(((a,n)=>{const o=e.filter((e=>{const{day_id:a,start_time:o,end_time:l,time_zone:d}=e;if(a===n){const a=this.convertDateToLocal(new Date(`${t.slice(0,10)}T${String(o)}.000Z`),d),n=this.convertDateToLocal(new Date(`${i.slice(0,10)}T${String(l)}.000Z`),d);a.toISOString().slice(0,10)!==n.toISOString().slice(0,10)&&n.setDate(a.getDate());const _=this.convertDateToLocal(new Date(t),d),r=this.convertDateToLocal(new Date(i),d);if(a.getTime()<=_.getTime()&&_.getTime()<=n.getTime()&&a.getTime()<=r.getTime()&&r.getTime()<=n.getTime())return s.push(e),e}}));return o&&o.length&&a++,a}),0)===n.length?s:[]})),this.checkFacilityTimings=(e,t,i,a,n,o)=>Fn(this,void 0,void 0,(function*(){if(!a){const a=e.filter((e=>{const{day_id:a,start_time:n,end_time:o,time_zone:s,facility_location_id:l}=e;if(a===new Date(t).getDay()){const a=this.convertDateToLocal(new Date(`${t.slice(0,10)}T${String(n)}.000Z`),s),l=this.convertDateToLocal(new Date(`${i.slice(0,10)}T${String(o)}.000Z`),s),d=new Date(`${i.slice(0,10)}T${l.toISOString().slice(-13)}`);a.toISOString().slice(0,10)!==d.toISOString().slice(0,10)&&d.setDate(a.getDate());const _=this.convertDateToLocal(new Date(t),s),r=this.convertDateToLocal(new Date(i),s);if(a.getTime()<=_.getTime()&&_.getTime()<=d.getTime()&&a.getTime()<=r.getTime()&&r.getTime()<=d.getTime())return e}}));return!(!a||!a.length)}return"daily"===o||(null==n?void 0:n.map((e=>e)).reduce(((a,n)=>{const o=e.filter((e=>{const{day_id:a,start_time:o,end_time:s,time_zone:l}=e;if(a===n){const a=this.convertDateToLocal(new Date(`${t.slice(0,10)}T${String(o)}.000Z`),l),n=this.convertDateToLocal(new Date(`${i.slice(0,10)}T${String(s)}.000Z`),l);a.toISOString().slice(0,10)!==n.toISOString().slice(0,10)&&n.setDate(a.getDate());const d=this.convertDateToLocal(new Date(t),l),_=this.convertDateToLocal(new Date(i),l);if(a.getTime()<=d.getTime()&&d.getTime()<=n.getTime()&&a.getTime()<=_.getTime()&&_.getTime()<=n.getTime())return e}}));return o&&o.length&&a++,a}),0))===n.length})),this.convertDateToLocal=(e,t)=>new Date(e.setMinutes(e.getMinutes()-t)),this.createDaysAndDatesWithoutRecurrence=e=>Fn(this,void 0,void 0,(function*(){const{facilityLocationId:t,doctorId:i,newAvailableDoctorId:a,endDate:n,startDate:o,slots:s,transaction:l,userTimings:d}=e,_=this.shallowCopy(yield this.__unAvailableDoctorRepo.findOne({[Mn.or]:[{end_date:{[Mn.gte]:n},start_date:{[Mn.lte]:o}},{[Mn.and]:[{start_date:{[Mn.gte]:o}},{start_date:{[Mn.lt]:n}}]},{start_date:{[Mn.gt]:o,[Mn.lt]:n}},{end_date:{[Mn.gt]:o,[Mn.lt]:n}}],approval_status:1,deleted_at:null,doctor_id:i})),r=d.map((e=>e.day_id));if(_||!r.includes(new Date(o).getDay()))throw un("PROVIDER_NOT_AVAILABLE");const c=this.shallowCopy(yield this.__repo.findOne({deleted_at:null,doctor_id:i,facility_location_id:t},{include:{as:"dateList",model:qe,required:!0,where:{deleted_at:null,[Mn.or]:[{end_date:{[Mn.and]:[{[Mn.gt]:o},{[Mn.lte]:n}]}},{start_date:{[Mn.between]:[o,n]}}]}}}));if(c&&Object.keys(c).length)throw un("SAME_ASSIGNMENT_EXIST");const p=this.shallowCopy(yield this.__dayListsRepo.findOne({unit:new Date(o).getDay()}));return yield this.__recurrenceDayListRepo.create({available_doctor_id:a,day_id:p.id},l),yield this.__recurrenceDateListRepo.create({available_doctor_id:a,end_date:new Date(n),start_date:new Date(o),no_of_slots:s},l),null})),this.createDaysAndDatesWithRecurrence=e=>Fn(this,void 0,void 0,(function*(){const{facilityLocationId:t,formatedDays:i,newAvailableDoctorId:a,endDateForRecurrence:n,endDate:o,endingCriteria:s,endAfterOccurences:l,startDate:d,slots:_,doctorId:r,userTimings:c,transaction:p}=e,u=!!n;let m=(yield this[this.__formatDatesCriteriaMethod[`${u}`]]({daysList:i,endDateString:o,endingCriteria:s,numberOfRecurrsion:l,recurrenceEndDateString:n,startDateString:d})).map((e=>Object.assign(Object.assign({},e),{available_doctor_id:a,no_of_slots:_})));if(m&&m.length){this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({approval_status:1,deleted_at:null,doctor_id:r,[Mn.or]:[{[Mn.and]:[{start_date:{[Mn.lte]:d}},{end_date:{[Mn.gte]:m[m.length-1].end_date}}]},{[Mn.and]:[{start_date:{[Mn.gte]:d}},{start_date:{[Mn.lte]:m[m.length-1].end_date}}]}]})).map((e=>{m.filter((t=>{if((e.start_date<=t.start_date&&e.end_date>=t.end_date||e.start_date>=t.start_date&&e.start_date<=t.end_date)&&e.start_date.getTime()<=t.start_date.getTime()&&e.end_date.getTime()>=t.end_date.getTime())return!0}))}));for(const e of m){const i=this.shallowCopy(yield this.__repo.findOne({deleted_at:null,doctor_id:r,facility_location_id:t},{include:{as:"dateList",model:qe,required:!0,where:{deleted_at:null,start_date:{[Mn.between]:[e.start_date,e.end_date]}}}}));if(i&&Object.keys(i).length)throw un("SAME_ASSIGNMENT_EXIST")}}m&&m.length&&(yield this.__recurrenceDateListRepo.bulkCreate([...m],p));let y=i;"daily"===s&&(y=[...new Set(m.map((e=>e.start_date.getDay())))]);const h=this.shallowCopy(yield this.__dayListsRepo.findAll({unit:{[Mn.in]:y}})).map((e=>({available_doctor_id:a,day_id:e.id})));return yield this.__recurrenceDayListRepo.bulkCreate([...h],p),m})),this.deleteAvailableDoctorWithAppointment=e=>Fn(this,void 0,void 0,(function*(){const{availableDoctorId:t,dateListId:i,userId:a,_authorization:n,transaction:o}=e;return yield this.deleteSingleAvailableDoctorWithoutAppointment({availableDoctorId:t,dateListId:i,transaction:o,userId:a})})),this.deleteAvailableDoctorWithoutReccurence=e=>Fn(this,void 0,void 0,(function*(){const{appointmentAgainstDoctor:t,availableDoctorId:i,dateListId:a,userId:n,_authorization:o,transaction:s}=e,l=!t||!t.length;return this[this.__deleteDoctorWithAppointmentMethod[`${l}`]]({_authorization:o,availableDoctorId:i,dateListId:a,transaction:s,userId:n})})),this.deleteAvailableDoctorWithReccurence=e=>Fn(this,void 0,void 0,(function*(){const{appointmentAgainstDoctor:t,availableDoctorId:i,transaction:a,userId:n}=e;if(t&&t.length)throw un("CANNOT_DELETE_ASSIGNMENT_WITH_APPOINTMENT");return yield this.__recurrenceDateListRepo.updateByColumnMatched({available_doctor_id:i,deleted_at:null},{deleted_at:new Date,updated_by:n},a),this.__repo.update(i,{deleted_at:new Date,updated_by:n},a)})),this.deleteSingleAvailableDoctorWithoutAppointment=e=>Fn(this,void 0,void 0,(function*(){const{availableDoctorId:t,dateListId:i,userId:a,transaction:n}=e,o=this.shallowCopy(yield this.__recurrenceDateListRepo.findAll({available_doctor_id:t,deleted_at:null})),s=yield this.__recurrenceDateListRepo.update(i,{deleted_at:new Date,updated_by:a},n);return 1===o.length?this.__repo.update(t,{deleted_at:new Date,updated_by:a},n):s})),this.findEndDateForRecurrence=(e,t,i,a)=>Fn(this,void 0,void 0,(function*(){if("weekly"===a){const a=new Date(e);let n,o=new Date(e);a.getDay()>i[i.length-1]&&(n=this.addDaysForReccurence(a,7-a.getDay()+1),o=n);const s=o;let l=0;for(;l<t;)o.getDay()>i[i.length-1]&&(n=this.addDaysForReccurence(o,7-o.getDay())),s.setTime(s.getTime()+6048e5),l+=1;const d=i[i.length-1]-o.getDay();return this.addDaysForReccurence(s,d)}const n=new Date(e);return function(e){const t=new Date(n.getTime());return t.setDate(n.getDate()+Number(e)),t}(t)})),this.findEndDateForRecurrenceMonthly=(e,t,i)=>Fn(this,void 0,void 0,(function*(){let a=new Date(e);if(a.getDay()===i[0]){for(let e=0;e<t;e+=1)a.setMonth(a.getMonth()+1);a=new Date(a.getFullYear(),a.getMonth()+1,0)}else{let e=!0;for(;e;)if(a.setTime(a.getTime()+864e5),a.getDay()===i[0]){for(let e=0;e<t;e+=1)a.setMonth(a.getMonth()+1);a=new Date(a.getFullYear(),a.getMonth()+1,0),e=!1}}return new Date(a)})),this.formatDatesCriteriaWithEndDate=e=>Fn(this,void 0,void 0,(function*(){const{daysList:t,endDateString:i,endingCriteria:a,recurrenceEndDateString:n,startDateString:o}=e;if(o===n)return[];const s=new Date(o),l=new Date(i),d=new Date(n),_=s.getTime(),r=l.getTime()-_;let c=[],p=[];if("monthly"===a){const e=t.length;let i=1;for(;s.getTime()<=d.getTime();){const a=e*i;c=[...c,...this.filterNonNull(t.map(((e,i)=>{if(s.getDay()===t[i])return new Date(JSON.parse(JSON.stringify(s)))})))],a===c.length&&(i+=1,s.setMonth(s.getMonth()+1,0)),s.setTime(s.getTime()+864e5)}return p=(null==c?void 0:c.map((e=>({end_date:new Date(e.getTime()+r),start_date:e}))))||[],p}for(;s.getTime()<=d.getTime();)c=[...c,...this.filterNonNull(t.map(((e,i)=>{if(s.getDay()===t[i])return new Date(JSON.parse(JSON.stringify(s)))})))],s.setTime(s.getTime()+864e5);return p=(null==c?void 0:c.map((e=>({end_date:new Date(e.getTime()+r),start_date:e}))))||[],p})),this.formatDatesCriteriaWithOutEndDate=e=>Fn(this,void 0,void 0,(function*(){const{endingCriteria:t,daysList:i,startDateString:a,endDateString:n,numberOfRecurrsion:o}=e,s=new Date(a),l=new Date(n);let d,_=[],r=[];const c=s.getTime(),p=l.getTime()-c;if("monthly"===t){d=yield this.findEndDateForRecurrenceMonthly(s,o,i);const e=i.length;let t=1;for(;s.getTime()<=d.getTime();){const a=e*t;_=[..._,...this.filterNonNull(i.map(((e,t)=>{if(s.getDay()===i[t])return new Date(JSON.parse(JSON.stringify(s)))})))],a===_.length&&(t+=1,s.setMonth(s.getMonth()+1,0)),s.setTime(s.getTime()+864e5)}return r=(null==_?void 0:_.map((e=>({end_date:new Date(e.getTime()+p),start_date:e}))))||[],r}for(d=yield this.findEndDateForRecurrence(s,o,i,t);s.getTime()<=(null==d?void 0:d.getTime());){let e=!0;_=[..._,...this.filterNonNull(i.map(((a,n)=>{if(s.getDay()===i[n])return new Date(JSON.parse(JSON.stringify(s)));"daily"===t&&!i.includes(s.getDay())&&e&&(e=!1,d.setTime(d.getTime()+864e5))})))],s.setTime(s.getTime()+864e5)}return r=(null==_?void 0:_.map((e=>({end_date:new Date(e.getTime()+p),start_date:e}))))||[],r})),this.formatDatesForAutomation=(e,t,i,a)=>{if(new Date(a).getTime()===i.getTime())return[];const n=new Date(a),o=new Date(t);let s=new Date(i);s.setHours(23,59,59,59);const l=n.getTime(),d=o.getTime()-l;let _=[],r=[];for(;n.getTime()<=s.getTime();)_=[..._,...this.filterNonNull(e.map(((t,i)=>{if(n.getDay()===e[i])return new Date(JSON.parse(JSON.stringify(n)))})))],n.setTime(n.getTime()+864e5);return r=(null==_?void 0:_.map((e=>({end_date:new Date(e.getTime()+d),start_date:e}))))||[],r},this.formatProjectionClauseForFilteredDoctor=(e,t)=>e?{deleted_at:null,facility_location_id:{[Mn.in]:t},speciality_id:{[Mn.ne]:null},user_id:e}:{deleted_at:null,facility_location_id:{[Mn.in]:t},speciality_id:{[Mn.ne]:null}},this.formatProjectionClauseForFilteredDoctorWithFacilityLocationIds=e=>e.length?{deleted_at:null,facility_location_id:{[Mn.in]:e},speciality_id:{[Mn.ne]:null}}:{deleted_at:null,speciality_id:{[Mn.ne]:null}},this.getEndDate=(e,t)=>{const i=new Date(e);i.setTime(i.getTime()+6048e5*t-864e5);const a=i.toISOString().slice(0,19).replace("T"," ").split(" ");return new Date(`${a[0]} 23:59:59`)},this.getEndDateOfWeek=e=>{const t=new Date(e),i=new Date(t.setDate(t.getDate()-t.getDay()));return{end_of_week:new Date(t.setDate(t.getDate()-t.getDay()+7)),start_of_week:i}},this.getFreeSlotsTimings=(e,t,i,a,n,o)=>{const s=[],l=new Date(e.start_date),d=new Date(e.end_date);for(;l.getTime()!==d.getTime()&&!(l.getTime()>d.getTime());)s.push({startDateTime:new Date(l),count:i}),l.setMinutes(l.getMinutes()+a);for(const e of t){const t=new Date(null==e?void 0:e.scheduled_date_time),i=new Date(null==e?void 0:e.scheduled_date_time);i.setMinutes(i.getMinutes()+(null==e?void 0:e.time_slots));for(const a of s)t.getTime()<=a.startDateTime.getTime()&&a.startDateTime.getTime()<i.getTime()&&null===(null==e?void 0:e.deleted_at)&&(a.count-=1)}return n?this.filterNonNull(s.map((t=>{if(t.count>0)for(let i=0;i<t.count;i+=1){let i={};const n=new Date(t.startDateTime);if(n.setMinutes(n.getMinutes()+a),o&&o.length&&(i=o.find((e=>{if(new Date(t.startDateTime).getTime()>=new Date(e.start_date).getTime()&&new Date(t.startDateTime).getTime()<new Date(e.end_date).getTime()||new Date(n).getTime()>=new Date(e.start_date).getTime()&&new Date(n).getTime()<new Date(e.end_date).getTime())return e}))),!i||!Object.keys(i).length)return{facility_location_id:e.facility_location_id,slot_time:t.startDateTime}}}))):this.filterNonNull(s.map((t=>{if(t.count===i){let i;const n=new Date(t.startDateTime);if(n.setMinutes(n.getMinutes()+a),o&&o.length&&(i=o.find((e=>{if(new Date(t.startDateTime).getTime()>=new Date(e.start_date).getTime()&&new Date(t.startDateTime).getTime()<new Date(e.end_date).getTime()||new Date(n).getTime()>=new Date(e.start_date).getTime()&&new Date(n).getTime()<new Date(e.end_date).getTime())return e}))),!i)return{facility_location_id:e.facility_location_id,slot_time:t.startDateTime}}})))},this.getLastDate=(e,t)=>{const i=new Date(e);return i.setTime(i.getTime()-3*t*6048e5),i.setHours(0),i.setMinutes(0),i.setSeconds(0),i.setMilliseconds(0),i.setMinutes(i.getMinutes()-(new Date).getTimezoneOffset()),i},this.getNonOverlappingAvailablities=(e,t)=>this.filterNonNull(e.filter((e=>{const i=t.find((t=>{if(new Date(e.start_date).getTime()<new Date(t.end_date).getTime()&&new Date(e.end_date).getTime()>new Date(t.start_date).getTime()&&t.doctor_id===e.doctor_id)return t}));if(!i||!Object.keys(i).length)return e}))),this.getPastPattern=(e,t,i)=>{const a=new Date(e),n=[];let o=this.getEndDateOfWeek(a);for(;o.start_of_week.getTime()<=t.getTime();){const e=this.getWeeklyDatesArray(o.start_of_week,o.end_of_week);n.push(e);const t=e.pop();o=this.getEndDateOfWeek(new Date(t.setDate(t.getDate()+1)))}let s=[];for(const e of n)s=[...s,...e.map((e=>this.filterNonNull(i.map((t=>{if(e.getDay()===t.getDay())return e.getDay()})))))];return this.filterNonEmpty(s)},this.getUniqueAvailableDoctors=e=>e.reduce(((e,t)=>(e.some((e=>e.doctor_id===t.doctor_id&&e.facility_location_id===t.facility_location_id&&e.supervisor_id===t.supervisor_id))||e.push(t),e)),[]),this.getUniqueAvailableSpecialities=e=>e.reduce(((e,t)=>(e.some((e=>e.speciality_id===t.speciality_id&&e.facility_location_id===t.facility_location_id))||e.push(t),e)),[]),this.getUniqueDatesAvailableDoctors=e=>e.reduce(((e,t)=>(e.some((e=>new Date(e.start_date).getTime()===new Date(t.start_date).getTime()))||e.push(t),e)),[]),this.getWeeklyDatesArray=(e,t)=>{const i=[];for(const a=new Date(e);a.getTime()<=t.getTime();a.setDate(a.getDate()+1))i.push(new Date(a));return i},this.isPatternSychronized=e=>{const t=[...e],i=[];for(const e of t)i.push({length:e.length,value:e[0]});let a=[];for(const e of i)a=[...a,i.find(((t,i,a)=>{if(e.value===t.value&&e.length!==t.length)return t}))];return!!a.length},this.__http=new h,this.__formatDatesCriteriaMethod={false:"formatDatesCriteriaWithOutEndDate",true:"formatDatesCriteriaWithEndDate"},this.__createDaysAndDatesMethod={false:"createDaysAndDatesWithoutRecurrence",true:"createDaysAndDatesWithRecurrence"},this.__deleteDoctorMethod={false:"deleteAvailableDoctorWithoutReccurence",true:"deleteAvailableDoctorWithReccurence"},this.__deleteDoctorWithAppointmentMethod={false:"deleteAvailableDoctorWithAppointment",true:"deleteSingleAvailableDoctorWithoutAppointment"}}};$n=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object])],$n);var Vn=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};const xn=ra.Op;let Kn=class extends bn{constructor(e,t,i,a,n,o,s,l,d,_,r,c,p,u,m){super(),this.__repo=e,this.__availableDoctorRepo=t,this.__facilityLocationRepo=i,this.__userRepo=a,this.__userFacilityRepo=n,this.__userBasicInfoRepo=o,this.__specialityRepo=s,this.__recurrenceEndingCriteriaRepo=l,this.__dayListsRepo=d,this.__recurrenceDayListRepo=_,this.__recurrenceDateListRepo=r,this.__unAvailableDoctorRepo=c,this.__appointmentRepo=p,this.__schAssignmentProviderTypesRepo=u,this.http=m,this.delete=(e,t,i)=>Vn(this,void 0,void 0,(function*(){const{available_speciality_id:t,date_list_id:a,user_id:n=Number(process.env.USERID)}=e,o={available_speciality_id:t,deleted_at:null},s={available_speciality_id:t,cancelled:0,deleted_at:null,pushed_to_front_desk:0};a&&(o.id=a,s.date_list_id=a);const l=this.shallowCopy(yield this.__recurrenceDateListRepo.findAll(Object.assign({},o),{include:{as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null}}}));if(!l||!l.length)throw un("INVALID_ASSIGNMENT_ID");let d=[];for(const e of l){const t=this.shallowCopy(yield this.__appointmentRepo.findAll(Object.assign(Object.assign({},s),{scheduled_date_time:{[xn.between]:[new Date(e.start_date),new Date(e.end_date)]}})));d=[...d,...t]}if(0!==d.length)throw un("CANNOT_DELETE_ASSIGNMENT_WITH_APPOINTMENT");const _=!a;return this[this.__deleteSpecialityMethod[`${_}`]]({availableSpecialityId:t,avilableDateLists:l,dateListId:a,transaction:i,userId:n})})),this.getAll=(e,t)=>Vn(this,void 0,void 0,(function*(){const{end_date:t,start_date:i,facility_location_ids:a,speciality_ids:n}=e,o=this.shallowCopy(yield this.__repo.findAll({deleted_at:null,facility_location_id:{[xn.in]:a},speciality_id:{[xn.in]:n}},{include:{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:{[xn.lte]:t},start_date:{[xn.gte]:i}}}}));if(!o||!o.length)throw un("NO_SPECIALITY_ASSIGNMENT_FOUND");return o})),this.getAppointments=(e,t)=>Vn(this,void 0,void 0,(function*(){const{available_speciality_id:t,user_id:i=Number(process.env.USERID)}=e,a=this.shallowCopy(yield this.__repo.findOne({id:t,deleted_at:null},{include:[{as:"appointments",attributes:["id","scheduled_date_time","time_slots"],include:[{as:"patient",attribute:["id","first_name","last_name","middle_name"],model:Et,required:!1,where:{deleted_at:null}},{as:"availableDoctor",attributes:["id","doctor_id"],include:{as:"doctor",attributes:{exclude:["password"]},include:{as:"userBasicInfo",attributes:["first_name","last_name","middle_name"],model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}},model:ot,required:!1,where:{deleted_at:null}}],model:He,required:!1,where:{cancelled:0,deleted_at:null,pushed_to_front_desk:0}}]})),{appointments:n,speciality_id:o}=a||{};return null==n?void 0:n.map((e=>{var i,a,n,s,l,d,_,r,c,p,u;return{available_doctor_id:null===(i=e.availableDoctor)||void 0===i?void 0:i.id,available_speciality_id:t,doctor_first_name:null===(s=null===(n=null===(a=e.availableDoctor)||void 0===a?void 0:a.doctor)||void 0===n?void 0:n.userBasicInfo)||void 0===s?void 0:s.first_name,doctor_id:null===(l=e.availableDoctor)||void 0===l?void 0:l.doctor_id,doctor_last_name:null===(r=null===(_=null===(d=e.availableDoctor)||void 0===d?void 0:d.doctor)||void 0===_?void 0:_.userBasicInfo)||void 0===r?void 0:r.last_name,doctor_middle_name:null===(u=null===(p=null===(c=e.availableDoctor)||void 0===c?void 0:c.doctor)||void 0===p?void 0:p.userBasicInfo)||void 0===u?void 0:u.middle_name,first_name:e.patient.first_name,id:e.id,last_name:e.patient.last_name,middle_name:e.patient.middle_name,patient_id:e.patient.id,scheduled_date_time:e.scheduled_date_time,speciality_id:o,time_slot:e.time_slots}}))})),this.getPreCheckForUpdation=(e,t)=>Vn(this,void 0,void 0,(function*(){var t,i;const{available_speciality_id:a,date_list_id:n,user_id:o=Number(process.env.USERID)}=e,s=this.shallowCopy(yield this.__repo.findOne({id:a,deleted_at:null},{include:[{as:"appointments",model:He,required:!1,where:{deleted_at:null}},{as:"speciality",model:ue,required:!1,where:{deleted_at:null}}]}));if(!s||!Object.keys(s).length)throw un("INVALID_ASSIGNMENT_ID");const l=this.shallowCopy(yield this.__recurrenceDateListRepo.findOne({deleted_at:null,id:n},{include:{as:"appointments",model:He,required:!1,where:{deleted_at:null}}})),{no_of_doctors:d,appointments:_}=l||{};if(!_||!_.length)return{end_time:null,no_of_doctors:0,start_time:null};const r=_.map((e=>{const t=new Date(e.scheduled_date_time),i=new Date(e.scheduled_date_time);return t.setMinutes(t.getMinutes()+e.time_slots),i&&new Date(t).getTime()>new Date(i).getTime()?new Date(t):i})).sort(),c=null===(t=null==_?void 0:_.filter((e=>null!==e.available_doctor_id)))||void 0===t?void 0:t.length,p=null===(i=null==_?void 0:_.map((e=>e.scheduled_date_time)))||void 0===i?void 0:i.sort();return{end_time:r.pop(),no_of_doctors:c>d?c:d,start_time:p[0]}})),this.getSpecialityAssignments=(e,t)=>Vn(this,void 0,void 0,(function*(){const{end_date:t,start_date:i,facility_location_ids:a,speciality_ids:n}=e;return this.__repo.findAll({deleted_at:null,facility_location_id:{[xn.in]:a},speciality_id:{[xn.in]:n}},{include:[{as:"availableDoctors",include:[{as:"doctor",attributes:{exclude:["password"]},include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}},{as:"dateList",model:qe,required:!1,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null,is_provider_assignment:!1}},{as:"dateList",model:qe,required:!0,where:{deleted_at:null,[xn.or]:[{end_date:{[xn.gte]:i},start_date:{[xn.lte]:i}},{start_date:{[xn.lte]:t,[xn.gte]:i}}]}}]})})),this.post=(e,t,i)=>Vn(this,void 0,void 0,(function*(){const{user_id:t=Number(process.env.USERID),doctors:a,doctor_method:n,doctor_method_id:o,speciality:{facility_location_id:s,speciality_id:l,end_date:d,start_date:_,no_of_doctors:r,days:c,end_date_for_recurrence:p,recurrence_ending_criteria_id:u,end_after_occurences:m,number_of_entries:y},timeZone:h}=e;if("manual"===n&&r!==a.length)throw un("MANUAL_ASSIGNMENT_NO_OF_DOCTORS");if(!u&&"automatic"!==n){const e=[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,[xn.or]:[{end_date:{[xn.and]:[{[xn.gt]:_},{[xn.lte]:d}]}},{start_date:{[xn.and]:[{[xn.gt]:_},{[xn.lt]:d}]}}]}}];"manual"===n&&(e.push({as:"availableDoctors",model:ot,required:!0,where:{doctor_id:{[xn.in]:a}}}),yield this.checkProviderIsAlreadyAssigned({doctors:a,startDate:_,endDate:d,timeZone:h}));const t=this.shallowCopy(yield this.__repo.findOne({deleted_at:null,facility_location_id:s,speciality_id:l},{include:[...e]}));if(t&&Object.keys(t).length)throw un("SAME_ASSIGNMENT_EXIST")}const f=this.shallowCopy(yield this.__facilityLocationRepo.findOne({deleted_at:null,id:s},{include:[{as:"faciltyTiming",model:ge,where:{deleted_at:null}},{as:"facility",model:Ut,required:!0}]}));if(!f||!Object.keys(f).length)throw un("NO_FACILITY_LOCATION_FOUND");let v,g;if(u){v=this.shallowCopy(yield this.__recurrenceEndingCriteriaRepo.findById(u));const{slug:e}=v;g=null!=e?e:""}const{faciltyTiming:b}=f,S=this.shallowCopy(yield this.__specialityRepo.findById(l)),{time_slot:I}=S;let D;const w=!(!c&&!u),O=c&&c.length?c:this.filterUnique(null==b?void 0:b.map((e=>e.day_id))),T={isMultiple:!1,specialityId:l,specialityName:S.qualifier,facilityLocation:f};if(!(yield this.checkFacilityTimingsWithConflicts(T,b,_,d,w,O,u)))throw un("ASSIGNMENT_DOES_NOT_FALL");let A;if(a&&a.length){if(A=this.shallowCopy(yield this.__userRepo.findAll({deleted_at:null,id:{[xn.in]:a}},{include:[{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},{as:"userTimings",model:Le,required:!1,where:{deleted_at:null,facility_location_id:s}}]})),!A||!A.length)throw un("NO_DOCTOR_FOUND");const e=A.map((e=>e.userTimings)).flat();if(!(yield this.checkDoctorTimingsWithConflicts(T,e,_,d,w,O,u)).length)throw un("ASSIGNMENT_DOES_NOT_FALL_FOR_DOCTOR")}const N=new Date(d),C=new Date(_);let R=(N.getTime()-C.getTime())/6e4;R/=I;const E=R*r;D=this.shallowCopy(yield this.__repo.create({end_after_occurences:m,end_date:d,end_date_for_recurrence:p,facility_location_id:s,no_of_doctors:r,no_of_slots:E,number_of_entries:y,recurrence_ending_criteria_id:u,speciality_id:l,start_date:_},i));const L=!!u,k=yield this[this.__createDaysAndDatesMethod[`${L}`]]({doctorMethod:n,doctorMethodId:o,endAfterOccurences:m,endDate:d,endDateForRecurrence:p,endingCriteria:g,facilityLocationId:s,formatedDays:O,newAvailableSpecialityId:D.id,noOfDoctors:r,noOfSlots:E,specialityId:l,startDate:_,transaction:i});if(!n||"none"===n.toLocaleLowerCase())return{data:D};const P=yield this[this.__createAvailableDoctorsMethod[`${n}`]]({checkForRecurrence:w,doctorMethodId:o,doctors:a,endDate:d,facilityLocationId:s,formatDatesCriteria:k,formatedDays:O,mins:R,newAvailableSpecialityId:D.id,noOfDoctors:r,noOfSlots:E,recurrenceEndingCriteriaId:u,specialityId:l,startDate:_,transaction:i,userId:t});return r&&r!==P.length?{data:P,message:un("ASSIGNMENT_CREATED_SUCCESSFULLY_WITH_NO_DOCTOR_ASSIGNMENT")}:{data:P}})),this.createDoctorAssignments=(e,t,i)=>Vn(this,void 0,void 0,(function*(){const a=this.shallowCopy(yield this.__schAssignmentProviderTypesRepo.findOne({slug:"automatic_assign"}));return yield this.postV1(Object.assign(Object.assign({},e),{no_of_doctors:1,doctor_method:"automatic",doctor_method_id:a.id,is_provider_assignment:!0}),t,i)})),this.postV1=(e,t,i)=>Vn(this,void 0,void 0,(function*(){const{user_id:t=Number(process.env.USERID),doctors:a,no_of_doctors:n,doctor_method:o,doctor_method_id:s,facility_location_id:l,specialities:d,time_zone:_,is_provider_assignment:r}=e;let c=[],p=[];const u=this.shallowCopy(yield this.__facilityLocationRepo.findOne({deleted_at:null,id:l},{include:[{as:"faciltyTiming",model:ge,where:{deleted_at:null}},{as:"facility",model:Ut,required:!0}]}));if(!u||!Object.keys(u).length)throw un("NO_FACILITY_LOCATION_FOUND");let m,y,h;if(a&&a.length){if(y=this.shallowCopy(yield this.__userRepo.findAll({deleted_at:null,id:{[xn.in]:a}},{include:[{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},{as:"userTimings",model:Le,required:!1,where:{deleted_at:null,facility_location_id:l}}]})),!y||!y.length)throw un("NO_DOCTOR_FOUND");h=y.map((e=>e.userTimings)).flat(),m=y[0].allow_multiple_assignment}const f={},v=d.map((e=>e.speciality_id)),g=this.shallowCopy(yield this.__specialityRepo.findAll({deleted_at:null,id:v}));for(const e of g)f[e.id]=e;const b=[],S=[];for(const e of d){const{speciality_id:t,end_date:i,start_date:s,days:d,end_date_for_recurrence:_,recurrence_ending_criteria_id:r,end_after_occurences:p,number_of_entries:m}=e,{qualifier:v}=f[t];if("manual"===o&&n!==a.length)throw un("MANUAL_ASSIGNMENT_NO_OF_DOCTORS");if(!r&&"automatic"!==o){const e=[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,[xn.or]:[{end_date:{[xn.and]:[{[xn.gt]:s},{[xn.lte]:i}]}},{start_date:{[xn.and]:[{[xn.gt]:s},{[xn.lt]:i}]}}]}}];"manual"===o&&e.push({as:"availableDoctors",model:ot,required:!0,where:{doctor_id:{[xn.in]:a}}});const n=this.shallowCopy(yield this.__repo.findOne({deleted_at:null,facility_location_id:l,speciality_id:t},{include:[...e]}));if(n&&Object.keys(n).length)throw this.MultiAssignmentError(v,"SAME_ASSIGNMENT_EXIST")}let g,I;if(r){g=this.shallowCopy(yield this.__recurrenceEndingCriteriaRepo.findById(r));const{slug:e}=g;I=null!=e?e:""}const{faciltyTiming:D}=u,{time_slot:w}=f[t],O=!(!d&&!r),T=d&&d.length?d:this.filterUnique(null==D?void 0:D.map((e=>e.day_id))),A={isMultiple:!0,specialityId:t,specialityName:v,facilityLocation:u},N=yield this.checkFacilityTimingsWithConflicts(A,D,s,i,O,T,r);if(A.conflict){b.push(A.conflict);continue}if(!N)throw this.MultiAssignmentError(v,"ASSIGNMENT_DOES_NOT_FALL");if(a&&a.length){const e=y.map((e=>e.userTimings)).flat(),t=yield this.checkDoctorTimingsWithConflicts(A,e,s,i,O,T,r);if(A.conflict){S.push(A.conflict);continue}if(!t.length)throw this.MultiAssignmentError(v,"ASSIGNMENT_DOES_NOT_FALL_FOR_DOCTOR")}const C=new Date(i),R=new Date(s);let E=(C.getTime()-R.getTime())/6e4;E/=w;const L=E*n;let k=h.filter((e=>e.specialty_id==t)).map((e=>e.day_id));f[t]=Object.assign(Object.assign({},f[t]),{specAssignmentInfo:e,mins:E,noOfSlots:L,checkForRecurrence:O,formatedDays:null!=T?T:k,recurrenceEndingCriteriaId:r,endingCriteria:I}),c.push({end_after_occurences:p,end_date:C,end_date_for_recurrence:_,facility_location_id:l,no_of_doctors:n,no_of_slots:L,number_of_entries:m,recurrence_ending_criteria_id:r,speciality_id:t,start_date:R})}b.length&&this.multiAssignmentDoesntFallError(b),S.length&&(yield this.multiAssignmentDoesntFallDoctorError(S)),c=this.shallowCopy(yield this.__repo.bulkCreate(c,i));for(const e of c){const{specAssignmentInfo:d,mins:c,noOfSlots:y,checkForRecurrence:h,recurrenceEndingCriteriaId:v,formatedDays:g,endingCriteria:b}=f[e.speciality_id],{end_after_occurences:S,start_date:I,end_date:D,end_date_for_recurrence:w,speciality_id:O}=d,T=!!v,A=yield this[this.__createDaysAndDatesMethod[`${T}`]]({doctorMethod:o,doctorMethodId:s,endAfterOccurences:S,endDate:D,endDateForRecurrence:w,endingCriteria:b,facilityLocationId:l,formatedDays:g,newAvailableSpecialityId:e.id,noOfDoctors:n,noOfSlots:y,specialityId:O,startDate:I,isProviderAssignment:r,transaction:i});if(!o||"none"===o.toLocaleLowerCase())continue;const{name:N}=f[O],C=yield this[this.__createAvailableDoctorsMethod[`${o}`]]({allowMultipleAssignments:m,checkForRecurrence:h,doctorMethodId:s,doctors:a,endDate:D,facilityLocationId:l,formatDatesCriteria:A,formatedDays:g,mins:c,newAvailableSpecialityId:e.id,noOfDoctors:n,noOfSlots:y,recurrenceEndingCriteriaId:v,specialityId:O,startDate:I,transaction:i,userId:t,isProviderAssignment:r,specialityName:N,timezone:_.time_zone,facilityLocationName:u.name});p.push(C)}return n&&n*d.length>p.length?{data:p,message:un("ASSIGNMENT_CREATED_SUCCESSFULLY_WITH_NO_DOCTOR_ASSIGNMENT")}:{data:p}})),this.update=(e,t,i)=>Vn(this,void 0,void 0,(function*(){const{user_id:a=Number(process.env.USERID),doctors:n,doctor_method:o,doctor_method_id:s,doctor_date_list_ids:l,available_speciality:{date_list_id:d,facility_location_id:_,speciality_id:r,end_date:c,start_date:p,no_of_doctors:u,id:m},time_zone:y}=e;if("manual"===o&&u!==n.length)throw un("MANUAL_ASSIGNMENT_NO_OF_DOCTORS");"manual"===o&&(yield this.checkProviderIsAlreadyAssigned({doctors:n,startDate:p,endDate:c,timeZone:y,availableSpecialityId:m}));const h=new Date(c),f=new Date(p),v=this.shallowCopy(yield this.__repo.findOne({id:m,deleted_at:null},{},i));if(!v||!Object.keys(v).length)throw un("INVALID_ASSIGNMENT_ID");const g=this.shallowCopy(yield this.__recurrenceDateListRepo.findById(d,{},i)),{start_date:b,end_date:S,doctor_method_id:I,no_of_doctors:D}=g||{},w=new Date(b),O=new Date(S);let T,A=!0;if("none"!==o.toLocaleLowerCase()&&(T=this.shallowCopy(yield this.__availableDoctorRepo.findAll({available_speciality_id:m,deleted_at:null},{include:{as:"availableSpeciality",include:{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:O,start_date:w}},model:it,required:!0,where:{deleted_at:null}}},i)),A=(null==T?void 0:T.length)===u),I===s&&(null==w?void 0:w.getTime())===f.getTime()&&(null==O?void 0:O.getTime())===h.getTime()&&D===u&&A)return[];const N=this.shallowCopy(yield this.__facilityLocationRepo.findOne({deleted_at:null,id:_},{include:[{as:"faciltyTiming",model:ge,where:{deleted_at:null}},{as:"facility",model:Ut,required:!0}]},i));if(!N||!Object.keys(N).length)throw un("NO_FACILITY_LOCATION_FOUND");const{faciltyTiming:C}=N||{},R=this.shallowCopy(yield this.__specialityRepo.findOne({deleted_at:null,id:r},{},i)),E={isMultiple:!1,specialityId:r,specialityName:R.qualifier,facilityLocation:N};if(!(yield this.checkFacilityTimingsWithConflicts(E,C,p,c,!1)))throw un("ASSIGNMENT_DOES_NOT_FALL");const L=this.getTimeSlotOfAssignment(v);let k=(h.getTime()-f.getTime())/(6e4*L);k*=u;let P=(new Date(c).getTime()-new Date(p).getTime())/6e4;return P/=L,this[this.__updateDoctorMethod[`${o}`]]({_authorization:t,availableDoctor:T,availableSpeciality:v,checkTimingData:E,dateListId:d,doctorDateListIds:l,doctorMethodId:s,doctors:n,endDate:h,endDateFromDateList:O,endDateString:c,existingDoctorMethod:I,facilityLocationId:_,faciltyTiming:C,id:m,mins:P,noOfDoctors:u,noOfSlots:k,speciality:R,specialityId:r,startDate:f,startDateFromDateList:w,startDateString:p,transaction:i,userId:a})})),this.updateDoctorAssignment=(e,t,i)=>Vn(this,void 0,void 0,(function*(){const{user_id:a=Number(process.env.USERID),available_doctor:{id:n,date_list_id:o,start_date:s,end_date:l,facility_location_id:d,doctor_id:_},time_zone:r}=e,c=new Date(s),p=new Date(l),u=this.shallowCopy(yield this.__availableDoctorRepo.findById(n,{include:[{as:"dateList",model:qe,required:!0,where:{deleted_at:null}},{model:it,as:"availableSpeciality",required:!1,where:{deleted_at:null},include:{model:ue,as:"speciality",required:!1,where:{deleted_at:null}}}]})),{availableSpeciality:{speciality:m},dateList:y}=u;if(!u||!Object.keys(u).length)throw un("INVALID_ASSIGNMENT_ID");const h=this.shallowCopy(yield this.__facilityLocationRepo.findById(d,{include:[{as:"faciltyTiming",model:ge,where:{deleted_at:null}},{as:"facility",model:Ut,required:!0}]})),{faciltyTiming:f}=h,v={isMultiple:!1,specialityId:m.id,specialityName:m.qualifier,facilityLocation:h};if(!(yield this.checkFacilityTimingsWithConflicts(v,f,s,l,!1)))throw un("ASSIGNMENT_DOES_NOT_FALL");const g=this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({[xn.or]:[{[xn.and]:[{start_date:{[xn.lte]:c}},{end_date:{[xn.gte]:p}},{doctor_id:_},{approval_status:!0},{deleted_at:null}]},{[xn.and]:[{start_date:{[xn.gte]:c}},{start_date:{[xn.lte]:p}},{doctor_id:_},{approval_status:!0},{deleted_at:null}]}]})).filter((e=>e.start_date.getTime()<=c.getTime()&&e.end_date.getTime()>=p.getTime()));if(g&&g.length)throw un("NO_PROVIDER_AVAILABLE");const b=this.shallowCopy(yield this.__userFacilityRepo.findOne({deleted_at:null,facility_location_id:d,speciality_id:m.id,user_id:_},{include:[{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},{as:"users",include:{as:"userTimings",model:Le,required:!1,where:{deleted_at:null,facility_location_id:d}},model:le,required:!1,where:{deleted_at:null}}]})),{users:{userTimings:S},speciality:I}=b||{};if(!(yield this.checkDoctorTimings(S,s,l,!1)).length)throw un("NO_TIME_FALL");const D=(p.getTime()-c.getTime())/(60*I.time_slot*1e3);if(y.length>1){const e=yield this.shallowCopy(yield this.__recurrenceDateListRepo.findAll({available_doctor_id:n,deleted_at:null}));yield this.__recurrenceDateListRepo.update(o,{deleted_at:new Date,updated_by:a}),1===e.length&&(yield this.__availableDoctorRepo.update(n,{deleted_at:new Date,updated_by:a}));const c={facility_location_id:d,doctors:[_],user_id:a,specialities:[{start_date:s,end_date:l,speciality_id:m.id}],time_zone:r};return yield this.createDoctorAssignments(Object.assign({},c),t,i)}return this.__recurrenceDateListRepo.update(o,{end_date:p,no_of_slots:D,start_date:c,updated_at:new Date,updated_by:a},i)})),this.addDaysForReccurence=(e,t)=>new Date(e.setTime(e.getTime()+24*t*60*60*1e3)),this.checkDoctorTimings=(e,t,i,a,n,o)=>Vn(this,void 0,void 0,(function*(){if(!a)return e.filter((e=>{const{day_id:a,start_time:n,end_time:o,time_zone:s}=e;if(a===new Date(t).getDay()){const a=this.convertDateToLocal(new Date(`${t.slice(0,10)}T${String(n)}.000Z`),s),l=this.convertDateToLocal(new Date(`${i.slice(0,10)}T${String(o)}.000Z`),s),d=new Date(`${i.slice(0,10)}T${l.toISOString().slice(-13)}`);a.toISOString().slice(0,10)!==d.toISOString().slice(0,10)&&d.setDate(a.getDate());const _=this.convertDateToLocal(new Date(t),s),r=this.convertDateToLocal(new Date(i),s);if(a.getTime()<=_.getTime()&&_.getTime()<=d.getTime()&&a.getTime()<=r.getTime()&&r.getTime()<=d.getTime())return e}}));const s=this.shallowCopy(yield this.__recurrenceEndingCriteriaRepo.findById(o)),{slug:l}=s;if("daily"===l){let a=[];for(const o of n)a=[...a,...e.filter((e=>{const{day_id:a,start_time:n,end_time:s,time_zone:l}=e;if(a===o){const a=this.convertDateToLocal(new Date(`${t.slice(0,10)}T${String(n)}.000Z`),l),o=this.convertDateToLocal(new Date(`${i.slice(0,10)}T${String(s)}.000Z`),l);a.toISOString().slice(0,10)!==o.toISOString().slice(0,10)&&o.setDate(a.getDate());const d=this.convertDateToLocal(new Date(t),l),_=this.convertDateToLocal(new Date(i),l);if(a.getTime()<=d.getTime()&&d.getTime()<=o.getTime()&&a.getTime()<=_.getTime()&&_.getTime()<=o.getTime())return e}}))];return a}const d=[];return n.map((e=>e)).reduce(((a,n)=>{const o=e.filter((e=>{const{day_id:a,start_time:o,end_time:s,time_zone:l}=e;if(a===n){const a=this.convertDateToLocal(new Date(`${t.slice(0,10)}T${String(o)}.000Z`),l),n=this.convertDateToLocal(new Date(`${i.slice(0,10)}T${String(s)}.000Z`),l);a.toISOString().slice(0,10)!==n.toISOString().slice(0,10)&&n.setDate(a.getDate());const _=this.convertDateToLocal(new Date(t),l),r=this.convertDateToLocal(new Date(i),l);if(a.getTime()<=_.getTime()&&_.getTime()<=n.getTime()&&a.getTime()<=r.getTime()&&r.getTime()<=n.getTime())return d.push(e),e}}));return o&&o.length&&a++,a}),0)===n.length?d:[]})),this.checkDoctorTimingsWithConflicts=(e,t,i,a,n,o,s)=>Vn(this,void 0,void 0,(function*(){var l,d;if(!n){const{isMultiple:n,specialityId:o,specialityName:s,facilityLocation:_}=e,r=[],c=[];for(const e of t){const{day_id:t,start_time:n,end_time:l,time_zone:d}=e;if(t===new Date(i).getDay()&&e.specialty_id===o){const t=this.convertDateToLocal(new Date(`${i.slice(0,10)}T${String(n)}.000Z`),d),o=this.convertDateToLocal(new Date(`${a.slice(0,10)}T${String(l)}.000Z`),d),p=new Date(`${a.slice(0,10)}T${o.toISOString().slice(-13)}`);t.toISOString().slice(0,10)!==p.toISOString().slice(0,10)&&p.setDate(t.getDate());const u=this.convertDateToLocal(new Date(i),d),m=this.convertDateToLocal(new Date(a),d);t.getTime()<=u.getTime()&&u.getTime()<=p.getTime()&&t.getTime()<=m.getTime()&&m.getTime()<=p.getTime()?r.push(e):c.push({userId:e.user_id,doctorStartDate:t,doctorEndDate:p,specialityName:s,facilityLocationName:_.qualifier,facilityName:_.facility.qualifier})}}if(c.length){if(!n){const{doctorStartDate:e,doctorEndDate:t,userId:i,facilityLocationName:a,facilityName:n}=c[0],o=yield this.__userRepo.findOne({id:i},{include:[{as:"userBasicInfo",model:Ce,required:!0},{as:"medicalIdentifiers",model:Mt,required:!1,include:{model:xt,as:"billingTitle",required:!0}}]}),_=null===(d=null===(l=null==o?void 0:o.medicalIdentifiers)||void 0===l?void 0:l.billingTitle)||void 0===d?void 0:d.name;let r=`${o.userBasicInfo.first_name} ${o.userBasicInfo.middle_name?o.userBasicInfo.middle_name+" ":""}${o.userBasicInfo.last_name}`;const p=un("ASSIGNMENT_DOES_NOT_FALL_FOR_DOCTOR"),u=e.toLocaleString("en-US",{weekday:"long",hour:"numeric",minute:"numeric",hour12:!0}),m=t.toLocaleString("en-US",{hour:"numeric",minute:"numeric",hour12:!0});throw p.message=`${p.message} of ${n} - ${a} for ${r}, ${_?_+" ":""}for ${s},${u} - ${m}`,p}e.conflict=c[0]}return r}const _=this.shallowCopy(yield this.__recurrenceEndingCriteriaRepo.findById(s)),{slug:r}=_;if("daily"===r){let e=[];for(const n of o)e=[...e,...t.filter((e=>{const{day_id:t,start_time:o,end_time:s,time_zone:l}=e;if(t===n){const t=this.convertDateToLocal(new Date(`${i.slice(0,10)}T${String(o)}.000Z`),l),n=this.convertDateToLocal(new Date(`${a.slice(0,10)}T${String(s)}.000Z`),l);t.toISOString().slice(0,10)!==n.toISOString().slice(0,10)&&n.setDate(t.getDate());const d=this.convertDateToLocal(new Date(i),l),_=this.convertDateToLocal(new Date(a),l);if(t.getTime()<=d.getTime()&&d.getTime()<=n.getTime()&&t.getTime()<=_.getTime()&&_.getTime()<=n.getTime())return e}}))];return e}const c=[];return o.map((e=>e)).reduce(((e,n)=>{const o=t.filter((e=>{const{day_id:t,start_time:o,end_time:s,time_zone:l}=e;if(t===n){const t=this.convertDateToLocal(new Date(`${i.slice(0,10)}T${String(o)}.000Z`),l),n=this.convertDateToLocal(new Date(`${a.slice(0,10)}T${String(s)}.000Z`),l);t.toISOString().slice(0,10)!==n.toISOString().slice(0,10)&&n.setDate(t.getDate());const d=this.convertDateToLocal(new Date(i),l),_=this.convertDateToLocal(new Date(a),l);if(t.getTime()<=d.getTime()&&d.getTime()<=n.getTime()&&t.getTime()<=_.getTime()&&_.getTime()<=n.getTime())return c.push(e),e}}));return o&&o.length&&e++,e}),0)===o.length?c:[]})),this.checkFacilityTimings=(e,t,i,a,n,o)=>Vn(this,void 0,void 0,(function*(){if(!a){const a=e.filter((e=>{const{day_id:a,start_time:n,end_time:o,time_zone:s}=e;if(a===new Date(t).getDay()){const a=this.convertDateToLocal(new Date(`${t.slice(0,10)}T${String(n)}.000Z`),s),l=this.convertDateToLocal(new Date(`${i.slice(0,10)}T${String(o)}.000Z`),s),d=new Date(`${i.slice(0,10)}T${l.toISOString().slice(-13)}`);a.toISOString().slice(0,10)!==d.toISOString().slice(0,10)&&d.setDate(a.getDate());const _=this.convertDateToLocal(new Date(t),s),r=this.convertDateToLocal(new Date(i),s);if(a.getTime()<=_.getTime()&&_.getTime()<=d.getTime()&&a.getTime()<=r.getTime()&&r.getTime()<=d.getTime())return e}}));return!(!a||!a.length)}const s=this.shallowCopy(yield this.__recurrenceEndingCriteriaRepo.findById(o)),{slug:l}=s;if("daily"===l){let a=[];for(const o of n)a=[...a,...e.filter((e=>{const{day_id:a,start_time:n,end_time:s,time_zone:l}=e;if(a===o){const a=this.convertDateToLocal(new Date(`${t.slice(0,10)}T${String(n)}.000Z`),l),o=this.convertDateToLocal(new Date(`${i.slice(0,10)}T${String(s)}.000Z`),l),d=new Date(`${i.slice(0,10)}T${o.toISOString().slice(-13)}`);a.toISOString().slice(0,10)!==d.toISOString().slice(0,10)&&d.setDate(a.getDate());const _=this.convertDateToLocal(new Date(t),l),r=this.convertDateToLocal(new Date(i),l);if(a.getTime()<=_.getTime()&&_.getTime()<=d.getTime()&&a.getTime()<=r.getTime()&&r.getTime()<=d.getTime())return e}}))];return!(!a||!a.length)}return n.map((e=>e)).reduce((a=>{const n=e.filter((e=>{const{day_id:a,start_time:n,end_time:o,time_zone:s}=e;if(a===new Date(t).getDay()){const a=this.convertDateToLocal(new Date(`${t.slice(0,10)}T${String(n)}.000Z`),s),l=this.convertDateToLocal(new Date(`${i.slice(0,10)}T${String(o)}.000Z`),s);a.toISOString().slice(0,10)!==l.toISOString().slice(0,10)&&l.setDate(a.getDate());const d=this.convertDateToLocal(new Date(t),s),_=this.convertDateToLocal(new Date(i),s);if(a.getTime()<=d.getTime()&&d.getTime()<=l.getTime()&&a.getTime()<=_.getTime()&&_.getTime()<=l.getTime())return e}}));return n&&n.length&&a++,a}),0)===n.length})),this.checkFacilityTimingsWithConflicts=(e,t,i,a,n,o,s)=>Vn(this,void 0,void 0,(function*(){if(!n){const{isMultiple:n,specialityName:o,facilityLocation:s}=e,l=[],d=[];for(const e of t){const{day_id:t,start_time:n,end_time:_,time_zone:r}=e;if(t===new Date(i).getDay()){const t=this.convertDateToLocal(new Date(`${i.slice(0,10)}T${String(n)}.000Z`),r),c=this.convertDateToLocal(new Date(`${a.slice(0,10)}T${String(_)}.000Z`),r),p=new Date(`${a.slice(0,10)}T${c.toISOString().slice(-13)}`);t.toISOString().slice(0,10)!==p.toISOString().slice(0,10)&&p.setDate(t.getDate());const u=this.convertDateToLocal(new Date(i),r),m=this.convertDateToLocal(new Date(a),r);t.getTime()<=u.getTime()&&u.getTime()<=p.getTime()&&t.getTime()<=m.getTime()&&m.getTime()<=p.getTime()?l.push(e):d.push({facilityStartDate:t,facilityEndDate:p,specialityName:o,facilityLocationName:s.qualifier,facilityName:s.facility.qualifier})}}if(d.length){if(!n){const{facilityStartDate:e,facilityEndDate:t,facilityLocationName:i,facilityName:a}=d[0],n=un("ASSIGNMENT_DOES_NOT_FALL"),s=e.toLocaleString("en-US",{weekday:"long",hour:"numeric",minute:"numeric",hour12:!0}),l=t.toLocaleString("en-US",{hour:"numeric",minute:"numeric",hour12:!0});throw n.message=`${n.message} of ${a} - ${i}, ${o}, ${s} - ${l}`,n}e.conflict=d[0]}return!(!l||!l.length)}const l=this.shallowCopy(yield this.__recurrenceEndingCriteriaRepo.findById(s)),{slug:d}=l;if("daily"===d){let e=[];for(const n of o)e=[...e,...t.filter((e=>{const{day_id:t,start_time:o,end_time:s,time_zone:l}=e;if(t===n){const t=this.convertDateToLocal(new Date(`${i.slice(0,10)}T${String(o)}.000Z`),l),n=this.convertDateToLocal(new Date(`${a.slice(0,10)}T${String(s)}.000Z`),l),d=new Date(`${a.slice(0,10)}T${n.toISOString().slice(-13)}`);t.toISOString().slice(0,10)!==d.toISOString().slice(0,10)&&d.setDate(t.getDate());const _=this.convertDateToLocal(new Date(i),l),r=this.convertDateToLocal(new Date(a),l);if(t.getTime()<=_.getTime()&&_.getTime()<=d.getTime()&&t.getTime()<=r.getTime()&&r.getTime()<=d.getTime())return e}}))];return!(!e||!e.length)}return o.map((e=>e)).reduce((e=>{const n=t.filter((e=>{const{day_id:t,start_time:n,end_time:o,time_zone:s}=e;if(t===new Date(i).getDay()){const t=this.convertDateToLocal(new Date(`${i.slice(0,10)}T${String(n)}.000Z`),s),l=this.convertDateToLocal(new Date(`${a.slice(0,10)}T${String(o)}.000Z`),s);t.toISOString().slice(0,10)!==l.toISOString().slice(0,10)&&l.setDate(t.getDate());const d=this.convertDateToLocal(new Date(i),s),_=this.convertDateToLocal(new Date(a),s);if(t.getTime()<=d.getTime()&&d.getTime()<=l.getTime()&&t.getTime()<=_.getTime()&&_.getTime()<=l.getTime())return e}}));return n&&n.length&&e++,e}),0)===o.length})),this.convertDateToLocal=(e,t)=>new Date(e.setMinutes(e.getMinutes()-t)),this.createAvailableDoctorsAutomatically=e=>Vn(this,void 0,void 0,(function*(){const{allowMultipleAssignments:t,doctorMethodId:i,facilityLocationId:a,specialityId:n,startDate:o,endDate:s,checkForRecurrence:l,formatedDays:d,recurrenceEndingCriteriaId:_,mins:r,newAvailableSpecialityId:c,userId:p,formatDatesCriteria:u,noOfDoctors:m,noOfSlots:y,transaction:h,isProviderAssignment:f,specialityName:v,facilityLocationName:g,timezone:b,doctors:S}=e;let I,D,w=[];n&&w.push({as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null,speciality_id:n},include:{model:ue,require:!0}});const O=this.shallowCopy(yield this.__userFacilityRepo.findAll(Object.assign({deleted_at:null,facility_location_id:a,speciality_id:n},f&&{user_id:S}),{include:{as:"users",include:[{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},{as:"userTimings",model:Le,required:!1,where:{deleted_at:null,facility_location_id:a}}],model:le,required:!1,where:{deleted_at:null}}},h));if(l){let e,n=[],y=[];const v=[];y=this.filterNonNull(O.map((e=>{var t;return null===(t=e.users)||void 0===t?void 0:t.userTimings})).flat());const g=this.filterUnique(y.map((e=>e.user_id)));for(const i of u){e=y.map((e=>g.filter((t=>{if(e.day_id===new Date(i.start_date).getDay()&&t===e.user_id)return!0})))).flat();const r=yield this.checkDoctorTimings(y,o,s,l,d,_);if(r.length){e=this.filterUnique(r.filter((t=>e.includes(t.user_id))).map((e=>e.user_id)));const l=this.shallowCopy(yield this.__availableDoctorRepo.findAll({deleted_at:null,doctor_id:{[xn.in]:e}},{include:[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,[xn.or]:[{end_date:{[xn.gt]:i.start_date},start_date:{[xn.lte]:i.start_date}},{start_date:{[xn.gte]:i.start_date,[xn.lt]:i.end_date}}]}},...w]},h)),d=l.map((e=>e.doctor_id)),_=l.map((e=>e.facility_location_id));if(e=t?_.includes(a)?e.filter((e=>!d.includes(e))):[...e]:e.filter((e=>!d.includes(e))),e.length){console.log("HIT 2");const t=this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({[xn.or]:[{end_date:{[xn.gte]:s},start_date:{[xn.lte]:o}},{[xn.and]:[{start_date:{[xn.gte]:o}},{start_date:{[xn.lt]:s}}]},{start_date:{[xn.gt]:o,[xn.lt]:s}},{end_date:{[xn.gt]:o,[xn.lt]:s}}],approval_status:1,deleted_at:null,doctor_id:{[xn.in]:e}},{},h)).map((e=>e.doctor_id));if(e=e.filter((e=>!t.includes(e))),e.length){for(const t of e)v.push(Object.assign({doctor_id:t},i));n.push(...e)}}}}if(!(null==v?void 0:v.length))throw un("PROVIDER_NOT_AVAILABLE");n=this.filterUnique(n).sort((function(e,t){return e-t})),n=n.filter(((e,t)=>t<m));const b=new Date(s),S=new Date(o),T=null==n?void 0:n.map((e=>({available_speciality_id:c,doctor_id:e,end_date:b,facility_location_id:a,no_of_slots:r,start_date:S,supervisor_id:p,is_provider_assignment:f})));D=this.shallowCopy(yield this.__availableDoctorRepo.bulkCreate([...T],h)),I=this.filterNonNull(D.map((e=>v.map((t=>{if(t.doctor_id===e.doctor_id)return{available_doctor_id:e.id,doctor_method_id:i,end_date:t.end_date,no_of_slots:r,start_date:t.start_date}})))).flat())}else{const e=this.filterNonNull(O.map((e=>{var t;return null===(t=e.users)||void 0===t?void 0:t.userTimings})).flat());let i=this.filterUnique(e.map((e=>e.user_id)));const u=yield this.checkDoctorTimings(e,o,s,l,d,_);if(!u.length)throw un("ASSIGNMENT_DOES_NOT_FALL_FOR_DOCTOR");i=this.filterUnique(u.filter((e=>i.includes(e.user_id))).map((e=>e.user_id)));const y=this.shallowCopy(yield this.__availableDoctorRepo.findAll({deleted_at:null,doctor_id:{[xn.in]:i}},{include:[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,[xn.or]:[{end_date:{[xn.gt]:o},start_date:{[xn.lte]:o}},{start_date:{[xn.lt]:s,[xn.gte]:o}}]}},{as:"facilityLocations",model:Oe,include:{as:"facility",model:Ut,required:!0},required:!0},...w]},h));!t&&y&&(i=i.filter((e=>!y.some((t=>e==t.doctor_id)))));const S=this.shallowCopy(yield this.__availableDoctorRepo.findOne({deleted_at:null,doctor_id:{[xn.in]:i},facility_location_id:a},{include:[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,[xn.or]:[{end_date:{[xn.and]:[{[xn.gt]:o},{[xn.lte]:s}]}},{start_date:{[xn.between]:[o,s]}}]}},{as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null,speciality_id:n}}]},h));if(S&&Object.keys(S).length)throw un("SAME_ASSIGNMENT_EXIST");if(!i.length){const e=un("PROVIDER_ALREADY_ASSIGN"),t=this.convertDateToLocal(new Date(o),b).toLocaleString("en-US",{year:"numeric",day:"numeric",month:"numeric",hour:"numeric",minute:"numeric",hour12:!0}).split(","),i=this.convertDateToLocal(new Date(s),b).toLocaleString("en-US",{hour:"numeric",minute:"numeric",hour12:!0}),n=t[0],l=t[1],d=y.filter((e=>a!==e.facility_location_id));throw d.length?e.message=`${e.message} in ${d[0].facilityLocations.facility.qualifier} - ${d[0].facilityLocations.qualifier} - ${d[0].availableSpeciality.speciality.name}, on ${n} from${l} to ${i}`:e.message=`${e.message} in ${g} - ${v}, on ${n} from${l} to ${i}`,e}const T=this.shallowCopy(yield this.__unAvailableDoctorRepo.findAll({[xn.or]:[{end_date:{[xn.gte]:s},start_date:{[xn.lte]:o}},{[xn.and]:[{start_date:{[xn.gte]:o}},{start_date:{[xn.lt]:s}}]},{start_date:{[xn.gt]:o,[xn.lt]:s}},{end_date:{[xn.gt]:o,[xn.lt]:s}}],approval_status:1,deleted_at:null,doctor_id:{[xn.in]:i}},{},h)).map((e=>e.doctor_id));if(i=i.filter((e=>!T.includes(e))),!i.length)throw un("PROVIDER_NOT_AVAILABLE");i=i.filter(((e,t)=>t<m));const A=new Date(s),N=new Date(o),C=null==i?void 0:i.map((e=>({available_speciality_id:c,doctor_id:e,end_date:A,facility_location_id:a,no_of_slots:r,start_date:N,supervisor_id:p,is_provider_assignment:f})));D=this.shallowCopy(yield this.__availableDoctorRepo.bulkCreate([...C],h)),I=D.map((e=>({available_doctor_id:e.id,end_date:e.end_date,no_of_slots:r,start_date:e.start_date})))}return this.__recurrenceDateListRepo.bulkCreate([...I],h)})),this.createAvailableDoctorsManually=e=>Vn(this,void 0,void 0,(function*(){const{doctorMethodId:t,doctors:i,newAvailableSpecialityId:a,endDate:n,startDate:o,facilityLocationId:s,mins:l,userId:d,transaction:_}=e,r=new Date(n),c=new Date(o),p=i.map((e=>({available_speciality_id:a,doctor_id:e,end_date:r,facility_location_id:s,no_of_slots:l,start_date:c,supervisor_id:d}))),u=this.shallowCopy(yield this.__availableDoctorRepo.bulkCreate([...p],_)).map((e=>({available_doctor_id:e.id,doctor_method_id:t,end_date:e.end_date,no_of_slots:l,start_date:e.start_date})));return this.__recurrenceDateListRepo.bulkCreate([...u],_)})),this.createAvailbleSpecialityWithoutDoctor=e=>Vn(this,void 0,void 0,(function*(){const{_authorization:t,doctorMethodId:i,endDate:a,facilityLocationId:n,noOfDoctors:o,specialityId:s,startDate:l,transaction:d,userId:_}=e,r=[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,[xn.or]:[{end_date:{[xn.and]:[{[xn.gt]:l},{[xn.lte]:a}]}},{start_date:{[xn.and]:[{[xn.gt]:l},{[xn.lt]:a}]}}]}}],c=this.shallowCopy(yield this.__repo.findOne({deleted_at:null,facility_location_id:n,speciality_id:s},{include:[...r]},d));if(c&&Object.keys(c).length)throw un("SAME_ASSIGNMENT_EXIST");const p=this.shallowCopy(yield this.__facilityLocationRepo.findOne({deleted_at:null,id:n},{include:[{as:"faciltyTiming",model:ge,where:{deleted_at:null}},{as:"facility",model:Ut,required:!0}]},d));if(!p||!Object.keys(p).length)throw un("NO_FACILITY_LOCATION_FOUND");const{faciltyTiming:u}=p,m=this.shallowCopy(yield this.__specialityRepo.findById(s,{},d)),{time_slot:y}=m,h=this.filterUnique(null==u?void 0:u.map((e=>e.day_id))),f={isMultiple:!1,specialityId:s,specialityName:m.qualifier,facilityLocation:p};if(!(yield this.checkFacilityTimingsWithConflicts(f,u,l.toISOString(),a.toISOString(),!1,h,null)))throw un("ASSIGNMENT_DOES_NOT_FALL");const v=new Date(a),g=new Date(l);let b=(v.getTime()-g.getTime())/6e4;b/=y;const S=b*o,I=this.shallowCopy(yield this.__repo.create({end_date:a,facility_location_id:n,no_of_doctors:o,no_of_slots:S,speciality_id:s,start_date:l},d));return yield this[this.__createDaysAndDatesMethod.false]({doctorMethodId:i,endDate:a,facilityLocationId:n,formatedDays:h,newAvailableSpecialityId:I.id,noOfDoctors:o,noOfSlots:S,specialityId:s,startDate:l,transaction:d}),I})),this.createDaysAndDatesWithoutRecurrence=e=>Vn(this,void 0,void 0,(function*(){const{doctorMethodId:t,facilityLocationId:i,newAvailableSpecialityId:a,endDate:n,startDate:o,noOfDoctors:s,noOfSlots:l,specialityId:d,isProviderAssignment:_,transaction:r}=e;if(_)return null;const c=this.shallowCopy(yield this.__dayListsRepo.findOne({unit:new Date(o).getDay()}));return yield this.__recurrenceDayListRepo.create({available_speciality_id:a,day_id:c.id},r),yield this.__recurrenceDateListRepo.create({doctor_method_id:t,available_speciality_id:a,end_date:new Date(n),start_date:new Date(o),no_of_doctors:s,no_of_slots:l},r),null})),this.createDaysAndDatesWithRecurrence=e=>Vn(this,void 0,void 0,(function*(){const{doctorMethod:t,doctorMethodId:i,formatedDays:a,newAvailableSpecialityId:n,endDateForRecurrence:o,endDate:s,endingCriteria:l,endAfterOccurences:d,startDate:_,noOfDoctors:r,noOfSlots:c,specialityId:p,facilityLocationId:u,isProviderAssignment:m,transaction:y}=e,h=!!o,f=(yield this[this.__formatDatesCriteriaMethod[`${h}`]]({daysList:a,endDateString:s,endingCriteria:l,facilityLocationId:u,numberOfRecurrsion:d,recurrenceEndDateString:o,startDateString:_})).map((e=>Object.assign(Object.assign({},e),{available_speciality_id:n,doctor_method_id:i,no_of_doctors:r,no_of_slots:c})));if(m)return f;if("automatic"!==t)for(const e of f){const t=this.shallowCopy(yield this.__repo.findOne({deleted_at:null,facility_location_id:u,speciality_id:p},{include:[{as:"dateList",model:qe,required:!0,where:{[xn.or]:[{end_date:{[xn.and]:[{[xn.gt]:e.start_date},{[xn.lte]:e.end_date}]}},{start_date:{[xn.between]:[e.start_date,e.end_date]}}],deleted_at:null}},{model:ue,as:"speciality"}]}));if(t&&Object.keys(t).length)throw un("SAME_ASSIGNMENT_EXIST")}f&&f.length&&(yield this.__recurrenceDateListRepo.bulkCreate([...f],y));let v=a;"daily"===l&&(v=[...new Set(f.map((e=>e.start_date.getDay())))]);const g=this.shallowCopy(yield this.__dayListsRepo.findAll({unit:{[xn.in]:v}})).map((e=>({available_speciality_id:n,day_id:e.id})));return yield this.__recurrenceDayListRepo.bulkCreate([...g],y),f})),this.deleteDoctorWithMultipleSpecilaity=e=>Vn(this,void 0,void 0,(function*(){const{availableSpecialityId:t,userId:i,transaction:a}=e,n=this.shallowCopy(yield this.__availableDoctorRepo.findAll({available_speciality_id:t,deleted_at:null})).map((e=>e.id));return yield this.__availableDoctorRepo.updateByIds(n,{updated_by:i,deleted_at:new Date},a),yield this.__recurrenceDateListRepo.updateByColumnMatched({available_doctor_id:{[xn.in]:n}},{updated_by:i,deleted_at:new Date},a),this.__repo.update(t,{updated_by:i,deleted_at:new Date},a)})),this.deleteDoctorWithSingleSpeciality=e=>Vn(this,void 0,void 0,(function*(){const{avilableDateLists:t,availableSpecialityId:i,dateListId:a,userId:n,transaction:o}=e,s=this.shallowCopy(yield this.__recurrenceDateListRepo.findAll({available_speciality_id:i,deleted_at:null},{},o)).length>1;return yield this.__recurrenceDateListRepo.update(a,{updated_by:n,deleted_at:new Date},o),this[this.__deleteMultipleSpecialityMethod[`${s}`]]({availableSpecialityId:i,dateListId:a,transaction:o,userId:n})})),this.deleteWithCheckForReccurence=e=>Vn(this,void 0,void 0,(function*(){const{dateListId:t,availableSpecialityId:i,userId:a,transaction:n}=e,o=this.shallowCopy(yield this.__recurrenceDateListRepo.findById(t)),s=this.shallowCopy(yield this.__availableDoctorRepo.findAll({available_speciality_id:i,deleted_at:null},{include:{as:"dateList",model:qe,required:!0,where:{deleted_at:null,end_date:o.end_date,start_date:o.start_date}}})),l=s.map((e=>e.id)),d=s.map((e=>e.dateList.map((e=>e.id)))).flat();yield this.__recurrenceDateListRepo.updateByIds(d,{deleted_at:new Date,updated_by:a},n);for(const e of l)this.shallowCopy(yield this.__recurrenceDateListRepo.findAll({available_doctor_id:e,deleted_at:null})).length||(yield this.__availableDoctorRepo.update(e,{deleted_at:new Date,updated_by:a},n))})),this.findEndDateForRecurrence=(e,t,i,a)=>Vn(this,void 0,void 0,(function*(){if("weekly"===a){const a=new Date(e);let n,o=new Date(e);a.getDay()>i[i.length-1]&&(n=this.addDaysForReccurence(a,7-a.getDay()+1),o=n);const s=o;let l=0;for(;l<t;)o.getDay()>i[i.length-1]&&(n=this.addDaysForReccurence(o,7-o.getDay())),s.setTime(s.getTime()+6048e5),l+=1;const d=i[i.length-1]-o.getDay();return this.addDaysForReccurence(s,d)}const n=new Date(e);return function(e){const t=new Date(n.getTime());return t.setDate(n.getDate()+e),t}(t)})),this.findEndDateForRecurrenceMonthly=(e,t,i)=>Vn(this,void 0,void 0,(function*(){let a=new Date(e);if(a.getDay()===i[0]){for(let e=0;e<t;e+=1)a.setMonth(a.getMonth()+1);a=new Date(a.getFullYear(),a.getMonth()+1,0)}else{let n=!0;for(;n;)if(a.setTime(a.getTime()+864e5),a.getDay()===i[0]){t=e.getMonth()!==a.getMonth()?t-1:t;for(let e=0;e<t;e+=1)a.setMonth(a.getMonth()+1);a=new Date(a.getFullYear(),a.getMonth()+1,0),n=!1}}return new Date(a)})),this.formatDatesCriteriaWithEndDate=e=>Vn(this,void 0,void 0,(function*(){const{daysList:t,endDateString:i,endingCriteria:a,recurrenceEndDateString:n,startDateString:o}=e;if(o===n)return[];const s=new Date(o),l=new Date(i),d=new Date(n),_=new Date(d.setHours(23,59,59)),r=s.getTime(),c=l.getTime()-r;let p=[],u=[];if("monthly"===a){const e=t.length;let i=1;for(;s.getTime()<=_.getTime();){const a=e*i;p=[...p,...this.filterNonNull(t.map(((e,i)=>{if(s.getDay()===t[i])return new Date(JSON.parse(JSON.stringify(s)))})))],a===p.length&&(i+=1,s.setMonth(s.getMonth()+1,0)),s.setTime(s.getTime()+864e5)}return u=(null==p?void 0:p.map((e=>({end_date:new Date(e.getTime()+c),start_date:e}))))||[],u}for(;s.getTime()<=_.getTime();)p=[...p,...this.filterNonNull(t.map(((e,i)=>{if(s.getDay()===t[i])return new Date(JSON.parse(JSON.stringify(s)))})))],s.setTime(s.getTime()+864e5);return u=(null==p?void 0:p.map((e=>({end_date:new Date(e.getTime()+c),start_date:e}))))||[],u})),this.formatDatesCriteriaWithOutEndDate=e=>Vn(this,void 0,void 0,(function*(){const{endingCriteria:t,daysList:i,startDateString:a,endDateString:n,numberOfRecurrsion:o,transaction:s}=e,l=new Date(a),d=new Date(n);let _,r=[],c=[];const p=l.getTime(),u=d.getTime()-p;if("monthly"===t){_=yield this.findEndDateForRecurrenceMonthly(l,o,i);const e=i.length;let t=1;for(;l.getTime()<=_.getTime();){const a=e*t;r=[...r,...this.filterNonNull(i.map(((e,t)=>{if(l.getDay()===i[t])return new Date(JSON.parse(JSON.stringify(l)))})))],a===r.length&&(t+=1,l.setMonth(l.getMonth()+1,0)),l.setTime(l.getTime()+864e5)}return c=(null==r?void 0:r.map((e=>({end_date:new Date(e.getTime()+u),start_date:e}))))||[],c}for(_=yield this.findEndDateForRecurrence(l,o,i,t);l.getTime()<=(null==_?void 0:_.getTime());){let e=!0;r=[...r,...this.filterNonNull(i.map(((a,n)=>{if(l.getDay()===i[n])return new Date(JSON.parse(JSON.stringify(l)));"daily"===t&&!i.includes(l.getDay())&&e&&(e=!1,_.setTime(_.getTime()+864e5))})))],l.setTime(l.getTime()+864e5)}return c=(null==r?void 0:r.map((e=>({end_date:new Date(e.getTime()+u),start_date:e}))))||[],c})),this.getNumberOfDoctors=(e,t)=>{const i=e.filter((e=>null!==e.available_doctor_id)),a=e.filter((e=>null===e.available_doctor_id)),n=this.filterUnique(e.map((e=>{const t=new Date(e.scheduled_date_time);return`${t.getHours()}:${t.getMinutes()}`}))),o=this.filterUnique(i.map((e=>null==e?void 0:e.available_doctor_id))).length;if(i.length&&!a.length)return o;if(a.length&&!i.length){const e=Math.ceil(n.length/(t+1));return e>o?e:o}if(i.length&&a.length){const e=a.filter((e=>{const t=new Date(e.scheduled_date_time),i=`${t.getHours()}:${t.getMinutes()}`;if(n.find((e=>e===i)))return e})).length;return o+Math.ceil(e/(t+1))}},this.getTimeSlotOfAssignment=e=>{const{start_date:t,end_date:i,no_of_doctors:a,no_of_slots:n}=e;let o=new Date(i).getTime()-new Date(t).getTime();if(o/=6e4,a&&n>0){const e=n/a;return Math.round(o/e)}return n>0?Math.round(o/n):0},this.updateSpecialityWithAutomaticDoctor=e=>Vn(this,void 0,void 0,(function*(){const{doctorMethodId:t,id:i,endDateFromDateList:a,startDateFromDateList:n,startDate:o,endDate:s,userId:l,noOfDoctors:d,noOfSlots:_,dateListId:r,faciltyTiming:c,endDateString:p,facilityLocationId:u,mins:m,specialityId:y,startDateString:h,_authorization:f,transaction:v}=e,g=this.shallowCopy(yield this.__availableDoctorRepo.findAll({available_speciality_id:i,deleted_at:null},{},v)).map((e=>e.id));if(1===this.shallowCopy(yield this.__recurrenceDateListRepo.findAll({available_speciality_id:i,deleted_at:null},{},v)).length){const e=this.shallowCopy(yield this.__appointmentRepo.findAll({[xn.or]:[{available_speciality_id:i,cancelled:0,deleted_at:null,evaluation_date_time:null,pushed_to_front_desk:0},{available_doctor_id:{[xn.in]:g},available_speciality_id:null,cancelled:0,deleted_at:null,evaluation_date_time:null,pushed_to_front_desk:0}]},{},v));if(e&&Object.keys(e).length)throw un("APPOINTMENT_EXISTS");yield this.__availableDoctorRepo.updateByColumnMatched({available_speciality_id:i,deleted_at:null},{deleted_at:new Date,updated_by:l},v),yield this.__recurrenceDateListRepo.updateByReferenceIds({available_doctor_id:{[xn.in]:g}},{deleted_at:new Date,updated_by:l},v),yield this.__repo.updateByIds([i],{deleted_at:new Date,updated_by:l},v),yield this.__recurrenceDateListRepo.update(r,{deleted_at:new Date,updated_by:l},v)}else{const e=this.shallowCopy(yield this.__recurrenceDateListRepo.findAll({available_doctor_id:{[xn.in]:g},deleted_at:null,end_date:a,start_date:n},{},v)).map((e=>e.id)),t=this.shallowCopy(yield this.__appointmentRepo.findOne({[xn.or]:[{available_speciality_id:null,cancelled:0,date_list_id:{[xn.in]:e},deleted_at:null,evaluation_date_time:null,pushed_to_front_desk:0},{cancelled:0,date_list_id:r,deleted_at:null,evaluation_date_time:null,pushed_to_front_desk:0}]},{},v));if(t&&Object.keys(t).length)throw un("APPOINTMENT_EXISTS");yield this.__recurrenceDateListRepo.update(r,{deleted_at:new Date,updated_by:l},v),yield this.__recurrenceDateListRepo.updateByIds(e,{deleted_at:new Date,updated_by:l},v)}const b=this.shallowCopy(yield this.createAvailbleSpecialityWithoutDoctor({_authorization:f,doctorMethodId:t,endDate:s,facilityLocationId:u,noOfDoctors:d,specialityId:y,startDate:o,transaction:v,userId:l})),S=this.filterUnique(null==c?void 0:c.map((e=>e.day_id)));return this.createAvailableDoctorsAutomatically({checkForRecurrence:!1,doctorMethodId:t,endDate:p,facilityLocationId:u,formatedDays:S,mins:m,newAvailableSpecialityId:b.id,noOfDoctors:d,noOfSlots:_,specialityId:y,startDate:h,transaction:v,userId:l})})),this.updateSpecialityWithManualDoctor=e=>Vn(this,void 0,void 0,(function*(){const{id:t,endDateFromDateList:i,startDateFromDateList:a,doctorMethodId:n,noOfDoctors:o,userId:s,dateListId:l,endDate:d,startDate:_,doctors:r,facilityLocationId:c,startDateString:p,endDateString:u,mins:m,specialityId:y,checkTimingData:h,_authorization:f,transaction:v}=e;if(!r||!r.length)throw un("NO_MANUALLY_DOCTORS");const g=this.shallowCopy(yield this.__availableDoctorRepo.findAll({available_speciality_id:t,deleted_at:null},{},v)).map((e=>e.id));if(1===this.shallowCopy(yield this.__recurrenceDateListRepo.findAll({available_speciality_id:t,deleted_at:null},{},v)).length){const e=this.shallowCopy(yield this.__appointmentRepo.findAll({[xn.or]:[{available_speciality_id:t,cancelled:0,deleted_at:null,evaluation_date_time:null,pushed_to_front_desk:0},{available_doctor_id:{[xn.in]:g},available_speciality_id:null,cancelled:0,deleted_at:null,evaluation_date_time:null,pushed_to_front_desk:0}]},{},v));if(e&&Object.keys(e).length)throw un("APPOINTMENT_EXISTS");yield this.__availableDoctorRepo.updateByColumnMatched({available_speciality_id:t,deleted_at:null},{deleted_at:new Date,updated_by:s},v),yield this.__recurrenceDateListRepo.updateByReferenceIds({available_doctor_id:{[xn.in]:g}},{deleted_at:new Date,updated_by:s},v),yield this.__repo.updateByIds([t],{deleted_at:new Date,updated_by:s},v),yield this.__recurrenceDateListRepo.update(l,{deleted_at:new Date,updated_by:s},v)}else{const e=this.shallowCopy(yield this.__recurrenceDateListRepo.findAll({available_doctor_id:{[xn.in]:g},deleted_at:null,end_date:i,start_date:a},{},v)).map((e=>e.id)),t=this.shallowCopy(yield this.__appointmentRepo.findOne({[xn.or]:[{available_speciality_id:null,cancelled:0,date_list_id:{[xn.in]:e},deleted_at:null,evaluation_date_time:null,pushed_to_front_desk:0},{cancelled:0,date_list_id:l,deleted_at:null,evaluation_date_time:null,pushed_to_front_desk:0}]},{},v));if(t&&Object.keys(t).length)throw un("APPOINTMENT_EXISTS");yield this.__recurrenceDateListRepo.update(l,{deleted_at:new Date,updated_by:s},v),yield this.__recurrenceDateListRepo.updateByIds(e,{deleted_at:new Date,updated_by:s},v)}const b=this.shallowCopy(yield this.__userRepo.findAll({deleted_at:null,id:{[xn.in]:r}},{include:[{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},{as:"userTimings",model:Le,required:!1,where:{deleted_at:null,facility_location_id:c}}]},v));if(!b||!b.length)throw un("NO_DOCTOR_FOUND");const S=b.map((e=>e.userTimings)).flat();if(!(yield this.checkDoctorTimingsWithConflicts(h,S,p,u,!1)).length)throw un("ASSIGNMENT_DOES_NOT_FALL_FOR_DOCTOR");const I=this.shallowCopy(yield this.createAvailbleSpecialityWithoutDoctor({_authorization:f,doctorMethodId:n,endDate:d,facilityLocationId:c,noOfDoctors:o,specialityId:y,startDate:_,transaction:v,userId:s}));return this.createAvailableDoctorsManually({doctorMethodId:n,doctors:r,endDate:u,facilityLocationId:c,mins:m,newAvailableSpecialityId:I.id,startDate:p,transaction:v,userId:s})})),this.updateSpecialityWithNoneDoctor=e=>Vn(this,void 0,void 0,(function*(){const{doctorMethodId:t,startDateFromDateList:i,endDateFromDateList:a,id:n,facilityLocationId:o,specialityId:s,noOfDoctors:l,noOfSlots:d,userId:_,dateListId:r,endDate:c,startDate:p,_authorization:u,transaction:m}=e,y=this.shallowCopy(yield this.__availableDoctorRepo.findAll({available_speciality_id:n,deleted_at:null},{},m)).map((e=>e.id));if(1===this.shallowCopy(yield this.__recurrenceDateListRepo.findAll({available_speciality_id:n,deleted_at:null},{},m)).length){const e=this.shallowCopy(yield this.__appointmentRepo.findAll({[xn.or]:[{available_speciality_id:n,cancelled:0,deleted_at:null,evaluation_date_time:null,pushed_to_front_desk:0},{available_doctor_id:{[xn.in]:y},available_speciality_id:null,cancelled:0,deleted_at:null,evaluation_date_time:null,pushed_to_front_desk:0}]},{},m));if(e&&Object.keys(e).length)throw un("APPOINTMENT_EXISTS");yield this.__availableDoctorRepo.updateByColumnMatched({available_speciality_id:n,deleted_at:null},{deleted_at:new Date,updated_by:_},m),yield this.__recurrenceDateListRepo.updateByReferenceIds({available_doctor_id:{[xn.in]:y}},{deleted_at:new Date,updated_by:_},m),yield this.__repo.updateByIds([n],{deleted_at:new Date,updated_by:_},m),yield this.__recurrenceDateListRepo.update(r,{deleted_at:new Date,updated_by:_},m)}else{const e=this.shallowCopy(yield this.__recurrenceDateListRepo.findAll({available_doctor_id:{[xn.in]:y},deleted_at:null,end_date:a,start_date:i},{},m)).map((e=>e.id)),t=this.shallowCopy(yield this.__appointmentRepo.findOne({[xn.or]:[{available_speciality_id:null,cancelled:0,date_list_id:{[xn.in]:e},deleted_at:null,evaluation_date_time:null,pushed_to_front_desk:0},{cancelled:0,date_list_id:r,deleted_at:null,evaluation_date_time:null,pushed_to_front_desk:0}]},{},m));if(t&&Object.keys(t).length)throw un("APPOINTMENT_EXISTS");yield this.__recurrenceDateListRepo.update(r,{deleted_at:new Date,updated_by:_},m),yield this.__recurrenceDateListRepo.updateByIds(e,{deleted_at:new Date,updated_by:_},m)}return this.createAvailbleSpecialityWithoutDoctor({_authorization:u,doctorMethodId:t,endDate:c,facilityLocationId:o,noOfDoctors:l,specialityId:s,startDate:p,transaction:m,userId:_})})),this.__http=new m,this.__formatDatesCriteriaMethod={false:"formatDatesCriteriaWithOutEndDate",true:"formatDatesCriteriaWithEndDate"},this.__createAvailableDoctorsMethod={automatic:"createAvailableDoctorsAutomatically",manual:"createAvailableDoctorsManually"},this.__createDaysAndDatesMethod={false:"createDaysAndDatesWithoutRecurrence",true:"createDaysAndDatesWithRecurrence"},this.__updateDoctorMethod={automatic:"updateSpecialityWithAutomaticDoctor",manual:"updateSpecialityWithManualDoctor",none:"updateSpecialityWithNoneDoctor"},this.__deleteSpecialityMethod={false:"deleteDoctorWithSingleSpeciality",true:"deleteDoctorWithMultipleSpecilaity"},this.__deleteMultipleSpecialityMethod={false:"deleteDoctorWithMultipleSpecilaity",true:"deleteWithCheckForReccurence"}}checkProviderIsAlreadyAssigned(e){return Vn(this,void 0,void 0,(function*(){const{doctors:t,startDate:i,endDate:a,timeZone:n,availableSpecialityId:o}=e,s=this.shallowCopy(yield this.__availableDoctorRepo.findOne({deleted_at:null,doctor_id:t},{include:[{as:"dateList",model:qe,required:!0,where:{deleted_at:null,[xn.or]:[{[xn.and]:[{start_date:{[xn.lte]:i}},{end_date:{[xn.gte]:a}}]},{end_date:{[xn.and]:[{[xn.gte]:i},{[xn.lte]:a}]}},{start_date:{[xn.and]:[{[xn.gte]:i},{[xn.lte]:a}]}}]}},{as:"facilityLocations",model:Oe,include:{as:"facility",model:Ut,required:!0},required:!0},{as:"availableSpeciality",model:it,required:!0,where:Object.assign({deleted_at:null},o&&{id:{[xn.ne]:o}}),include:{model:ue,require:!0}}]}));if(s){const e=un("PROVIDER_ALREADY_ASSIGN"),t=this.convertDateToLocal(new Date(s.start_date),n).toLocaleString("en-US",{year:"numeric",day:"numeric",month:"numeric",hour:"numeric",minute:"numeric",hour12:!0}).split(","),i=this.convertDateToLocal(new Date(s.end_date),n).toLocaleString("en-US",{hour:"numeric",minute:"numeric",hour12:!0}),a=t[0],o=t[1];throw e.message=`${e.message} in ${s.facilityLocations.facility.qualifier} - ${s.facilityLocations.qualifier} - ${s.availableSpeciality.speciality.name}, on ${a} from${o} to ${i}`,e}}))}multiAssignmentDoesntFallError(e){const{facilityLocationName:t,facilityName:i}=e[0],a=un("ASSIGNMENT_DOES_NOT_FALL");let n=`${a.message} of ${i} - ${t}, `;for(const[t,i]of e.entries()){const{facilityStartDate:a,facilityEndDate:o,specialityName:s}=i,l=t===e.length-1&&0!==t;n+=`${t!==e.length-1&&0!==t?", for ":""}${l?" and for ":""}${s}, ${a.toLocaleString("en-US",{weekday:"long",hour:"numeric",minute:"numeric",hour12:!0})} - ${o.toLocaleString("en-US",{hour:"numeric",minute:"numeric",hour12:!0})}`}throw a.message=n,a}multiAssignmentDoesntFallDoctorError(e){var t,i;return Vn(this,void 0,void 0,(function*(){const{facilityLocationName:a,facilityName:n,userId:o}=e[0],s=yield this.__userRepo.findOne({id:o},{include:[{as:"userBasicInfo",model:Ce,required:!0},{as:"medicalIdentifiers",model:Mt,required:!1,include:{model:xt,as:"billingTitle",required:!0}}]}),l=null===(i=null===(t=null==s?void 0:s.medicalIdentifiers)||void 0===t?void 0:t.billingTitle)||void 0===i?void 0:i.name;let d=`${s.userBasicInfo.first_name} ${s.userBasicInfo.middle_name?s.userBasicInfo.middle_name+" ":""}${s.userBasicInfo.last_name}`;const _=un("ASSIGNMENT_DOES_NOT_FALL_FOR_DOCTOR");let r=`${_.message} of ${n} - ${a} for ${d}, ${l?l+" ":""}for `;for(const[t,i]of e.entries()){const{doctorStartDate:a,doctorEndDate:n,specialityName:o}=i,s=t===e.length-1&&0!==t;r+=`${t!==e.length-1&&0!==t?", for ":""}${s?" and for ":""}${o}, ${a.toLocaleString("en-US",{weekday:"long",hour:"numeric",minute:"numeric",hour12:!0})} - ${n.toLocaleString("en-US",{hour:"numeric",minute:"numeric",hour12:!0})}`}throw _.message=r,_}))}MultiAssignmentError(e,t){const i=un(t),{message:a}=i;return Object.assign(Object.assign({},i),{message:`${e} - ${a}`})}};Kn=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object])],Kn);var zn=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};const Gn=ra.Op;let Hn=class extends bn{constructor(e,t,i,a,n,o,s,l){super(),this.__repo=e,this.__userRepo=t,this.__colorCodeTypeRepo=i,this.__facilityLocationRepo=a,this.__userFacilityRepo=n,this.__rolesRepo=o,this.__specialityRepo=s,this.http=l,this.setToDefault=(e,t)=>zn(this,void 0,void 0,(function*(){const{user_id:t=Number(process.env.USERID),object_ids:i,type_id:a}=e;return this.__repo.updateByColumnMatched({object_id:{[Gn.in]:i},type_id:a},{deleted_at:new Date,updated_by:t})})),this.update=(e,t,i)=>zn(this,void 0,void 0,(function*(){const{id:t,user_id:a=Number(process.env.USERID),object_id:n,type_id:o,color_code:s}=e;if(t)return this.__repo.update(t,{code:s,updated_by:a},i);const l=this.shallowCopy(yield this.__repo.findOne({user_id:a,object_id:n,type_id:o,deleted_at:null}));if(!l||!Object.keys(l).length)return this.__repo.create({user_id:a,object_id:n,type_id:o,code:s},i);const{id:d}=l;return this.__repo.update(d,{code:s,updated_by:a},i)})),this.__http=new l}};Hn=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object,Object,Object,Object,Object,Object,Object])],Hn);var Yn=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};const Wn=ra.Op;let Qn=class extends bn{constructor(e,t){super(),this.doctorInstruction=e,this.http=t,this.get=(e,t)=>Yn(this,void 0,void 0,(function*(){const{doctor_ids:t,end_date:i,start_date:a}=e,n=new Date(a),o=new Date(i);return this.__repo.findAll({date:{[Wn.and]:[{[Wn.lt]:o},{[Wn.gte]:n}]},deleted_at:null,doctor_id:{[Wn.in]:t}},{include:{as:"doctor",attributes:{exclude:["password"]},include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}}})})),this.post=(e,t)=>Yn(this,void 0,void 0,(function*(){const{doctor_id:t,date:i,facility_location_id:a,instruction:n,user_id:o}=e;return this.__repo.create({date:i,doctor_id:t,facility_location_id:a,instruction:n})})),this.put=(e,t)=>Yn(this,void 0,void 0,(function*(){const{doctor_id:t,date:i,facility_location_id:a,id:n,instruction:o,user_id:s}=e;return this.__repo.update(n,{date:i,doctor_id:t,facility_location_id:a,instruction:o,updated_by:s})})),this.__repo=e,this.__http=new t}};Qn=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object])],Qn);ra.Op;let Jn=class extends bn{constructor(e,t){super(),this.__repo=e,this.http=t,this.getAll=(e,t)=>{return i=this,a=void 0,o=function*(){const{day_id:t}=e;return this.__repo.findAll({deleted_at:null},{include:{as:"faciltyTiming",model:ge,where:{day_id:t,deleted_at:null}}})},new((n=void 0)||(n=Promise))((function(e,t){function s(e){try{d(o.next(e))}catch(e){t(e)}}function l(e){try{d(o.throw(e))}catch(e){t(e)}}function d(t){var i;t.done?e(t.value):(i=t.value,i instanceof n?i:new n((function(e){e(i)}))).then(s,l)}d((o=o.apply(i,a||[])).next())}));var i,a,n,o},this.__http=new t}};Jn=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object])],Jn);var Xn=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};let Zn=class extends bn{constructor(e,t,i,a){super(),this.__patientRepo=e,this.__contactPersonRepo=t,this.__contactPersonTypesRepo=i,this.getPatient=(e,t)=>Xn(this,void 0,void 0,(function*(){const{user_id:t=Number(process.env.USERID),id:i}=e,a=this.shallowCopy(yield this.__patientRepo.findById(i));if(!a||!Object.keys(a).length)throw un("INVALID_PATIENT_ID");const n=this.shallowCopy(yield this.__contactPersonTypesRepo.findOne({deleted_at:null,slug:"self"})),o=this.shallowCopy(yield this.__contactPersonRepo.findOne({case_id:null,contact_person_type_id:n.id,deleted_at:null,object_id:i},{include:{as:"patientAddress",model:k,required:!1,where:{deleted_at:null}}}));return Object.assign(Object.assign({},a),{contact_info:o})})),this.getWalkInPatients=(e,t)=>Xn(this,void 0,void 0,(function*(){const i={headers:{Authorization:`${t}`}};return this.__http.post(`${process.env.KIOSK_URL}case-patient-session/walk-in-patients   `,Object.assign({},e),i)})),this.__http=new a}};Zn=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object,Object,Object])],Zn);var eo=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};let to=class extends bn{constructor(e,t,i,a){super(),this.__facilityLocationRepo=e,this.__specialityRepo=t,this.__userRepo=i,this.getDoctors=(e,t)=>eo(this,void 0,void 0,(function*(){const{user_id:t=Number(process.env.USERID),speciality_id:i,facility_location_id:a,doctor_id:n}=e,o={deleted_at:null};n&&(o.id=n);const s=a?{facility_location_id:a}:{},l=i?{speciality_id:i}:{};return this.__userRepo.findAll(Object.assign({},o),{include:[{as:"userFacilities",model:Ie,required:!(!i&&!a),where:Object.assign(Object.assign(Object.assign({},s),l),{deleted_at:null})},{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}}]})})),this.getFacilities=(e,t)=>eo(this,void 0,void 0,(function*(){const{user_id:t=Number(process.env.USERID),speciality_id:i,facility_location_id:a,doctor_id:n}=e,o={deleted_at:null};a&&(o.id=a);const s=n?{user_id:n}:{},l=i?{speciality_id:i}:{};return this.__facilityLocationRepo.findAll(Object.assign({},o),{include:[{as:"userFacilities",model:Ie,required:!(!i&&!n),where:Object.assign(Object.assign(Object.assign({},s),l),{deleted_at:null})},{as:"facility",model:Ut,required:!1,where:{deleted_at:null}}]})})),this.getSpecialities=(e,t)=>eo(this,void 0,void 0,(function*(){const{user_id:t=Number(process.env.USERID),speciality_id:i,facility_location_id:a,doctor_id:n}=e,o={deleted_at:null};i&&(o.id=i);const s=n?{user_id:n}:{},l=a?{facility_location_id:a}:{};return this.__specialityRepo.findAll(Object.assign({},o),{include:{as:"userFacilty",model:Ie,required:!(!a&&!n),where:Object.assign(Object.assign(Object.assign({},s),l),{deleted_at:null})}})})),this.__http=new a}};to=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object,Object,Object])],to);var io=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))},ao=function(e,t){var i={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(i[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(a=Object.getOwnPropertySymbols(e);n<a.length;n++)t.indexOf(a[n])<0&&Object.prototype.propertyIsEnumerable.call(e,a[n])&&(i[a[n]]=e[a[n]])}return i};const no=ra.Op;let oo=class extends bn{constructor(e,t,i,a,n,o,s,l,d){super(),this.__repo=e,this.__userFacilityRepo=t,this.__facilityLocationRepo=i,this.__userRepo=a,this.__availableDoctorRepo=n,this.__appointmentRepo=o,this.__modelHasRolesRepo=s,this.__unAvailableDoctorRepo=l,this.http=d,this.details=(e,t)=>io(this,void 0,void 0,(function*(){var t;const{unavailabile_doctor_id:i,facility_location_ids:a,user_id:n=Number(process.env.USERID)}=e,o=this.shallowCopy(yield this.__unAvailableDoctorRepo.findOne({deleted_at:null,id:i},{include:[{as:"doctor",attributes:{exclude:["password"]},include:[{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},{as:"userFacilities",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:Ie,required:!1,where:{deleted_at:null}},{as:"medicalIdentifiers",model:Mt,required:!1,attributes:["id"],include:{as:"billingTitle",attributes:["name"],model:xt,where:{deleted_at:null},required:!1},where:{deleted_at:null}}],model:le,required:!1,where:{deleted_at:null}},{as:"createdBy",include:[{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}}],model:le,required:!1,where:{deleted_at:null}},{as:"updatedBy",include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}},{as:"approvedBy",include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}}],order:[["created_at","DESC"]]})),s=this.shallowCopy(yield this.__userRepo.findOne({deleted_at:null,id:n},{include:{as:"colorCodes",include:{as:"type",model:Qe,where:{deleted_at:null,slug:"facility_location"}},model:Ze,where:{deleted_at:null}}})),l=this.shallowCopy(yield this.__userRepo.findOne({deleted_at:null,id:n},{include:{as:"colorCodes",include:{as:"type",model:Qe,where:{deleted_at:null,slug:"speciality"}},model:Ze,required:!1,where:{deleted_at:null}}}));if(!(l||Object.keys(l).length||s||Object.keys(s).length))throw un("NO_RECORD_FOUND");const{colorCodes:d}=l||{},{colorCodes:_}=s||{},r=o||{},c=r.doctor,{userFacilities:p,userBasicInfo:u,medicalIdentifiers:m}=c,y=ao(c,["userFacilities","userBasicInfo","medicalIdentifiers"]),{doctor:h,createdBy:f,updatedBy:v,approvedBy:g}=r,b=ao(r,["doctor","doctor","createdBy","updatedBy","approvedBy"]),S=this.shallowCopy(yield this.__availableDoctorRepo.findAll({deleted_at:null,doctor_id:o.doctor_id},{include:{as:"dateList",model:qe,required:!0,where:{[no.or]:[{deleted_at:null,end_date:{[no.gt]:o.start_date},start_date:{[no.lte]:o.start_date}},{deleted_at:null,start_date:{[no.and]:[{[no.gte]:o.start_date},{[no.lt]:o.end_date}]}}]}}})),I=S.map((e=>e.id)),D=this.shallowCopy(yield this.__appointmentRepo.findAll({available_doctor_id:{[no.in]:I},cancelled:0,deleted_at:null,pushed_to_front_desk:0,scheduled_date_time:{[no.between]:[o.start_date,o.end_date]}})).length,w=this.filterUnique(S.map((e=>e.facility_location_id))),O=this.shallowCopy(yield this.__facilityLocationRepo.findAll({deleted_at:null,id:{[no.in]:w}})),T=null==O?void 0:O.map((e=>{var t,i;return Object.assign({appointment_count:D,facility_color:null!==(i=null===(t=null==_?void 0:_.find((t=>t.object_id===e.id)))||void 0===t?void 0:t.code)&&void 0!==i?i:"#9d9d9d",facility_location_id:e.id,is_accessible:a.includes(e.id)?1:0},e)})),A=p.map((e=>{var t,i;const{speciality:a,facility_location_id:n}=e;return Object.assign({color:null!==(i=null===(t=null==d?void 0:d.find((t=>{var i;return t.object_id===(null===(i=null==e?void 0:e.speciality)||void 0===i?void 0:i.id)})))||void 0===t?void 0:t.code)&&void 0!==i?i:"#9d9d9d",facility_location_id:n},a)})).flat();return Object.assign(Object.assign({affected_facilities:T,doctor:Object.assign(Object.assign({},y),{specialities:[...A],userBasicInfo:u,provider_title:m?null===(t=null==m?void 0:m.billingTitle)||void 0===t?void 0:t.name:null})},b),{approved_by:g?Object.assign({user_basic_info:g.userBasicInfo},this.deleteAttributes(["userBasicInfo"],g)):null,created_by:f?Object.assign({user_basic_info:f.userBasicInfo},this.deleteAttributes(["userBasicInfo"],f)):null,updated_by:v?Object.assign({user_basic_info:v.userBasicInfo},this.deleteAttributes(["userBasicInfo"],v)):null})})),this.getAll=(e,t)=>io(this,void 0,void 0,(function*(){const{facility_location_ids:t,user_id:i=Number(process.env.USERID),per_page:a,page:n}=e,o=a||10,s=n||1,l=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,facility_location_id:{[no.in]:t},speciality_id:{[no.ne]:null}})),d=this.filterUnique(null==l?void 0:l.map((e=>null==e?void 0:e.user_id))),_=this.shallowCopy(yield this.__userRepo.findOne({deleted_at:null,id:i},{include:{as:"colorCodes",include:{as:"type",model:Qe,where:{deleted_at:null,slug:"speciality"}},model:Ze,required:!1,where:{deleted_at:null}}})),{colorCodes:r}=_||{},c=this.shallowCopy(yield this.__unAvailableDoctorRepo.paginate({where:{deleted_at:null,doctor_id:{[no.in]:d}}},s,o,null,{include:[{as:"doctor",attributes:{exclude:["password"]},include:[{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},{as:"userFacilities",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:Ie,required:!1,where:{deleted_at:null}},{as:"medicalIdentifiers",model:Mt,attributes:["id"],required:!1,include:{as:"billingTitle",attributes:["name"],model:xt,required:!1,where:{deleted_at:null}},where:{deleted_at:null}}],model:le,required:!0,where:{deleted_at:null}}],order:[["created_at","DESC"]]}));return{docs:[...c.docs.map((e=>{var t,i,a,n,o,s,l;const{doctor:d}=e||{};return Object.assign({provider_title:(null===(t=null==e?void 0:e.doctor)||void 0===t?void 0:t.medicalIdentifiers)?null===(a=null===(i=null==d?void 0:d.medicalIdentifiers)||void 0===i?void 0:i.billingTitle)||void 0===a?void 0:a.name:null,speciality_color:(null===(o=null===(n=null==e?void 0:e.doctor)||void 0===n?void 0:n.userFacilities)||void 0===o?void 0:o.length)&&null!==(l=null===(s=null==r?void 0:r.find((e=>{var t,i;return e.object_id===(null===(i=null===(t=null==d?void 0:d.userFacilities)||void 0===t?void 0:t.find((t=>t.speciality_id===e.object_id)))||void 0===i?void 0:i.speciality_id)})))||void 0===s?void 0:s.code)&&void 0!==l?l:"#9d9d9d"},e)}))],is_last:null==c?void 0:c.is_last,no_of_pages:null==c?void 0:c.no_of_pages,page_number:null==c?void 0:c.page_number,total:null==c?void 0:c.total}})),this.__http=new d}};oo=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object,Object,Object,Object,Object,Object,Object,Object])],oo);var so=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};const lo=ra.Op;let _o=class extends bn{constructor(e,t,i,a,n,o,s,l,d,_,r,c){super(),this.__repo=e,this.__userRepo=t,this.__availableDoctorRepo=i,this.__appointmentRepo=a,this.__recurrenceDateListRepo=n,this.__actionPreferencesRepo=o,this.__userFacilityRepo=s,this.__modelHasRolesRepo=l,this.__appointmentStatusRepo=d,this.__kioskCaseRepo=_,this.__caseTypesRepo=r,this.http=c,this.addUnavailableDoctor=(e,t)=>so(this,void 0,void 0,(function*(){const{user_id:t=Number(process.env.USERID),description:i,doctor_id:a,start_date:n,end_date:o,subject:s}=e,l=this.shallowCopy(yield this.__repo.findAll({doctor_id:a,deleted_at:null,[lo.or]:[{[lo.and]:[{start_date:{[lo.lte]:new Date(n)}},{end_date:{[lo.gte]:new Date(o)}}]},{[lo.and]:[{start_date:{[lo.lt]:new Date(n)}},{end_date:{[lo.gt]:new Date(o)}}]},{[lo.and]:[{start_date:{[lo.lt]:new Date(n)}},{end_date:{[lo.lt]:new Date(o)}},{end_date:{[lo.gt]:new Date(n)}},{start_date:{[lo.lt]:new Date(o)}}]},{[lo.and]:[{start_date:{[lo.gte]:new Date(n)}},{end_date:{[lo.lte]:new Date(o)}}]},{[lo.and]:[{start_date:{[lo.gt]:new Date(n)}},{end_date:{[lo.lt]:new Date(o)}}]},{[lo.and]:[{start_date:{[lo.gt]:new Date(n)}},{start_date:{[lo.lt]:new Date(o)}}]}]}));if(l&&Object.keys(l).length)throw un("UNAVAILBILITY_SAME_TIME");return this.__repo.create({approval_status:null,created_by:t,description:i,doctor_id:a,end_date:o,start_date:n,subject:s})})),this.deleteUnavailableDoctor=(e,t)=>so(this,void 0,void 0,(function*(){const{id:t,user_id:i=Number(process.env.USERID),comments:a}=e;return this.__repo.update(t,{comments:a,deleted_at:new Date,updated_by:i})})),this.getAppointments=(e,t)=>so(this,void 0,void 0,(function*(){const{date_list_id:t,start_date:i,end_date:a}=e,n=new Date(i),o=new Date(a),s=this.shallowCopy(yield this.__appointmentRepo.findAll({cancelled:0,date_list_id:t,deleted_at:null,pushed_to_front_desk:0,scheduled_date_time:{[lo.between]:[n,o]}},{include:[{as:"patient",model:Et,required:!1,where:{deleted_at:null}},{as:"appointmentStatus",model:g,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null}},{as:"availableDoctor",include:{as:"doctor",attributes:{exclude:["password"]},include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}},model:ot,required:!0,where:{deleted_at:null}}]}));return s&&s.length?[...this.formatedAppointmentAgainstDateList(s)]:[]})),this.update=(e,t,i)=>so(this,void 0,void 0,(function*(){const{approval_status:a,user_id:n=Number(process.env.USERID),id:o}=e,s=this.shallowCopy(yield this.__repo.findById(o));if(!s||!Object.keys(s).length)throw un("NO_UNAVAILABILTY_FOUND");if(0===s.approval_status||1===s.approval_status)throw un("ASSIGNMENT_NOT_FOUND");return this[`${this.__methodName[`${a}`]}`](s,o,n,t,i)})),this.updateApprovalStatus=(e,t,i,a)=>so(this,void 0,void 0,(function*(){yield this.__repo.update(e,{approval_status:t,approved_by:i,updated_at:new Date,updated_by:i},a);const n=this.shallowCopy(yield this.__userRepo.findById(i,{include:{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}}}));return{approved_by:Object.assign({user_basic_info:n.userBasicInfo},this.deleteAttributes(["userBasicInfo"],n))}})),this.acceptDoctorUnavailibility=(e,t,i,a,n)=>so(this,void 0,void 0,(function*(){var o,s,l,d;const{start_date:_,end_date:r,doctor_id:c}=e,p=this.__actionPreferencesRepo.getJoinClause("update_unavailable_doctors"),u=this.shallowCopy(yield this.__actionPreferencesRepo.findOne({user_id:i,deleted_at:null},{include:[...p]})),m=this.shallowCopy(yield this.__availableDoctorRepo.findAll({doctor_id:c,deleted_at:null},{include:[{as:"dateList",include:{as:"appointments",model:He,required:!1,where:{cancelled:!1,deleted_at:null,pushed_to_front_desk:!1,scheduled_date_time:{[lo.and]:[{[lo.gte]:_},{[lo.lt]:r}]}}},model:qe,required:!0,where:{[lo.or]:[{start_date:{[lo.lte]:_},end_date:{[lo.gte]:r},deleted_at:null},{start_date:{[lo.gte]:_,[lo.lt]:r},deleted_at:null},{end_date:{[lo.gt]:_,[lo.lte]:r},deleted_at:null}]}}]})),y=null!==(s=null===(o=null==u?void 0:u.actionPreferencesType)||void 0===o?void 0:o.slug)&&void 0!==s?s:"cancel",h=null==u?void 0:u.facility_location_type;if(!m.length)return this.updateApprovalStatus(t,1,i,n);let f=[];const v=[],g=[];let b=[];const S=m.filter((e=>e.available_speciality_id)).map((e=>e.dateList)).flat().map((e=>e.appointments)).flat().reduce(((e,t)=>[...e,t.id]),[]),I=m.filter((e=>new Date(e.start_date).getTime()>=new Date(_).getTime()&&new Date(e.end_date).getTime()<=new Date(r).getTime())).map((e=>e.id));for(const e of m){const{dateList:t}=e;for(const i of t){const{appointments:t}=i;if(t.length&&null!==e.available_speciality_id){const i=t.map((e=>e.id));if("forward_to_frontdesk"===y){const i=u.actionPreferencesFacilityLocations.find((t=>t.origin_id===e.facility_location_id));b=u.actionPreferencesFacilityLocations.map((e=>e.target_id)),i&&Object.keys(i).length&&(!g.some((e=>e===i.origin_id))&&g.push(i.origin_id),!g.some((e=>e===i.target_id))&&g.push(i.target_id)),v.push({forward_appointments:t,origin_clinic_id:null!==(l=null==i?void 0:i.origin_id)&&void 0!==l?l:e.facility_location_id,target_clinic_id:null!==(d=null==i?void 0:i.target_id)&&void 0!==d?d:b[0]})}f=f.concat(i)}}}if(S.length){yield this.__appointmentRepo.updateByIds(S,{available_doctor_id:null,updated_by:i,updated_at:new Date},n);const e={headers:{Authorization:a}};this.__http.post(`${process.env.EMAIL_TEMPLATE_GENERATOR_URL}appointment/generate-data-with-multiple-context`,{appointment_ids:[S],email_title:"Appointment Updated"},e),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:S},e);const t=yield this.getAppointmentById({appointment_id:[S],user_id:i},a);this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:t,action_point:"updated"},e)}return I.length?(yield this.__recurrenceDateListRepo.updateByReferenceIds({available_doctor_id:{[lo.in]:I}},{deleted_at:new Date,updated_by:i},n),this.__availableDoctorRepo.updateByIds(I,{deleted_at:new Date,updated_by:i},n)):f.length?(yield this[this.__actionPreferencesMethodName[`${y}`]]({unavailibility_end_date:r,facility_location_tpye:h,userId:i,facility_locations:g,allAppointments:f,forwardAppointments:v,_authorization:a,transaction:n}))?this.updateApprovalStatus(t,1,i,n):void 0:this.updateApprovalStatus(t,1,i,n)})),this.autoResolveAppointments=(e,t)=>so(this,void 0,void 0,(function*(){const{allAppointments:t,available_doctor_id:i,userId:a,facility_location_tpye:n,unavailibility_end_date:o}=e,s=this.shallowCopy(yield this.__appointmentRepo.findAll({deleted_at:null,id:{[lo.in]:t}},{include:[{as:"availableDoctor",include:[{as:"doctor",attributes:{exclude:["password"]},include:{as:"userFacilities",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:Ie,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}}],model:ot,required:!0,where:{deleted_at:null}},{as:"dateList",model:qe,required:!1,where:{deleted_at:null}}],order:[["scheduled_date_time","ASC"]]}));if(!s||!s.length||s.length!==t.length)throw un("NO_APPOINTMENT_FOUND");const l=this.formatAvailableDoctorForAutoResolve(s,i),d=l[1],_=l[0],r=o?new Date(o):new Date(d.end_date),c=new Date(new Date(r).setMonth(r.getMonth()+2)),p=yield this.findFacilityLocations(d.doctor_id,a),u={doctor_id:d.doctor_id,end_date:{[lo.lte]:c},facility_location_id:{[lo.in]:p},start_date:{[lo.gte]:r}};i&&(u.id={[lo.ne]:i});const m=this.shallowCopy(yield this.__availableDoctorRepo.findAll(Object.assign({},u),{include:[{as:"appointments",model:He,required:!1,where:{deleted_at:null}},{as:"doctor",attributes:{exclude:["password"]},include:{as:"userFacilities",model:Ie,required:!1,where:{deleted_at:null}},model:le,required:!1,where:{deleted_at:null}}]}));if(!m||!m.length)throw un("NO_OTHER_ASSIGNMENTS_FOUND");const y=this.shallowCopy(yield this.__repo.findAll({approval_status:1,doctor_id:d.doctor_id,end_date:{[lo.lte]:c},start_date:{[lo.gte]:r}}));let h,f=m.map((e=>e.appointments)).flat(),v=[],g=0;for(;_.length>g;)h=m.find((e=>{if(f=[...f,...null==v?void 0:v.filter((t=>!(t.available_doctor_id!==e.id)))],"same"!==n){const{doctor:{userFacilities:t}}=e;for(const i of t)if((null==d?void 0:d.speciality_id)===i.speciality_id){let t=this.getFreeSlotsForAssignment(d,f,d.over_booking+1,d.time_slot,0);t=this.getFreeSlotsWithUnavailabilityChk(t,y,d.time_slot);const i=this.resolveDoctorAppointmentOnFreeSlots(t,_,e.id,d.time_slot);if(0===i[1].length)return v=[...v,...i[0]],e;v=[...v,...i[0]]}}else if(d.facility_location_id===e.facility_location_id){let t=this.getFreeSlotsForAssignment(d,f,d.over_booking+1,d.time_slot,0);t=this.getFreeSlotsWithUnavailabilityChk(t,y,d.time_slot);const i=this.resolveDoctorAppointmentOnFreeSlots(t,_,e.id,d.time_slot);if(0===i[1].length)return v=[...v,...i[0]],e;v=[...v,...i[0]]}v=this.filterNonNull(v)})),g+=1;if(!v.length)throw un("NO_FREE_SLOTS_FOUND");if(o&&v.length!==t.length)throw un("CANNOT_FIND_FREESLOTS");const b=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({deleted_at:null,slug:"re_scheduled"})),S=null==v?void 0:v.map((e=>Object.assign(Object.assign({},e),{status_id:null==b?void 0:b.id}))),I=s.map((e=>e.id));yield this.__repo.updateByIds(I,{deleted_at:new Date,updated_by:a});return this.shallowCopy(yield this.__appointmentRepo.bulkCreate([...S]))})),this.cancelAppointments=e=>so(this,void 0,void 0,(function*(){const{userId:t,allAppointments:i,_authorization:a,transaction:n}=e,o={headers:{Authorization:`${a}`}},{status:s}=yield this.__http.put(`${process.env.KIOSK_URL}case-patient-session/remove-patient-sessions`,{appointment_ids:i},o);if(200!==s)throw un("ERROR_FROM_KIOSK");const l=yield this.__appointmentRepo.updateByIds(i,{cancelled:1,updated_by:t,updated_at:new Date},n);this.__http.post(`${process.env.EMAIL_TEMPLATE_GENERATOR_URL}appointment/generate-data-with-multiple-context`,{appointment_ids:[i],email_title:"Appointment Cancelled"},o),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:i},o);const d=yield this.getAppointmentById({appointment_id:i,user_id:null},a);return this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:d,action_point:"deleted",deleted_appointment_ids:i},o),l})),this.checkBackDated=(e,t)=>so(this,void 0,void 0,(function*(){const{billable:t,appointmentVisit:i}=e||{};return{back_dated_check:!(!(null==i?void 0:i.document_uploaded)||null===t)}})),this.declineDoctorUnavailibility=(e,t,i,a,n)=>so(this,void 0,void 0,(function*(){return this.updateApprovalStatus(t,0,i,n)})),this.findFacilityLocations=(e,t)=>so(this,void 0,void 0,(function*(){const i=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,speciality_id:{[lo.ne]:null},user_id:e}));if(!i)throw un("NO_PROVIDE_PARACTICE");const a=i.map((e=>e.facility_location_id)),n=this.shallowCopy(yield this.__modelHasRolesRepo.findOne({model_id:t},{include:{model:he,as:"role",required:!1}}));if(!n||!Object.keys(n).length)throw un("LOGGED_IN_NOT_FOUND");const{role:o,role:{slug:s}}=n;if(o&&"super_admin"===s)return a;const l=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,facility_location_id:{[lo.in]:a},user_id:t}));if(!l)throw un("NO_USER_PRACTICE");return l.map((e=>e.facility_location_id)).filter((e=>a.includes(e)))})),this.formatAvailableDoctor=(e,t,i)=>{var a,n,o,s,l;const{dateList:{start_date:d,end_date:_,no_of_slots:r},available_doctor_id:c,availableDoctor:p,availableDoctor:{doctor:{userFacilities:u},supervisor_id:m,doctor_id:y}}=e,h={available_speciality_id:null==p?void 0:p.available_speciality_id,doctor_id:y,end_date:new Date(_),facility_location_id:null==p?void 0:p.facility_location_id,id:c,no_of_slots:r,over_booking:null!==(o=null===(n=null===(a=null==u?void 0:u.find((e=>e.facility_location_id===p.facility_location_id)))||void 0===a?void 0:a.speciality)||void 0===n?void 0:n.over_booking)&&void 0!==o?o:null,speciality_id:null!==(l=null===(s=null==u?void 0:u.find((e=>e.facility_location_id===p.facility_location_id)))||void 0===s?void 0:s.speciality_id)&&void 0!==l?l:null,start_date:new Date(d),supervisor_id:m,time_slot:i};return[t.map((e=>({appointment_title:e.appointment_title,available_doctor_id:e.available_doctor_id,available_speciality_id:e.available_speciality_id,case_id:e.case_id,comments:e.comments,confirmation_status:e.confirmation_status,evaluation_date_time:e.evaluation_date_time,id:e.id,patient_id:e.patient_id,priority_id:e.priority_id,scheduled_date_time:e.scheduled_date_time,status_id:e.status_id,time_slots:e.time_slots,type_id:e.type_id}))),h]},this.formatAvailableDoctorForAutoResolve=(e,t)=>{let i=[];if(!t){const{dateList:{start_date:t,end_date:i,no_of_slots:a}}=e[0],n=new Date(t);let o=new Date(i).getTime()-n.getTime();o/=6e4;const s=o/a;return this.formatAvailableDoctor(e[0],e,s)}return this.filterNonNull(e.map((t=>{var a,n,o,s,l;const{dateList:{start_date:d,end_date:_,no_of_slots:r},available_doctor_id:c,availableDoctor:p,availableDoctor:{doctor:{userFacilities:u},supervisor_id:m,doctor_id:y}}=t,h=new Date(d),f=new Date(_);let v=f.getTime()-h.getTime();v/=6e4;const g=v/r;if(!i.length)return this.formatAvailableDoctor(t,e,g);const b=i.find((e=>(null==e?void 0:e.available_doctor_id)===t.available_doctor_id));if(b&&Object.keys(b).length)return null;const S={available_speciality_id:null==p?void 0:p.available_speciality_id,doctor_id:y,end_date:f,facility_location_id:null==p?void 0:p.facility_location_id,id:c,no_of_slots:r,over_booking:null!==(o=null===(n=null===(a=null==u?void 0:u.find((e=>e.facility_location_id===p.facility_location_id)))||void 0===a?void 0:a.speciality)||void 0===n?void 0:n.over_booking)&&void 0!==o?o:null,speciality_id:null!==(l=null===(s=null==u?void 0:u.find((e=>e.facility_location_id===p.facility_location_id)))||void 0===s?void 0:s.speciality_id)&&void 0!==l?l:null,start_date:h,supervisor_id:m,time_slot:g};return i=this.filterNonNull(e.map((e=>t.available_doctor_id!==e.available_doctor_id?null:{appointment_title:e.appointment_title,available_doctor_id:e.available_doctor_id,available_speciality_id:e.available_speciality_id,case_id:e.case_id,comments:e.comments,confirmation_status:e.confirmation_status,evaluation_date_time:e.evaluation_date_time,id:e.id,patient_id:e.patient_id,priority_id:e.priority_id,scheduled_date_time:e.scheduled_date_time,status_id:e.status_id,time_slots:e.time_slots,type_id:e.type_id}))),[i,S]})).flat())},this.formatedAppointmentAgainstDateList=e=>e.map((e=>{var t,i,a,n;return{appointment_id:e.id,appointment_status:e.appointmentStatus.name,appointment_status_slug:e.appointmentStatus.slug,available_doctor_id:e.available_doctor_id,available_speciality_id:e.available_speciality_id,case_id:e.case_id,doctor_id:e.available_doctor_id?null===(t=e.availableDoctor)||void 0===t?void 0:t.doctor_id:null,doctor_info:e.available_doctor_id?null===(a=null===(i=e.availableDoctor)||void 0===i?void 0:i.doctor)||void 0===a?void 0:a.userBasicInfo:null,patient_id:e.patient_id,patient_info:e.patient,scheduled_date_time:e.scheduled_date_time,speciality_id:e.available_speciality_id?null===(n=null==e?void 0:e.availableSpeciality)||void 0===n?void 0:n.speciality_id:null,time_slots:e.time_slots}})),this.getAppointmentById=(e,t,i)=>so(this,void 0,void 0,(function*(){const{appointment_id:t,user_id:a=Number(process.env.USERID)}=e;return this.shallowCopy(yield this.__appointmentRepo.findAll({id:t},{include:[{attributes:["id"],model:ti,include:{model:Wt}},{as:"availableDoctor",include:[{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null}},{as:"doctor",attributes:{exclude:["password"]},include:[{as:"userBasicInfo",model:Ce,required:!1,attributes:["id","first_name","middle_name","last_name"],where:{deleted_at:null}}],model:le,required:!1,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:it,required:!1,where:{deleted_at:null}},{as:"patient",model:Et,required:!1,attributes:["id","first_name","middle_name","last_name","profile_avatar"]},{as:"appointmentVisitSession",model:Ke,attribute:["deleted_at"],required:!1,paranoid:!1,separate:!0,limit:1,order:[["id","DESC"]]},{as:"appointmentVisit",include:{as:"visitState",model:$e,required:!1,attribute:["name","slug"]},model:Ke,required:!1,where:{deleted_at:null}}]},i)).map((e=>{var t,i,a,n,o,s,l,d,_,r,c,p,u,m,y,h,f,v,g,b,S,I,D,w,O,T,A,N,C,R,E;const L=(null==e?void 0:e.available_doctor_id)?null===(i=null===(t=null==e?void 0:e.availableDoctor)||void 0===t?void 0:t.availableSpeciality)||void 0===i?void 0:i.speciality_id:null===(a=null==e?void 0:e.availableSpeciality)||void 0===a?void 0:a.speciality_id,k=(null==e?void 0:e.available_doctor_id)&&null!==(o=null===(n=null==e?void 0:e.availableDoctor)||void 0===n?void 0:n.doctor_id)&&void 0!==o?o:null,P=(null==e?void 0:e.available_doctor_id)?null===(s=null==e?void 0:e.availableDoctor)||void 0===s?void 0:s.facility_location_id:null===(l=null==e?void 0:e.availableSpeciality)||void 0===l?void 0:l.facility_location_id,j=(null==e?void 0:e.available_doctor_id)?`${k}_${L}_${P}`:null,B=P&&L?`${P}_${L}`:null;let U=!1;return(null===(d=null==e?void 0:e.appointmentVisitSession)||void 0===d?void 0:d.length)&&(U=null!==(null==e?void 0:e.appointmentVisitSession[0].deleted_at)),{id:null==e?void 0:e.id,start_date_time:null==e?void 0:e.scheduled_date_time,comments:null==e?void 0:e.comments,evaluation_date_time:null==e?void 0:e.evaluation_date_time,available_speciality_id:null==e?void 0:e.available_speciality_id,available_doctor_id:null!==(_=e.available_doctor_id)&&void 0!==_?_:null,priority_id:null==e?void 0:e.priority_id,patient_id:null==e?void 0:e.patient_id,time_slot:null==e?void 0:e.time_slots,case_id:null==e?void 0:e.case_id,visit_deleted:U,socket_id:j,speciality_socket_id:B,appointment_title:null==e?void 0:e.appointment_title,appointment_type_id:null==e?void 0:e.type_id,appointment_duration:null==e?void 0:e.time_slots,picture:null==e?void 0:e.patient.profile_avatar,confirmation_status:null==e?void 0:e.confirmation_status,speciality_id:L,facility_location_id:(null==e?void 0:e.available_doctor_id)?null===(r=null==e?void 0:e.availableDoctor)||void 0===r?void 0:r.facility_location_id:null===(c=null==e?void 0:e.availableSpeciality)||void 0===c?void 0:c.facility_location_id,first_name:null==e?void 0:e.patient.first_name,last_name:null===(p=null==e?void 0:e.patient)||void 0===p?void 0:p.last_name,middle_name:null===(u=null==e?void 0:e.patient)||void 0===u?void 0:u.middle_name,doctor_id:k,doctor_last_name:(null==e?void 0:e.available_doctor_id)&&null!==(f=null===(h=null===(y=null===(m=null==e?void 0:e.availableDoctor)||void 0===m?void 0:m.doctor)||void 0===y?void 0:y.userBasicInfo)||void 0===h?void 0:h.middle_name)&&void 0!==f?f:null,doctor_middle_name:(null==e?void 0:e.available_doctor_id)&&null!==(S=null===(b=null===(g=null===(v=null==e?void 0:e.availableDoctor)||void 0===v?void 0:v.doctor)||void 0===g?void 0:g.userBasicInfo)||void 0===b?void 0:b.last_name)&&void 0!==S?S:null,doctor_first_name:(null==e?void 0:e.available_doctor_id)&&null!==(O=null===(w=null===(D=null===(I=null==e?void 0:e.availableDoctor)||void 0===I?void 0:I.doctor)||void 0===D?void 0:D.userBasicInfo)||void 0===w?void 0:w.first_name)&&void 0!==O?O:null,visit_session_state_slug:(null===(T=null==e?void 0:e.appointmentVisit)||void 0===T?void 0:T.visitState)?null==e?void 0:e.appointmentVisit.visitState.slug:null,visit_session_state_name:(null===(A=null==e?void 0:e.appointmentVisit)||void 0===A?void 0:A.visitState)?null==e?void 0:e.appointmentVisit.visitState.name:null,assign_to_me:!1,case_type:null!==(R=null===(C=null===(N=null==e?void 0:e.case)||void 0===N?void 0:N.caseType)||void 0===C?void 0:C.name)&&void 0!==R?R:null,case_type_id:null==e?void 0:e.case_type_id,back_dated_check:!(!(null===(E=null==e?void 0:e.appointmentVisit)||void 0===E?void 0:E.document_uploaded)||null===(null==e?void 0:e.billable))}}))})),this.getDeletedAppointmentsById=(e,t,i)=>so(this,void 0,void 0,(function*(){const{appointment_id:t,user_id:a=Number(process.env.USERID)}=e;return this.shallowCopy(yield this.__appointmentRepo.findAll({id:t},{include:[{as:"availableDoctor",include:{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:it,required:!1,where:{deleted_at:null}},model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:it,required:!1,where:{deleted_at:null}}]},i)).map((e=>{var t,i,a,n,o,s,l;const d=(null==e?void 0:e.available_doctor_id)?null===(i=null===(t=null==e?void 0:e.availableDoctor)||void 0===t?void 0:t.availableSpeciality)||void 0===i?void 0:i.speciality_id:null===(a=null==e?void 0:e.availableSpeciality)||void 0===a?void 0:a.speciality_id,_=(null==e?void 0:e.available_doctor_id)&&null!==(o=null===(n=null==e?void 0:e.availableDoctor)||void 0===n?void 0:n.doctor_id)&&void 0!==o?o:null,r=(null==e?void 0:e.available_doctor_id)?null===(s=null==e?void 0:e.availableDoctor)||void 0===s?void 0:s.facility_location_id:null===(l=null==e?void 0:e.availableSpeciality)||void 0===l?void 0:l.facility_location_id,c=(null==e?void 0:e.available_doctor_id)?`${_}_${d}`:null,p=r&&d?`${r}_${d}`:null;return{doctor_id:_,id:null==e?void 0:e.id,speciality_socket_id:p,socket_id:c,speciality_id:d}}))})),this.getFreeSlotsForAssignment=(e,t,i,a,n)=>{if(!a)return[];const o=[],s=new Date(e.start_date),l=new Date(e.end_date);for(;s.getTime()!==l.getTime()&&!(s.getTime()>l.getTime());){const e=new Date(s);e.setMinutes(e.getMinutes()+a),e.getTime()<=l.getTime()&&o.push({startDateTime:new Date(s),count:i}),s.setMinutes(s.getMinutes()+a)}if(t&&t.length)for(const e of t){const t=new Date(null==e?void 0:e.scheduled_date_time),i=new Date(null==e?void 0:e.scheduled_date_time);i.setMinutes(i.getMinutes()+(null==e?void 0:e.time_slots)),o.find(((a,n)=>{t.getTime()<=a.startDateTime.getTime()&&a.startDateTime.getTime()<i.getTime()&&null===(null==e?void 0:e.deleted_at)&&(o[n].count-=1)}))}return 0===n?o.map((e=>e.count===i)):o},this.getFreeSlotsWithUnavailabilityChk=(e,t,i)=>t.length?(e.forEach(((a,n)=>{let o=!1;const s=new Date(a);s.setMinutes(s.getMinutes()+i),t.forEach(((e,t)=>{e[t+1]&&Number(e[t+1].startDate)<Number(s)&&Number(s)<=Number(e[t+1].endDate)&&(o=!0)}));for(const e of t)Number(e.start_date)<=Number(a)&&Number(a)<Number(e.end_date)&&(o=!0);o&&e.splice(n,0)})),e):e,this.resolveDoctorAppointmentOnFreeSlots=(e,t,i,a)=>t.map(((n,o)=>{const s=Math.floor(n.time_slots/a);let l;const d=e.find(((i,d)=>{var _;if(!(null===(_=e[d+s-1])||void 0===_?void 0:_.startDateTime))return null;const r=new Date(e[d+s-1].startDateTime);r.setMinutes(r.getMinutes()+a);let c=r.getTime()-i.startDateTime.getTime();return c/=6e4,c===n.time_slots?(l=n,e.splice(d,s),t.splice(o,1),i):void 0}));return[[d&&l&&Object.keys(l)?{available_doctor_id:i,case_id:null==l?void 0:l.case_id,case_type_id:null==l?void 0:l.case_type_id,date_list_id:null==l?void 0:l.date_list_id,patient_id:null==l?void 0:l.patient_id,priority_id:null==l?void 0:l.priority_id,scheduled_date_time:null==d?void 0:d.startDateTime,time_slots:null==l?void 0:l.time_slots,type_id:null==l?void 0:l.type_id}:null],[t]]})).flat(),this.sendAppointmentsToFD=e=>so(this,void 0,void 0,(function*(){const{userId:t,clinics:i,allAppointments:a,forwardAppointments:n,_authorization:o,transaction:s}=e,l=this.shallowCopy(yield this.__modelHasRolesRepo.findOne({model_id:t},{include:{model:he,as:"role",required:!1}})),{role:d,role:{slug:_}}=l;if(d&&"super_admin"!==_&&this.shallowCopy(yield this.__userFacilityRepo.findAll({facility_location_id:{[lo.in]:i},user_id:t,deleted_at:null})).length!==i.length)throw un("NO_SUPER_ADMIN");const r={headers:{Authorization:`${o}`}},{status:c}=yield this.__http.put(`${process.env.KIOSK_URL}case-patient-session/remove-patient-sessions`,{appointment_ids:a},r);if(200!==c)throw un("ERROR_FROM_KIOSK");const p=n.map((e=>{const{forward_appointments:i}=e;return i.map((i=>({id:i.id,origin_facility_id:e.origin_clinic_id,pushed_to_front_desk:!0,target_facility_id:e.target_clinic_id,updated_at:new Date,updated_by:t})))})).flat();return this.__appointmentRepo.bulkUpdate(p,s,null,["origin_facility_id","pushed_to_front_desk","target_facility_id","updated_by","updated_at"])})),this.__http=new c,this.__methodName={0:"declineDoctorUnavailibility",1:"acceptDoctorUnavailibility"},this.__actionPreferencesMethodName={auto_resolve:"autoResolveAppointments",cancel:"cancelAppointments",forward_to_frontdesk:"sendAppointmentsToFD"}}};_o=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object])],_o);var ro=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))},co=function(e,t){var i={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(i[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(a=Object.getOwnPropertySymbols(e);n<a.length;n++)t.indexOf(a[n])<0&&Object.prototype.propertyIsEnumerable.call(e,a[n])&&(i[a[n]]=e[a[n]])}return i};const po=ra.Op,uo=ra.Sequelize;let mo=class extends bn{constructor(e,t,i,a,n,o,s,l,d,_,r,c,p,u,m,y,h,f,v){super(),this.__modelHasRolesRepo=e,this.__userFacilityRepo=t,this.__repo=i,this.__facilityLocationRepo=a,this.__specialityRepo=n,this.__availableDoctorRepo=o,this.__availableSpecialityRepo=s,this.__appointmentRepo=l,this.__unAvailableDoctorRepo=d,this.__appoitmentTypeRepo=_,this.__appointmentStatusRepo=r,this.__casePatientSessionStatusesRepo=c,this.__kioskCaseRepo=p,this.__caseTypesRepo=u,this.__facilityTimingRepo=m,this.__userSpecialityRepo=y,this.__roleRepo=h,this.__technicianSupervisorsRepo=f,this.http=v,this.deleteAllAssignmentAndAppointment=(e,t,i)=>ro(this,void 0,void 0,(function*(){const{user_id:a=Number(process.env.USERID),cancel:n,reschedule:o}=e,s=this.shallowCopy(yield this.__userFacilityRepo.findAll({user_id:a,deleted_at:null},null,i)).map((e=>e.facility_location_id)),l=this.shallowCopy(yield this.__availableDoctorRepo.findAll({facility_location_id:{[po.in]:s}},{include:[{as:"appointments",model:He,required:!1,where:{cancelled:!1,deleted_at:null,pushed_to_front_desk:!1}}]},i)),d=l.map((e=>e.appointments)).flat(),_=d.map((e=>e.id)),r={};n?r.cancelled=!0:o&&(r.pushed_to_front_desk=!0),yield this.__appointmentRepo.updateByIds(_,Object.assign({},r),i);const c={headers:{Authorization:t}};this.__http.post(`${process.env.EMAIL_TEMPLATE_GENERATOR_URL}appointment/generate-data-with-multiple-context`,{appointment_ids:[_],email_title:n?"Appointment Cancelled":"Appointment Forwarded to Frontdesk"},c),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:_},c);const p=yield this.getAppointmentById({appointment_id:_,user_id:null},t);this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:p,action_point:"deleted",deleted_appointment_ids:_},c);const u=l.map((e=>e.id));return yield this.__availableDoctorRepo.updateByIds(u,{deleted_at:new Date},i),d})),this.getDoctorsDetail=(e,t)=>ro(this,void 0,void 0,(function*(){const{user_id:t=Number(process.env.USERID),doctor_id:i}=e,{role:{has_supervisor:a}}=this.shallowCopy(yield this.__modelHasRolesRepo.findOne({model_id:i},{include:{as:"role",model:he,where:{deleted_at:null}}}));let n=[i];a&&(n=this.shallowCopy(yield this.__technicianSupervisorsRepo.findAll({technician_id:i,deleted_at:null})).map((e=>e.supervisor_id)));const o=this.shallowCopy(yield this.__repo.findOne({deleted_at:null,id:n},{include:[{as:"userFacilities",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:Ie,required:!1,where:{speciality_id:{[po.ne]:null},deleted_at:null}},{as:"userBasicInfo",model:Ce,required:!1,where:{deleted_at:null}},{as:"userTimings",model:Le,required:!1,where:{deleted_at:null}}]}));if(!o)throw un("NO_DOCTOR_FOUND");const s=this.shallowCopy(yield this.__repo.findOne({id:t,deleted_at:null},{include:{as:"colorCodes",deleted_at:null,include:this.__repo.getJoinClause("get_doctor_detail"),model:Ze,required:!1,where:{deleted_at:null}}}));if(!s||!Object.keys(s).length)throw un("LOGGED_IN_NOT_FOUND");const{colorCodes:l}=s||{},{userFacilities:d,userTimings:_,userBasicInfo:r}=o||{},c=l&&(null==l?void 0:l.length)?this.filterNonNull(null==d?void 0:d.map((e=>{var t;const i=null===(t=l.find((t=>(null==e?void 0:e.speciality_id)===(null==t?void 0:t.object_id))))||void 0===t?void 0:t.code,a=d.find((e=>l.find((t=>e.speciality_id===t.object_id)))),n=_.filter((t=>e.facility_location_id===t.facility_location_id));if(a&&Object.keys(a).length){const{speciality:e}=a,t=co(a,["speciality"]);return Object.assign(Object.assign({color:i},t),{doctor:{info:Object.assign({},r),specialities:Object.assign({},e),user_timings:n}})}}))):[],p=null==c?void 0:c.map((e=>null==e?void 0:e.id)),u=this.filterNonNull(d.map((e=>{const t=d.find(((e,t)=>e.speciality_id!==p[t])),i=_.filter((t=>e.facility_location_id===t.facility_location_id));if(!t||!Object.keys(t).length||p&&p.length)return null;const{speciality:a}=t,n=co(t,["speciality"]);return Object.assign(Object.assign({color:"#9d9d9d"},n),{doctor:{info:Object.assign({},r),specialities:Object.assign({},a),user_timings:i}})}))),m=[...c,...u];return this.sort(m,"id")})),this.getDoctorsInfo=(e,t)=>ro(this,void 0,void 0,(function*(){const{doctor_ids:t,speciality_ids:i,is_provider_calendar:a=!1,user_id:n=Number(process.env.USERID),facility_location_ids:o,provider_name:s,provider_speciality:l,is_single:d,pagination:_=!0,per_page:r,page:c}=e;if(!n)throw un("ID_MUST_PROVIDED");const p=r||10,u=c||1,m=this.shallowCopy(yield this.__repo.findOne({id:n,deleted_at:null},{include:{as:"colorCodes",deleted_at:null,include:this.__repo.getJoinClause("get_doctor_info"),model:Ze,required:!1,where:{deleted_at:null}}})),y=this.shallowCopy(yield this.__modelHasRolesRepo.findAll({model_id:n},{include:this.__modelHasRolesRepo.getJoinClause("get_doctor_info")})),h=y.map((e=>e.role));if("super_admin"!==(Object.keys(y).length?h[0].slug:null)&&!o.length)throw un("USER_NOT_SUPERADMIN");let f;if(f=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,facility_location_id:{[po.in]:o},speciality_id:{[po.ne]:null}},{include:this.__userFacilityRepo.getJoinClause("get_doctor_info")})),s||l||a){const e=l?{name:{[po.like]:`%${l}%`}}:null,a=s?{[po.or]:[uo.where(uo.col("first_name"),{[po.like]:`%${s}%`}),uo.where(uo.col("middle_name"),{[po.like]:`%${s}%`}),uo.where(uo.col("last_name"),{[po.like]:`%${s}%`})]}:null,n=(null==i?void 0:i.length)?{speciality_id:{[po.in]:i}}:{speciality_id:{[po.ne]:null}},_=(null==t?void 0:t.length)?{user_id:{[po.in]:t}}:null;f=this.shallowCopy(yield this.__userFacilityRepo.findAll(Object.assign(Object.assign(Object.assign({deleted_at:null,facility_location_id:{[po.in]:o},speciality_id:{[po.ne]:null}},_),n),{speciality_id_2:ra.literal("`user_facility`.speciality_id = `users->userTimings`.specialty_id and `users->userTimings`.specialty_id is not null"),facility_id_2:ra.literal("`user_facility`.facility_location_id = `users->userTimings`.facility_location_id")}),{group:d?["user_id"]:void 0,include:[{as:"facilityLocation",include:{as:"facility",model:Ut,required:!1,where:{deleted_at:null}},model:Oe,required:!1,where:{deleted_at:null}},{as:"speciality",model:ue,required:!!l,where:Object.assign(Object.assign({},e),{deleted_at:null})},{as:"users",attributes:{exclude:["password"]},include:[{as:"userBasicInfo",model:Ce,required:!1,where:Object.assign(Object.assign({},a),{deleted_at:null})},{as:"userTimings",model:Le,required:!1,where:{deleted_at:null}},{as:"medicalIdentifiers",attributes:["id"],include:{as:"billingTitle",attributes:["id","name"],model:xt,where:{deleted_at:null}},model:Mt,where:{deleted_at:null}}],model:le,where:{deleted_at:null}}]}))}const{colorCodes:v}=m,g=this.filterNonNull(null==f?void 0:f.map((e=>{var t,i,a,n,o,s;const{users:l,speciality:d,facilityLocation:_}=e,r=co(e,["users","speciality","facilityLocation"]);if((null==l?void 0:l.userTimings.length)&&d)return Object.assign(Object.assign({},r),{facility_location:_,color:null!==(i=null===(t=null==v?void 0:v.find((t=>e.speciality_id===t.object_id)))||void 0===t?void 0:t.code)&&void 0!==i?i:"#9d9d9d",doctor:{billing_title:null!==(n=Object.assign({},null===(a=null==l?void 0:l.medicalIdentifiers)||void 0===a?void 0:a.billingTitle))&&void 0!==n?n:{},info:null!==(o=Object.assign({},null==l?void 0:l.userBasicInfo))&&void 0!==o?o:{},specialities:null!=d?d:[],user_timings:null!==(s=null==l?void 0:l.userTimings)&&void 0!==s?s:[]}})})));return _?{docs:this.paginate(this.sort(g,"id"),p,u),pages:Math.ceil(g.length/p),total:g.length}:g})),this.getDoctorsInfoV1=(e,t)=>ro(this,void 0,void 0,(function*(){const{doctor_ids:t,speciality_ids:i,is_provider_calendar:a=!1,user_id:n=Number(process.env.USERID),facility_location_ids:o,provider_name:s,provider_speciality:l,is_single:d,pagination:_=!0,per_page:r,page:c}=e;if(!n)throw un("ID_MUST_PROVIDED");const p=r||10,u=c||1,m=this.shallowCopy(yield this.__repo.findOne({id:n,deleted_at:null},{include:[{as:"colorCodes",deleted_at:null,include:this.__repo.getJoinClause("get_doctor_info"),model:Ze,required:!1,where:{deleted_at:null}}]})),y=this.shallowCopy(yield this.__modelHasRolesRepo.findAll({model_id:n},{include:this.__modelHasRolesRepo.getJoinClause("get_doctor_info")})),h=y.map((e=>e.role));if("super_admin"!==(Object.keys(y).length?h[0].slug:null)&&!Object.keys(o).length)throw un("USER_NOT_SUPERADMIN");let f;if(f=this.shallowCopy(yield this.__userSpecialityRepo.findAll({deleted_at:null,facility_location_id:{[po.in]:o},specialty_id:{[po.ne]:null}},{include:this.__userFacilityRepo.getJoinClause("get_doctor_info")})),s||l||a){const e=l?{name:{[po.like]:`%${l}%`}}:null,a=s?{[po.or]:[uo.where(uo.col("first_name"),{[po.like]:`%${s}%`}),uo.where(uo.col("middle_name"),{[po.like]:`%${s}%`}),uo.where(uo.col("last_name"),{[po.like]:`%${s}%`})]}:null,n=(null==i?void 0:i.length)?{specialty_id:{[po.in]:i}}:{specialty_id:{[po.ne]:null}},_=(null==t?void 0:t.length)?{user_id:{[po.in]:t}}:null;f=this.shallowCopy(yield this.__userSpecialityRepo.findAll(Object.assign(Object.assign({deleted_at:null,facility_location_id:{[po.in]:o}},n),_),{group:d?["user_id"]:void 0,include:[{as:"speciality",model:ue,required:!!l,where:Object.assign(Object.assign({},e),{deleted_at:null})},{as:"users",attributes:{exclude:["password"]},include:[{as:"userBasicInfo",model:Ce,required:!1,where:Object.assign(Object.assign({},a),{deleted_at:null})},{as:"userTimings",model:Le,required:!1,where:{deleted_at:null}},{as:"medicalIdentifiers",model:Mt,attributes:["id"],include:{as:"billingTitle",attributes:["name"],model:xt,where:{deleted_at:null}},where:{deleted_at:null}}],model:le,where:{deleted_at:null}}]}))}const{colorCodes:v}=m;let g;const b=(null==v?void 0:v.length)?this.filterNonNull(null==v?void 0:v.map((e=>{var t,i,a;if(g=null==f?void 0:f.find((t=>t.speciality_id===e.object_id&&t.user_id===n)),g&&Object.keys(g).length){const{users:n,speciality:o}=g,s=co(g,["users","speciality"]);return Object.assign(Object.assign({},s),{color:e.code,provide_title:n&&n.medicalIdentifiers?null===(t=null==n?void 0:n.medicalIdentifiers)||void 0===t?void 0:t.billingTitle.name:null,doctor:{info:null!==(i=Object.assign({},null==n?void 0:n.userBasicInfo))&&void 0!==i?i:{},specialities:null!=o?o:[],user_timings:null!==(a=null==n?void 0:n.userTimings)&&void 0!==a?a:[]}})}}))):[],S=this.filterNonNull(f.map((e=>{var t,i,a;if((null==b?void 0:b.find((t=>e.user_id!==(null==t?void 0:t.user_id))))||!b.length){const{users:n,speciality:o}=e,s=co(e,["users","speciality"]);return Object.assign(Object.assign({},s),{color:"#9d9d9d",provide_title:n&&n.medicalIdentifiers?null===(t=null==n?void 0:n.medicalIdentifiers)||void 0===t?void 0:t.billingTitle.name:null,doctor:{info:null!==(i=Object.assign({},null==n?void 0:n.userBasicInfo))&&void 0!==i?i:{},specialities:null!=o?o:[],user_timings:null!==(a=null==n?void 0:n.userTimings)&&void 0!==a?a:[]}})}}))),I=[...b,...S];return _?{docs:this.paginate(this.sort(I,"id"),p,u),pages:Math.ceil(I.length/p),total:I.length}:I})),this.getMaxMinOfFacility=(e,t)=>ro(this,void 0,void 0,(function*(){const{facility_location_ids:t}=e;return this.shallowCopy(yield this.__facilityTimingRepo.findAll({deleted_at:null,facility_location_id:t},{attributes:[[ra.fn("max",ra.col("end_time")),"max_time"],[ra.fn("min",ra.col("start_time")),"min_time"],[ra.fn("min",ra.col("start_time_isb")),"start_time_isb"],[ra.fn("max",ra.col("end_time_isb")),"end_time_isb"]],raw:!0}))[0]})),this.getUserInfoByFacilities=(e,t)=>ro(this,void 0,void 0,(function*(){const{user_id:t=Number(process.env.USERID),facility_location_ids:i,filters:a,per_page:n,page:o,facility_location_name:s,doctor_ids:l,speciality_ids:d,pagination:_=!0,is_provider_calendar:r=!1,created_by_ids:c,updated_by_ids:p,created_at:u,updated_at:m}=e,y=n||10,h=o||1,f=null==a?void 0:a.replace(/,/g,"");if(!t)throw un("USER_ID_MUST_PROVIDED");const v=this.shallowCopy(yield this.__repo.findOne({id:t,deleted_at:null},{include:[{as:"colorCodes",deleted_at:null,include:{as:"type",model:Qe,where:{deleted_at:null,slug:"facility_location"}},model:Ze,required:!1,where:{deleted_at:null}}]}));let g;const b=this.getJoinAndProjectionClause({facilityLocationIds:i,facilityLocationName:s,desirefilters:a,requiredFilter:f,createdAt:u,updatedAt:m,createdByIds:c,updatedByIds:p});if(r){const e=(null==l?void 0:l.length)?{user_id:{[po.in]:l}}:null,t=(null==d?void 0:d.length)?{speciality_id:{[po.in]:d}}:null;b.join.include.push({as:"userFacilities",include:{as:"users",attributes:["id"],model:le,where:{deleted_at:null}},model:Ie,required:!0,where:Object.assign(Object.assign(Object.assign({},e),t),{deleted_at:null})})}if(g=this.shallowCopy(yield this.__facilityLocationRepo.findAll(Object.assign({},b.where),Object.assign({},b.join))),!(v&&Object.keys(v).length||g&&Object.keys(g).length))throw un("NO_RECORD_FOUND");const{colorCodes:S}=v||{};let I;const D=(null==S?void 0:S.length)?this.filterNonNull(S.map((e=>{var t;if(I=null==g?void 0:g.find((t=>(null==t?void 0:t.id)===(null==e?void 0:e.object_id))),I&&Object.keys(I).length)return Object.assign(Object.assign({facility_name:(null===(t=null==I?void 0:I.facility)||void 0===t?void 0:t.name)||null},I),{color:e.code})}))):[],w=D.map((e=>e.id)),O=D.length?this.filterNonNull(null==g?void 0:g.map((e=>{var t;if(!(null==w?void 0:w.some((t=>t===e.id))))return Object.assign(Object.assign({facility_name:(null===(t=null==e?void 0:e.facility)||void 0===t?void 0:t.name)||null},e),{color:"#9d9d9d"})}))):this.filterNonNull(null==g?void 0:g.map((e=>{var t;return Object.assign(Object.assign({facility_name:(null===(t=null==e?void 0:e.facility)||void 0===t?void 0:t.name)||null},e),{color:"#9d9d9d"})}))),T=[...D,...O];return _?{docs:this.paginate(this.sort(T,"id"),y,h),pages:Math.ceil(T.length/y),total:T.length}:T})),this.getUserInfoBySpecialities=(e,t)=>ro(this,void 0,void 0,(function*(){const{doctor_ids:t,facility_location_ids:i,speciality_ids:a,user_id:n=Number(process.env.USERID),per_page:o,speciality_name:s,page:l,time_slot:d,over_booking:_,speciality_id:r,pagination:c=!0,is_provider_calendar:p=!1}=e;if(!n)throw un("UNKNOWN_QUERY_PARAMS");const u=o||10,m=l||1,y=this.shallowCopy(yield this.__repo.findOne({id:n,deleted_at:null},{include:[{as:"colorCodes",deleted_at:null,include:{as:"type",model:Qe,where:{deleted_at:null,slug:"speciality"}},model:Ze,required:!1,where:{deleted_at:null}}]}));if(!y||!Object.keys(y).length)throw un("NO_RECORD_FOUND");const{colorCodes:h}=y;let f,v,g={};if(!h||d||_||r||s||p||(f=this.shallowCopy(yield this.__specialityRepo.findAll({deleted_at:null}))),h&&(d||_||r||s)&&!p&&(r&&(g={id:r}),d&&(g.time_slot={[po.like]:`%${d}%`}),_&&(g.over_booking={[po.like]:`%${_}%`}),s&&(g.name={[po.like]:`%${s}%`}),f=this.filterNonNull(this.shallowCopy(yield this.__specialityRepo.findAll(Object.assign(Object.assign({},g),{deleted_at:null}))))),p||i){const e=(null==t?void 0:t.length)?{user_id:{[po.in]:t}}:{},n=(null==a?void 0:a.length)?{id:{[po.in]:a}}:{},o=(null==i?void 0:i.length)?{facility_location_id:{[po.in]:i}}:{};f=this.filterNonNull(this.shallowCopy(yield this.__specialityRepo.findAll(Object.assign(Object.assign({},n),{deleted_at:null}),{include:{as:"userFacilty",include:{as:"users",attributes:["id"],model:le,where:{deleted_at:null}},model:Ie,required:!!i,where:Object.assign(Object.assign(Object.assign({},e),o),{deleted_at:null})}})))}const b=(null==h?void 0:h.length)?this.filterNonNull(h.map((e=>{if(v=f.find((t=>t.id===e.object_id)),v&&Object.keys(v).length)return Object.assign(Object.assign({},v),{color:e.code})}))):[],S=null==b?void 0:b.map((e=>e.id)),I=this.filterNonNull(f.map((e=>{if(!S.includes(e.id)||!b.length)return Object.assign(Object.assign({},e),{color:"#9d9d9d"})}))),D=[...b,...I];return c?{docs:this.paginate(this.sort(D,"id"),u,m),pages:Math.ceil(D.length/u),total:D.length}:D})),this.getUserInfoBySpecialitiesV1=(e,t)=>ro(this,void 0,void 0,(function*(){const{doctor_ids:t,facility_location_ids:i,speciality_ids:a,user_id:n=Number(process.env.USERID),per_page:o,speciality_name:s,page:l,time_slot:d,over_booking:_,speciality_id:r,pagination:c=!0,is_provider_calendar:p=!1,is_single:u,created_by_ids:m,updated_by_ids:y,created_at:h,updated_at:f}=e;if(!n)throw un("UNKNOWN_QUERY_PARAMS");const v=o||10,g=l||1,b=this.shallowCopy(yield this.__repo.findOne({id:n,deleted_at:null},{include:[{as:"colorCodes",deleted_at:null,include:{as:"type",model:Qe,where:{deleted_at:null,slug:"speciality"}},model:Ze,required:!1,where:{deleted_at:null}}]}));if(!b||!Object.keys(b).length)throw un("NO_RECORD_FOUND");const{colorCodes:S}=b;let I,D,w={},O=[{model:le,as:"created_by_user",attributes:["id"],required:!!(null==m?void 0:m.length),include:{model:Ce,as:"userBasicInfo",attributes:["first_name","middle_name","last_name"]}},{model:le,as:"updated_by_user",attributes:["id"],required:!!(null==y?void 0:y.length),include:{model:Ce,as:"userBasicInfo",attributes:["first_name","middle_name","last_name"]}}];if(!S||d||_||r||s||p||(I=this.shallowCopy(yield this.__specialityRepo.findAll({deleted_at:null}))),S&&(d||_||r||s)&&!p&&(r&&(w={id:r}),d&&(w.time_slot={[po.like]:`%${d}%`}),_&&(w.over_booking={[po.like]:`%${_}%`}),s&&(w.name={[po.like]:`%${s}%`}),h&&(w.created_at={[po.between]:[new Date(new Date(h).setUTCHours(0,0,0,0)),new Date(new Date(h).setUTCHours(23,59,59,59))]}),f&&(w.updated_at={[po.between]:[new Date(new Date(f).setUTCHours(0,0,0,0)),new Date(new Date(f).setUTCHours(23,59,59,59))]}),m&&(w.created_by={[po.in]:m}),y&&(w.updated_by={[po.in]:y}),I=this.filterNonNull(this.shallowCopy(yield this.__specialityRepo.findAll(Object.assign(Object.assign({},w),{deleted_at:null}))))),p||i){const e=(null==t?void 0:t.length)?{user_id:{[po.in]:t}}:{},n=Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({},(null==a?void 0:a.length)&&{id:{[po.in]:a}}),(null==m?void 0:m.length)&&{created_by:{[po.in]:m}}),(null==y?void 0:y.length)&&{updated_by:{[po.in]:y}}),h&&{created_at:{[po.between]:[new Date(new Date(h).setUTCHours(0,0,0,0)),new Date(new Date(h).setUTCHours(23,59,59,59))]}}),f&&{updated_at:{[po.between]:[new Date(new Date(f).setUTCHours(0,0,0,0)),new Date(new Date(f).setUTCHours(23,59,59,59))]}}),o=(null==i?void 0:i.length)?{facility_location_id:{[po.in]:i}}:{};I=this.filterNonNull(this.shallowCopy(yield this.__specialityRepo.findAll(Object.assign(Object.assign({},n),{facility_location_id:ra.literal("`userFacilty`.facility_location_id = `userFacilty->users->userTimings`.facility_location_id"),speciality_id:ra.literal("`userFacilty`.speciality_id = `userFacilty->users->userTimings`.specialty_id"),deleted_at:null}),{include:[{as:"userFacilty",include:{as:"users",attributes:["id"],model:le,where:{deleted_at:null},include:{as:"userTimings",model:Le,required:!1,where:{deleted_at:null}}},model:Ie,required:!!i,where:Object.assign(Object.assign(Object.assign({},e),o),{deleted_at:null})},...O]})))}const T=(null==S?void 0:S.length)?this.filterNonNull(S.map((e=>{if(D=I.find((t=>t.id===e.object_id)),D&&Object.keys(D).length)return Object.assign(Object.assign({},D),{color:e.code})}))):[],A=null==T?void 0:T.map((e=>e.id)),N=this.filterNonNull(I.map((e=>{if(!A.includes(e.id)||!T.length)return Object.assign(Object.assign({},e),{color:"#9d9d9d"})})));let C=[...T,...N];return u&&(C=C.map((e=>Object.assign(Object.assign({},e),{userFacilty:e.userFacilty[0]})))),c?{docs:this.paginate(this.sort(C,"id"),v,g),pages:Math.ceil(C.length/v),total:C.length}:C})),this.updateSpecialityTimeSlots=(e,t,i)=>ro(this,void 0,void 0,(function*(){const{specialities:i,user_id:a}=e,n=i.map((e=>e.id)),o=this.shallowCopy(yield this.__specialityRepo.findAll({id:{[po.in]:n}}));if(o.length!==n.length)throw un("INVALID_SPECIALITY_IDS");const s=new Date,l=this.shallowCopy(yield this.__userFacilityRepo.findAll({deleted_at:null,speciality_id:{[po.in]:n}}));if(!l||!l.length)throw un("NO_PROVIDER_OF_SPECIALITY_FOUND");l.map((e=>null==e?void 0:e.user_id));const d=this.shallowCopy(yield this.__availableSpecialityRepo.findAll({speciality_id:{[po.in]:n}},{include:{as:"dateList",include:{as:"appointments",model:He,required:!1,where:{available_doctor_id:null,deleted_at:null}},model:qe,required:!0,where:{deleted_at:null,start_date:{[po.gt]:s}}}})),_=d.map((e=>e.id)),r=d.map((e=>{const{dateList:t}=e;return null==t?void 0:t.map((t=>Object.assign(Object.assign({},e),{appointments:t.appointments,end_date:t.end_date,no_of_doctors:t.no_of_doctors,no_of_slots:t.no_of_slots,start_date:t.start_date})))})).flat(),c=this.shallowCopy(yield this.__appoitmentTypeRepo.findOne({deleted_at:null,slug:"initial_evaluation"})),p=this.shallowCopy(yield this.__appointmentStatusRepo.findOne({deleted_at:null,slug:"re_scheduled"})),u={appointments:[],status_id:this.shallowCopy(yield this.__casePatientSessionStatusesRepo.findOne({slug:"re_scheduled"})).id},m=[];let y;for(const e of r){const t=(new Date(e.end_date).getTime()-new Date(e.start_date).getTime())/1e3/60,n=i.find((t=>t.id===e.speciality_id));let s=t/n.time_slot;if(s*=e.no_of_doctors,yield this.__availableSpecialityRepo.update(e.id,{time_slots:s}),e.appointments.length){y=o.find((t=>t.id===e.speciality_id));const i=this.getFreeSlotsForAutoResolveAppointment(e,[],y.over_booking+1,n.time_slot,!0,[]);if(i[0].length){const o=t/(e.no_of_slots/e.no_of_doctors),{appointments:s}=e||{},l=s&&s.length?null==s?void 0:s.map((e=>{const t=e.time_slots/o*n.time_slot;return Object.assign(Object.assign({},e),{time_slots:t})})):[],d=this.resolveAppointmentTimeSlotChange(i[1],l,null,e.id,n.time_slot,c.id,p.id),_=d[1],r=d[0];for(const e of r)m.push(e.id),u.appointments.push({appointment_id:e.id,case_id:e.case_id}),yield this.__appointmentRepo.update(e.id,Object.assign({},e));if(_&&_.length){const t=_.map((e=>e.id));yield this.sentAppointmentsToFD(t,a,null==e?void 0:e.facility_location_id,null==e?void 0:e.facility_location_id,this.__modelHasRolesRepo,this.__userFacilityRepo,this.__http,this.__appointmentRepo,po)}}}}const h=this.shallowCopy(yield this.__availableDoctorRepo.findAll({available_speciality_id:{[po.in]:_}},{include:[{as:"availableSpeciality",model:it,required:!0,where:{deleted_at:null}},{as:"dateList",include:{as:"appointments",model:He,required:!1,where:{available_doctor_id:null,deleted_at:null}},model:qe,required:!0,where:{deleted_at:null,start_date:{[po.gt]:s}}}]})).map((e=>{const{dateList:t}=e;return null==t?void 0:t.map((t=>Object.assign(Object.assign({},e),{appointments:t.appointments,end_date:t.end_date,no_of_slots:t.no_of_slots,start_date:t.start_date})))})).flat();for(const e of h){const t=(new Date(e.end_date).getTime()-new Date(e.start_date).getTime())/1e3/60,n=i.find((t=>t.id===e.availableSpeciality.speciality_id)),o=t/n.time_slot;if(yield this.__availableDoctorRepo.update(e.id,{time_slots:o}),e.appointments){const i=this.getFreeSlotsForAutoResolveAppointment(e,[],y.over_booking+1,n.time_slot,!0,[]);if(i[0].length){const o=t/e.no_of_slots,{appointments:s}=e||{},l=s&&s.length?null==s?void 0:s.map((e=>{const t=e.time_slots/o*n.time_slot;return Object.assign(Object.assign({},e),{time_slots:t})})):[],d=this.resolveAppointmentTimeSlotChange(i[1],l,e.id,null,n.time_slot,c.id,p.id),_=d[1],r=d[0];for(const e of r)m.push(e.id),u.appointments.push({appointment_id:e.id,case_id:e.case_id}),yield this.__appointmentRepo.update(e.id,Object.assign({},e));if(_&&_.length){const t=_.map((e=>e.id));yield this.sentAppointmentsToFD(t,a,null==e?void 0:e.facility_location_id,null==e?void 0:e.facility_location_id,this.__modelHasRolesRepo,this.__userFacilityRepo,this.__http,this.__appointmentRepo,po)}}}}const f={headers:{Authorization:t}};this.__http.post(`${process.env.EMAIL_TEMPLATE_GENERATOR_URL}appointment/generate-data-with-multiple-context`,{appointment_ids:[m],email_title:"Appointment Updated"},f),this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments-for-ios`,{appointment_ids:m},f);const v=yield this.getAppointmentById({appointment_id:m,user_id:a},t);this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/action-against-appointments-for-ios`,{appointment_object:v,action_point:"updated"},f);const{status:g}=this.shallowCopy(yield this.__http.put(`${process.env.KIOSK_URL}case-patient-session/update-by-appointment-ids`,Object.assign({},u),f));if(200!==g)throw un("ERROR_WHILE_UPDATING_STATUS");const b=[];for(const e of i)b.push(yield this.__specialityRepo.update(e.id,{time_slot:e.time_slot,updated_at:new Date,updated_by:a}));return b})),this.getAppointmentById=(e,t,i)=>ro(this,void 0,void 0,(function*(){const{appointment_id:t,user_id:a=Number(process.env.USERID)}=e;return this.shallowCopy(yield this.__appointmentRepo.findAll({id:t},{include:[{attributes:["id"],model:ti,include:{model:Wt}},{as:"availableDoctor",include:[{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null}},{as:"doctor",attributes:{exclude:["password"]},include:[{as:"userBasicInfo",model:Ce,required:!1,attributes:["id","first_name","middle_name","last_name"],where:{deleted_at:null}}],model:le,required:!1,where:{deleted_at:null}}],model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:it,required:!1,where:{deleted_at:null}},{as:"patient",model:Et,required:!1,attributes:["id","first_name","middle_name","last_name","profile_avatar"]},{as:"appointmentVisitSession",model:Ke,attribute:["deleted_at"],required:!1,paranoid:!1,separate:!0,limit:1,order:[["id","DESC"]]},{as:"appointmentVisit",include:{as:"visitState",model:$e,required:!1,attribute:["name","slug"]},model:Ke,required:!1,where:{deleted_at:null}}]},i)).map((e=>{var t,i,a,n,o,s,l,d,_,r,c,p,u,m,y,h,f,v,g,b,S,I,D,w,O,T,A,N,C,R,E;const L=(null==e?void 0:e.available_doctor_id)?null===(i=null===(t=null==e?void 0:e.availableDoctor)||void 0===t?void 0:t.availableSpeciality)||void 0===i?void 0:i.speciality_id:null===(a=null==e?void 0:e.availableSpeciality)||void 0===a?void 0:a.speciality_id,k=(null==e?void 0:e.available_doctor_id)&&null!==(o=null===(n=null==e?void 0:e.availableDoctor)||void 0===n?void 0:n.doctor_id)&&void 0!==o?o:null,P=(null==e?void 0:e.available_doctor_id)?null===(s=null==e?void 0:e.availableDoctor)||void 0===s?void 0:s.facility_location_id:null===(l=null==e?void 0:e.availableSpeciality)||void 0===l?void 0:l.facility_location_id,j=(null==e?void 0:e.available_doctor_id)?`${k}_${L}_${P}`:null,B=P&&L?`${P}_${L}`:null;let U=!1;return(null===(d=null==e?void 0:e.appointmentVisitSession)||void 0===d?void 0:d.length)&&(U=null!==(null==e?void 0:e.appointmentVisitSession[0].deleted_at)),{id:null==e?void 0:e.id,start_date_time:null==e?void 0:e.scheduled_date_time,comments:null==e?void 0:e.comments,evaluation_date_time:null==e?void 0:e.evaluation_date_time,available_speciality_id:null==e?void 0:e.available_speciality_id,available_doctor_id:null!==(_=e.available_doctor_id)&&void 0!==_?_:null,priority_id:null==e?void 0:e.priority_id,patient_id:null==e?void 0:e.patient_id,time_slot:null==e?void 0:e.time_slots,case_id:null==e?void 0:e.case_id,visit_deleted:U,socket_id:j,speciality_socket_id:B,appointment_title:null==e?void 0:e.appointment_title,appointment_type_id:null==e?void 0:e.type_id,appointment_duration:null==e?void 0:e.time_slots,picture:null==e?void 0:e.patient.profile_avatar,confirmation_status:null==e?void 0:e.confirmation_status,speciality_id:L,facility_location_id:(null==e?void 0:e.available_doctor_id)?null===(r=null==e?void 0:e.availableDoctor)||void 0===r?void 0:r.facility_location_id:null===(c=null==e?void 0:e.availableSpeciality)||void 0===c?void 0:c.facility_location_id,first_name:null==e?void 0:e.patient.first_name,last_name:null===(p=null==e?void 0:e.patient)||void 0===p?void 0:p.last_name,middle_name:null===(u=null==e?void 0:e.patient)||void 0===u?void 0:u.middle_name,doctor_id:k,doctor_last_name:(null==e?void 0:e.available_doctor_id)&&null!==(f=null===(h=null===(y=null===(m=null==e?void 0:e.availableDoctor)||void 0===m?void 0:m.doctor)||void 0===y?void 0:y.userBasicInfo)||void 0===h?void 0:h.middle_name)&&void 0!==f?f:null,doctor_middle_name:(null==e?void 0:e.available_doctor_id)&&null!==(S=null===(b=null===(g=null===(v=null==e?void 0:e.availableDoctor)||void 0===v?void 0:v.doctor)||void 0===g?void 0:g.userBasicInfo)||void 0===b?void 0:b.last_name)&&void 0!==S?S:null,doctor_first_name:(null==e?void 0:e.available_doctor_id)&&null!==(O=null===(w=null===(D=null===(I=null==e?void 0:e.availableDoctor)||void 0===I?void 0:I.doctor)||void 0===D?void 0:D.userBasicInfo)||void 0===w?void 0:w.first_name)&&void 0!==O?O:null,visit_session_state_slug:(null===(T=null==e?void 0:e.appointmentVisit)||void 0===T?void 0:T.visitState)?null==e?void 0:e.appointmentVisit.visitState.slug:null,visit_session_state_name:(null===(A=null==e?void 0:e.appointmentVisit)||void 0===A?void 0:A.visitState)?null==e?void 0:e.appointmentVisit.visitState.name:null,assign_to_me:!1,case_type:null!==(R=null===(C=null===(N=null==e?void 0:e.case)||void 0===N?void 0:N.caseType)||void 0===C?void 0:C.name)&&void 0!==R?R:null,case_type_id:null==e?void 0:e.case_type_id,back_dated_check:!(!(null===(E=null==e?void 0:e.appointmentVisit)||void 0===E?void 0:E.document_uploaded)||null===(null==e?void 0:e.billable))}}))})),this.getDeletedAppointmentsById=(e,t,i)=>ro(this,void 0,void 0,(function*(){const{appointment_id:t,user_id:a=Number(process.env.USERID)}=e;return this.shallowCopy(yield this.__appointmentRepo.findAll({id:t},{include:[{as:"availableDoctor",include:{as:"availableSpeciality",model:it,required:!1,where:{deleted_at:null}},model:ot,required:!1,where:{deleted_at:null}},{as:"availableSpeciality",include:{as:"speciality",model:ue,required:!1,where:{deleted_at:null}},model:it,required:!1,where:{deleted_at:null}}]},i)).map((e=>{var t,i,a,n,o,s,l;const d=(null==e?void 0:e.available_doctor_id)?null===(i=null===(t=null==e?void 0:e.availableDoctor)||void 0===t?void 0:t.availableSpeciality)||void 0===i?void 0:i.speciality_id:null===(a=null==e?void 0:e.availableSpeciality)||void 0===a?void 0:a.speciality_id,_=(null==e?void 0:e.available_doctor_id)&&null!==(o=null===(n=null==e?void 0:e.availableDoctor)||void 0===n?void 0:n.doctor_id)&&void 0!==o?o:null,r=(null==e?void 0:e.available_doctor_id)?null===(s=null==e?void 0:e.availableDoctor)||void 0===s?void 0:s.facility_location_id:null===(l=null==e?void 0:e.availableSpeciality)||void 0===l?void 0:l.facility_location_id,c=(null==e?void 0:e.available_doctor_id)?`${_}_${d}`:null,p=r&&d?`${r}_${d}`:null;return{doctor_id:_,id:null==e?void 0:e.id,speciality_socket_id:p,socket_id:c,speciality_id:d}}))})),this.getJoinAndProjectionClause=e=>{const{facilityLocationIds:t,facilityLocationName:i,desirefilters:a,requiredFilter:n,createdAt:o,updatedAt:s,createdByIds:l,updatedByIds:d}=e;let _=null;return(null==t?void 0:t.length)&&(_={id:{[po.in]:t}}),i?{join:{include:[{as:"faciltyTiming",model:ge,required:!1,where:{deleted_at:null}},{as:"facility",model:Ut,required:!1,where:{deleted_at:null,name:{[po.like]:`%${i}%`}}}]},where:Object.assign({deleted_at:null},_)}:a?{join:{include:[{as:"faciltyTiming",model:ge,required:!1,where:{deleted_at:null}},{as:"facility",model:Ut,required:!1,where:{deleted_at:null}}]},where:Object.assign(Object.assign({deleted_at:null},_),{[po.or]:[uo.where(uo.col("address"),{[po.like]:`%${n}%`}),uo.where(uo.col("city"),{[po.like]:`%${n}%`}),uo.where(uo.col("state"),{[po.like]:`%${n}%`}),uo.where(uo.col("zip"),{[po.like]:`%${n}%`}),uo.where(uo.fn("concat",uo.col("address")," ",uo.col("city")),{[po.like]:`%${n}%`}),uo.where(uo.fn("concat",uo.col("address")," ",uo.col("state")),{[po.like]:`%${n}%`}),uo.where(uo.fn("concat",uo.col("address")," ",uo.col("zip")),{[po.like]:`%${n}%`}),uo.where(uo.fn("concat",uo.col("city")," ",uo.col("zip")),{[po.like]:`%${n}%`}),uo.where(uo.fn("concat",uo.col("state")," ",uo.col("zip")),{[po.like]:`%${n}%`}),uo.where(uo.fn("concat",uo.col("address")," ",uo.col("city")," ",uo.col("state")),{[po.like]:`%${n}%`}),uo.where(uo.fn("concat",uo.col("address")," ",uo.col("city")," ",uo.col("zip")),{[po.like]:`%${n}%`}),uo.where(uo.fn("concat",uo.col("address")," ",uo.col("state")," ",uo.col("zip")),{[po.like]:`%${n}%`}),uo.where(uo.fn("concat",uo.col("city")," ",uo.col("state")," ",uo.col("zip")),{[po.like]:`%${n}%`}),uo.where(uo.fn("concat",uo.col("address")," ",uo.col("city")," ",uo.col("state")," ",uo.col("zip")),{[po.like]:`%${n}%`})]})}:{join:{include:[{as:"facility",model:Ut,required:!1,where:{deleted_at:null}},{as:"faciltyTiming",model:ge,required:!1,where:{deleted_at:null}},{model:le,as:"created_by_user",attributes:["id"],required:!!(null==l?void 0:l.length),include:{model:Ce,as:"userBasicInfo",attributes:["first_name","middle_name","last_name"]}},{model:le,as:"updated_by_user",attributes:["id"],required:!!(null==d?void 0:d.length),include:{model:Ce,as:"userBasicInfo",attributes:["first_name","middle_name","last_name"]}}]},where:Object.assign({deleted_at:null},_)}},this.resolveAppointmentTimeSlotChange=(e,t,i,a,n,o,s)=>{let l=t.filter((e=>e.type_id===o)),d=t.filter((e=>e.type_id!==o)),_=[],r=[];const c=[],p=[],u=[];for(const e of t)e.type_id===o?(r=[...r,e],l=[...l,...this.filterNonNull(null==t?void 0:t.filter((t=>{if(e.patient_id!==(null==t?void 0:t.patient_id)&&e.case_id!==(null==t?void 0:t.case_id))return t})))]):(d=[...d,...this.filterNonNull(null==t?void 0:t.filter((t=>{if(l.find((t=>e.patient_id!==(null==t?void 0:t.patient_id)&&e.case_id!==(null==t?void 0:t.case_id))))return t})))],_=[..._,...this.filterNonNull(null==t?void 0:t.filter((t=>{if(l.find((t=>e.patient_id===(null==t?void 0:t.patient_id)&&e.case_id===(null==t?void 0:t.case_id))))return t})))]);r=[...r,...d];let m=r.map((t=>{const l=t.time_slots/n;if(!e.find(((n,d)=>{var _;let r=!1;if((null===(_=e[d+l])||void 0===_?void 0:_.count)>0||(r=!0),!r){for(let t=0;t<l;t+=1)p.push(e[d+t]),e[d+t].count-=1;if(t.type_id===o){const e={};e.slots=p,e.patient_id=t.patient_id,e.case_id=t.case_id,u.push(e)}const _={};return _.id=t.id,_.scheduled_date_time=e[d].startDateTime,_.available_doctor_id=i,_.available_speciality_id=a,_.status_id=s,_.time_slots=t.time_slots,c.push(_),n}})))return Object.assign({},t)}));return m=this.filterNonNull([...m,..._.map((t=>{const o=t.time_slots/n,l=e.find(((l,d)=>{var _;let r=!1;if((null===(_=e[d+o])||void 0===_?void 0:_.count)>0||(r=!0),!r){const _=u.find((o=>{if(o.case_id===t.case_id&&o.patient_id===t.patient_id){const l=o.slots.pop();if(l.startDateTime.setMinutes(l.startDateTime.getMinutes()+n),new Date(e[d].startDateTime).getTime()>=new Date(l.startDateTime).getTime()){const n={};return n.id=t.id,n.scheduled_date_time=e[d].startDateTime,n.available_doctor_id=i,n.available_speciality_id=a,n.status_id=s,n.time_slots=t.time_slots,c.push(n),o}}}));if(_&&Object.keys(_).length){for(let t=0;t<o;t+=1)e[d+t].count-=1;return l}}}));if(!l||!Object.keys(l).length)return Object.assign({},t)}))]),[c,m]},this.__http=new v}};mo=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object,Object])],mo);const yo=ra.Op;let ho=class extends bn{constructor(e,t){super(),this.__repo=e,this.http=t,this.getAputForMultipleAppointmentsll=(e,t)=>{return i=this,a=void 0,o=function*(){const{appointment_ids:t,status_id:i}=e;return this.__repo.updateByColumnMatched({appointment_id:{[yo.in]:t},deleted_at:null},{status_id:i})},new((n=void 0)||(n=Promise))((function(e,t){function s(e){try{d(o.next(e))}catch(e){t(e)}}function l(e){try{d(o.throw(e))}catch(e){t(e)}}function d(t){var i;t.done?e(t.value):(i=t.value,i instanceof n?i:new n((function(e){e(i)}))).then(s,l)}d((o=o.apply(i,a||[])).next())}));var i,a,n,o},this.__http=new t}};ho=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object])],ho);ra.Op;let fo=class extends bn{constructor(e,t){super(),this.casePatientSessionStatusesRepo=e,this.http=t,this.getCasePatientSessionNoShowStatus=()=>{return e=this,t=void 0,a=function*(){return this.__repo.findOne({slug:"no_show"})},new((i=void 0)||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}));var e,t,i,a},this.__repo=e,this.__http=new t}};fo=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Object,Object])],fo);const vo=new mo(va,Ta,ga,Na,Aa,Ba,Pa,ka,Ma,xa,wa,Ia,Xa,Ka,Ca,an,La,nn,_n),go=(new Jn(Na,_n),new Hn(Ra,ga,Ea,Na,Ta,La,Aa,_n)),bo=new Un(ka,ga,Ta,va,xa,wa,Ia,Aa,Pa,Ma,Na,Ba,Ka,za,Ua,Ra,Va,Da,Ha,Ya,Wa,Za,Xa,en,tn,on,Ga,_n),So=new Dn(ya,fa,_n),Io=new Sn(ha,_n),Do=new Kn(Pa,Ba,Na,ga,Ta,Oa,Aa,Ua,qa,Fa,Va,Ma,ka,Ja,_n),wo=new $n(Ba,Pa,Na,Oa,Aa,Ua,qa,Fa,ga,Ma,$a,Ta,La,va,Va,ka,_n),Oo=new _o(Ma,ga,Ba,ka,Va,ya,Ta,va,wa,Xa,Ka,_n),To=new wn(ja,_n),Ao=new Nn(xa,_n),No=new An(wa,_n),Co=new On(Da,_n),Ro=new Zn(Qa,Ya,Wa,_n),Eo=new Qn(Sa,_n),Lo=new oo(ba,Ta,Na,ga,Ba,ka,va,Ma,_n),ko=new qn(Ja,_n),Po=new to(Na,Aa,ga,_n);new ho(Za,_n),new fo(Ia,_n);let jo=class{constructor(e){this.__service=e,this.getAll=(e,t,i)=>{return a=this,n=void 0,s=function*(){try{const{headers:{authorization:a}}=e,n=yield this.__service.getAll(a);return t.locals.data={result:{data:n},message_code:"SUCCESS"},void i()}catch(e){i(e)}},new((o=void 0)||(o=Promise))((function(e,t){function i(e){try{d(s.next(e))}catch(e){t(e)}}function l(e){try{d(s.throw(e))}catch(e){t(e)}}function d(t){var a;t.done?e(t.value):(a=t.value,a instanceof o?a:new o((function(e){e(a)}))).then(i,l)}d((s=s.apply(a,n||[])).next())}));var a,n,o,s}}};jo=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Sn])],jo);var Bo=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};let Uo=class{constructor(e){this.__service=e,this.get=(e,t,i)=>Bo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},query:n}=e,o=yield this.__service.get(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.post=(e,t,i)=>Bo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.add(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.put=(e,t,i)=>Bo(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.update(o,n,a);return yield a.commit(),t.locals.data={result:{data:s},message_code:"SUCCESS"},void i()}catch(e){throw yield a.rollback(),e}}catch(e){i(e)}}))}};Uo=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Dn])],Uo);let qo=class{constructor(e){this.__service=e,this.getAll=(e,t,i)=>{return a=this,n=void 0,s=function*(){try{const{headers:{authorization:a}}=e,n=yield this.__service.getAll(a);return t.locals.data={result:{data:n},message_code:"SUCCESS"},void i()}catch(e){i(e)}},new((o=void 0)||(o=Promise))((function(e,t){function i(e){try{d(s.next(e))}catch(e){t(e)}}function l(e){try{d(s.throw(e))}catch(e){t(e)}}function d(t){var a;t.done?e(t.value):(a=t.value,a instanceof o?a:new o((function(e){e(a)}))).then(i,l)}d((s=s.apply(a,n||[])).next())}));var a,n,o,s}}};qo=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[wn])],qo);let Fo=class{constructor(e){this.getAppointmentPriority=(e,t,i)=>{return a=this,n=void 0,s=function*(){try{const e=yield this.__service.getAppointmentPriority();return t.locals.data={result:{data:e},message_code:"SUCCESS"},void i()}catch(e){i(e)}},new((o=void 0)||(o=Promise))((function(e,t){function i(e){try{d(s.next(e))}catch(e){t(e)}}function l(e){try{d(s.throw(e))}catch(e){t(e)}}function d(t){var a;t.done?e(t.value):(a=t.value,a instanceof o?a:new o((function(e){e(a)}))).then(i,l)}d((s=s.apply(a,n||[])).next())}));var a,n,o,s},this.__service=e}};Fo=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[On])],Fo);let Mo=class{constructor(e){this.getAppointmentStatus=(e,t,i)=>{return a=this,n=void 0,s=function*(){try{const{query:a}=e,n=yield this.__service.getAppointmentStatus(a);return t.locals.data={result:{data:n},message_code:"SUCCESS"},void i()}catch(e){i(e)}},new((o=void 0)||(o=Promise))((function(e,t){function i(e){try{d(s.next(e))}catch(e){t(e)}}function l(e){try{d(s.throw(e))}catch(e){t(e)}}function d(t){var a;t.done?e(t.value):(a=t.value,a instanceof o?a:new o((function(e){e(a)}))).then(i,l)}d((s=s.apply(a,n||[])).next())}));var a,n,o,s},this.__service=e}};Mo=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[An])],Mo);let $o=class{constructor(e){this.getAppointmentTypes=(e,t,i)=>{return a=this,n=void 0,s=function*(){try{const e=yield this.__service.getAppointmentTypes();return t.locals.data={result:{data:e},message_code:"SUCCESS"},void i()}catch(e){i(e)}},new((o=void 0)||(o=Promise))((function(e,t){function i(e){try{d(s.next(e))}catch(e){t(e)}}function l(e){try{d(s.throw(e))}catch(e){t(e)}}function d(t){var a;t.done?e(t.value):(a=t.value,a instanceof o?a:new o((function(e){e(a)}))).then(i,l)}d((s=s.apply(a,n||[])).next())}));var a,n,o,s},this.__service=e}};$o=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Nn])],$o);var Vo=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};let xo=class{constructor(e){this.__service=e,this.createAppSession=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.createAppSession(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.activateAppointment=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.activateAppointment(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.autoResolveAppointments=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.autoResolveAppointments(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.cancelAppointments=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.cancelAppointments(n,a);return t.locals.data={result:{data:o.data,socketData:o.socketData},message:(null==o?void 0:o.message)?`${null==o?void 0:o.message}`:"SUCCESS",status:null==o?void 0:o.status},void i()}catch(e){i(e)}})),this.cancelSoftPatientAppointments=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.cancelSoftPatientAppointment(n,a);return t.locals.data={result:{data:o.data},message:(null==o?void 0:o.message)?`${null==o?void 0:o.message}`:"SUCCESS",status:null==o?void 0:o.status},void i()}catch(e){i(e)}})),this.checkAppointmentsByCase=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.checkAppointmentsByCase(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.checkInitial=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.checkInitial(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.createBackDatedAppointments=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.createBackDatedAppointments(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.createBackDatedAppointmentsV1=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.createBackDatedAppointmentsV1(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.deleteAppointments=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.deleteAppointments(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.forwardAppointmentsToFD=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.forwardAppointmentsToFD(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAll=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},query:n}=e,o=yield this.__service.getAll(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAllAppointmentPushedToFrontDesk=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getAllAppointmentPushedToFrontDesk(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAllDoctorSpecialityAppointments=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getAllDoctorSpecialityAppointmentsModify(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAllDoctorSpecialityAppointmentsV2=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getAllDoctorSpecialityAppointmentsV2(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAllDoctorSpecialityAppointmentsModify=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getAllDoctorSpecialityAppointmentsModify(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAllPatientAppointments=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getAllPatientAppointments(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAllPatientAppointmentsV1=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getAllPatientAppointmentsV1(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAppointmentAgainstAvailablity=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getAppointmentAgainstAvailablity(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAppointmentById=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getAppointmentById(n,a);return t.locals.data={result:{data:o},message:(null==o?void 0:o.message)?`${null==o?void 0:o.message}`:"SUCCESS",status:null==o?void 0:o.status},void i()}catch(e){i(e)}})),this.getAppointmentModelDataById=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},query:n}=e,o=yield this.__service.getAppointmentModelDataById(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAppointmentInfoForSpeciality=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},query:n}=e,o=yield this.__service.getAppointmentInfoForSpeciality(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAppointmentCptCodes=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},query:n}=e,o=yield this.__service.getAppointmentCptCodes(n,a);return t.locals.data={result:{data:o},message:(null==o?void 0:o.message)?`${null==o?void 0:o.message}`:"SUCCESS",status:null==o?void 0:o.status},void i()}catch(e){i(e)}})),this.getAppointmentList=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getAppointmentList(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAppointmentListV1=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getAppointmentListV1(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAppointmentListV2=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getAppointmentListV2(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAppointments=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getAppointments(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAppointmentListByCase=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getAppointmentListByCase(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAppointmentListForHealthApp=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},query:n}=e,o=yield this.__service.getAppointmentListForHealthApp(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getCancelledAppointments=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getCancelledAppointments(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getCount=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getCount(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getDoctorAppointments=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getDoctorAppointments(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getDoctorAppointmentsById=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getDoctorAppointmentsById(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getinfo=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getInfo(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getNextAndLastAppointment=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getNextAndLastAppointment(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getPatientAppointments=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getPatientAppointments(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getPatientAppointmentsV1=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getPatientAppointmentsV1(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getPatientHistory=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getPatientHistory(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getPatientHistoryCount=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getPatientHistoryCounts(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getRelatedInfo=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getRelatedInfo(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getSpecialityAppointments=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getSpecialityAppointments(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getTodayAppointmentOfPatient=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getTodayAppointmentOfPatient(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.isFutureAppointment=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.isFutureAppointment(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.isTodayAppointment=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.isTodayAppointment(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.post=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.post(o,n,a);return t.locals.data={result:{data:s},message_code:"SUCCESS"},void i()}catch(e){throw a&&a.rollback(),e}}catch(e){i(e)}})),this.postV1=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.postV1(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.createAppointmentWithCptCodes=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.createAppointmentWithCptCodess(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.put=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.put(o,n,a);return yield a.commit(),t.locals.data={result:{data:s},message_code:"SUCCESS"},void i()}catch(e){throw yield a.rollback(),e}}catch(e){i(e)}})),this.putV1=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.putV1(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.removeEvaluationTime=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.removeEvaluationTime(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.resolveAppointmentForDoctor=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.resolveAppointmentForDoctor(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.resolveAppointmentForSpeciality=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.resolveAppointmentForSpeciality(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.suggest=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.suggest(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.triggerAppointmentSocket=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.triggerAppointmentSocket(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.updateAppointmentDoctor=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.updateAppointmentDoctor(o,n,a);return yield a.commit(),t.locals.data={result:{data:s},message_code:"SUCCESS"},void i()}catch(e){throw yield a.rollback(),e}}catch(e){i(e)}})),this.updateAppointmentAndVisitStatus=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.updateAppointmentAndVisitStatus(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.updateAppointmentEvaluation=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.updateAppointmentEvaluation(o,n,a);return yield a.commit(),t.locals.data={result:{data:s},message_code:"SUCCESS"},void i()}catch(e){throw yield a.rollback(),e}}catch(e){i(e)}})),this.updateAppointmentForIos=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.updateAppointmentForIos(o,n,a);return yield a.commit(),t.locals.data={result:{data:s},message_code:"SUCCESS"},void i()}catch(e){throw yield a.rollback(),e}}catch(e){i(e)}})),this.updateAppointmentStatus=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.updateAppointmentStatus(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.updateStatusMultipleAppointments=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.updateStatusMultipleAppointments(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.updateStatus=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.updateStatus(o,n,a);return t.locals.data={result:{data:s},message_code:"SUCCESS"},void i()}catch(e){throw yield a.rollback(),e}}catch(e){i(e)}})),this.cancelAppointmentsDeleteAssignments=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.cancelAppointmentsDeleteAssignments(o,n,a);return t.locals.data={result:{data:s.data},message:(null==s?void 0:s.message)?`${null==s?void 0:s.message}`:"SUCCESS",status:null==s?void 0:s.status},i(),void(yield a.commit())}catch(e){throw yield a.rollback(),e}}catch(e){i(e)}})),this.getAllAppointmentPushedToFrontDeskV1=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getAllAppointmentPushedToFrontDeskV1(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getCancelledAppointmentsV1=(e,t,i)=>Vo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getCancelledAppointmentsV1(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}}))}};xo=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Un])],xo);let Ko=class{constructor(e){this.__service=e,this.getAll=(e,t,i)=>{return a=this,n=void 0,s=function*(){try{const{headers:{authorization:a}}=e,n=yield this.__service.getAll(a);return t.locals.data={result:{data:n},message_code:"SUCCESS"},void i()}catch(e){i(e)}},new((o=void 0)||(o=Promise))((function(e,t){function i(e){try{d(s.next(e))}catch(e){t(e)}}function l(e){try{d(s.throw(e))}catch(e){t(e)}}function d(t){var a;t.done?e(t.value):(a=t.value,a instanceof o?a:new o((function(e){e(a)}))).then(i,l)}d((s=s.apply(a,n||[])).next())}));var a,n,o,s}}};Ko=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[qn])],Ko);var zo=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};let Go=class{constructor(e){this.__service=e,this.automate=(e,t,i)=>zo(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.automate(o,n,a);return yield a.commit(),t.locals.data={result:{data:s},message_code:"SUCCESS"},void i()}catch(e){throw a&&a.rollback(),e}}catch(e){i(e)}})),this.automateV1=(e,t,i)=>zo(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.automateV1(o,n,a);return yield a.commit(),t.locals.data={result:{data:s},message_code:"SUCCESS"},void i()}catch(e){throw a&&a.rollback(),e}}catch(e){i(e)}})),this.delete=(e,t,i)=>zo(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},query:o}=e,s=yield this.__service.delete(o,n,a);return yield a.commit(),t.locals.data={result:{data:s},message_code:"SUCCESS"},void i()}catch(e){throw a&&a.rollback(),e}}catch(e){i(e)}})),this.getAppointments=(e,t,i)=>zo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getAppointments(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAvailabilities=(e,t,i)=>zo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getAvailabilities(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getDoctorAssignments=(e,t,i)=>zo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getDoctorAssignments(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getDoctorAssignmentsV1=(e,t,i)=>zo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getDoctorAssignmentsV1(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getFilteredDoctor=(e,t,i)=>zo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getFilteredDoctor(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getFreeSlotsOfDoctors=(e,t,i)=>zo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getFreeSlotsOfDoctors(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getMaunalDoctorsList=(e,t,i)=>zo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getMaunalDoctorsList(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getMaunalDoctorsListV1=(e,t,i)=>zo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getMaunalDoctorsListV1(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getPartialAvailableDoctor=(e,t,i)=>zo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getPartialAvailableDoctor(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getPreCheckForUpdation=(e,t,i)=>zo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getPreCheckForUpdation(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.post=(e,t,i)=>zo(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.post(o,n,a);return yield a.commit(),t.locals.data={result:{data:s},message_code:"SUCCESS"},void i()}catch(e){throw a&&a.rollback(),e}}catch(e){i(e)}})),this.put=(e,t,i)=>zo(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.put(o,n,a);return t.locals.data={result:{data:s},message_code:"SUCCESS"},yield a.commit(),void i()}catch(e){throw yield a.rollback(),e}}catch(e){i(e)}})),this.resolvePastAvailabilties=(e,t,i)=>zo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.resolvePastAvailabilties(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.specificAppointments=(e,t,i)=>zo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.specificAppointments(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}}))}};Go=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[$n])],Go);var Ho=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};let Yo=class{constructor(e){this.__service=e,this.delete=(e,t,i)=>Ho(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},query:o}=e,s=yield this.__service.delete(o,n,a);return yield a.commit(),t.locals.data={result:{data:s},message_code:"SUCCESS"},void i()}catch(e){throw yield a.rollback(),e}}catch(e){i(e)}})),this.getAll=(e,t,i)=>Ho(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getAll(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAppointments=(e,t,i)=>Ho(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},query:n}=e,o=yield this.__service.getAppointments(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getPreCheckForUpdation=(e,t,i)=>Ho(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getPreCheckForUpdation(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getSpecialityAssignments=(e,t,i)=>Ho(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getSpecialityAssignments(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.post=(e,t,i)=>Ho(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.post(o,n,a);return yield a.commit(),t.locals.data={result:{data:s.data},message_code:(null==s?void 0:s.message)?"ASSIGNMENT_CREATED_SUCCESSFULLY_WITH_NO_DOCTOR_ASSIGNMENT":"SUCCESS"},void i()}catch(e){throw yield a.rollback(),e}}catch(e){i(e)}})),this.postV1=(e,t,i)=>Ho(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.postV1(o,n,a);return yield a.commit(),t.locals.data={result:{data:s.data},message_code:(null==s?void 0:s.message)?"ASSIGNMENT_CREATED_SUCCESSFULLY_WITH_NO_DOCTOR_ASSIGNMENT":"SUCCESS"},void i()}catch(e){throw yield a.rollback(),e}}catch(e){i(e)}})),this.createDoctorAssignments=(e,t,i)=>Ho(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.createDoctorAssignments(o,n,a);return yield a.commit(),t.locals.data={result:{data:s.data},message_code:(null==s?void 0:s.message)?"ASSIGNMENT_CREATED_SUCCESSFULLY_WITH_NO_DOCTOR_ASSIGNMENT":"SUCCESS"},void i()}catch(e){throw console.log("error",e.stack),yield a.rollback(),e}}catch(e){i(e)}})),this.update=(e,t,i)=>Ho(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.update(o,n,a);return yield a.commit(),t.locals.data={result:{data:s},message_code:"SUCCESS"},void i()}catch(e){throw yield a.rollback(),e}}catch(e){i(e)}})),this.updateDoctorAssignment=(e,t,i)=>Ho(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.updateDoctorAssignment(o,n,a);return yield a.commit(),t.locals.data={result:{data:s},message_code:"SUCCESS"},void i()}catch(e){throw console.log("error",e.stack),yield a.rollback(),e}}catch(e){console.log("error",e.stack),i(e)}}))}};Yo=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Kn])],Yo);var Wo=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};let Qo=class{constructor(e){this.__service=e,this.setToDefault=(e,t,i)=>Wo(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.setToDefault(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.update=(e,t,i)=>Wo(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.update(o,n,a);return yield a.commit(),t.locals.data={result:{data:s},message_code:"SUCCESS"},void i()}catch(e){throw yield a.rollback(),e}}catch(e){i(e)}}))}};Qo=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Hn])],Qo);var Jo=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};let Xo=class{constructor(e){this.__service=e,this.get=(e,t,i)=>Jo(this,void 0,void 0,(function*(){try{const{body:a,headers:{authorization:n}}=e,o=yield this.__service.get(a,n);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.post=(e,t,i)=>Jo(this,void 0,void 0,(function*(){try{const{body:a,headers:{authorization:n}}=e,o=yield this.__service.post(a,n);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.put=(e,t,i)=>Jo(this,void 0,void 0,(function*(){try{const{body:a,headers:{authorization:n}}=e,o=yield this.__service.put(a,n);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}}))}};Xo=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Qn])],Xo);var Zo=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};let es=class{constructor(e){this.getPatient=(e,t,i)=>Zo(this,void 0,void 0,(function*(){try{const{query:a,headers:{authorization:n}}=e,o=yield this.__service.getPatient(a,n);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getWalkInPatients=(e,t,i)=>Zo(this,void 0,void 0,(function*(){try{const{body:a,headers:{authorization:n}}=e,o=yield this.__service.getWalkInPatients(a,n);return t.locals.data={result:{data:o.result.data},message_code:null,message:o.message},void i()}catch(e){i(e)}})),this.__service=e}};es=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[Zn])],es);var ts=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};let is=class{constructor(e){this.__service=e,this.getDoctors=(e,t,i)=>ts(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getDoctors(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getFacilities=(e,t,i)=>ts(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getFacilities(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getSpecialities=(e,t,i)=>ts(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getSpecialities(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}}))}};is=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[to])],is);var as=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};let ns=class{constructor(e){this.__service=e,this.details=(e,t,i)=>as(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.details(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAll=(e,t,i)=>as(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getAll(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}}))}};ns=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[oo])],ns);var os=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};let ss=class{constructor(e){this.__service=e,this.delete=(e,t,i)=>os(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.deleteUnavailableDoctor(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getAppointments=(e,t,i)=>os(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getAppointments(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.post=(e,t,i)=>os(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.addUnavailableDoctor(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.put=(e,t,i)=>os(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.update(o,n,a);return yield a.commit(),t.locals.data={result:{data:s},message_code:"SUCCESS"},void i()}catch(e){throw yield a.rollback(),e}}catch(e){i(e)}}))}};ss=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[_o])],ss);var ls=function(e,t,i,a){return new(i||(i=Promise))((function(n,o){function s(e){try{d(a.next(e))}catch(e){o(e)}}function l(e){try{d(a.throw(e))}catch(e){o(e)}}function d(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i((function(e){e(t)}))).then(s,l)}d((a=a.apply(e,t||[])).next())}))};let ds=class{constructor(e){this.__service=e,this.deleteAllAssignmentAndAppointment=(e,t,i)=>ls(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.deleteAllAssignmentAndAppointment(o,n,a);return yield a.commit(),t.locals.data={result:{data:s},message_code:"SUCCESS"},void i()}catch(e){throw yield a.rollback(),e}}catch(e){i(e)}})),this.getDoctorsDetail=(e,t,i)=>ls(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},query:n}=e,o=yield this.__service.getDoctorsDetail(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getMaxMinOfFacility=(e,t,i)=>ls(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getMaxMinOfFacility(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getDoctorsInfo=(e,t,i)=>ls(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getDoctorsInfo(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getDoctorsInfoV1=(e,t,i)=>ls(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getDoctorsInfoV1(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getUserInfoByFacilities=(e,t,i)=>ls(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getUserInfoByFacilities(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getUserInfoBySpecialities=(e,t,i)=>ls(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getUserInfoBySpecialities(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.getUserInfoBySpecialitiesV1=(e,t,i)=>ls(this,void 0,void 0,(function*(){try{const{headers:{authorization:a},body:n}=e,o=yield this.__service.getUserInfoBySpecialitiesV1(n,a);return t.locals.data={result:{data:o},message_code:"SUCCESS"},void i()}catch(e){i(e)}})),this.updateSpecialityTimeSlots=(e,t,i)=>ls(this,void 0,void 0,(function*(){try{const a=yield _a.transaction();try{const{headers:{authorization:n},body:o}=e,s=yield this.__service.updateSpecialityTimeSlots(o,n,a);return t.locals.data={result:{data:s},message_code:"SUCCESS"},void i()}catch(e){throw yield a.rollback(),e}}catch(e){i(e)}}))}};ds=function(e,t,i,a){var n,o=arguments.length,s=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,i,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(s=(o<3?n(s):o>3?n(t,i,s):n(t,i))||s);return o>3&&s&&Object.defineProperty(t,i,s),s}([cn,function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[mo])],ds);const _s=new Uo(So),rs=new jo(Io),cs=new ds(vo),ps=new Mo(No),us=new Qo(go),ms=new xo(bo),ys=new Yo(Do),hs=new qo(To),fs=new Go(wo),vs=new ss(Oo),gs=new $o(Ao),bs=new es(Ro),Ss=new ns(Lo),Is=new Xo(Eo),Ds=new Fo(Co),ws=new Ko(ko),Os=new is(Po);const Ts=new class{constructor(){this.logger=(e,t,i)=>{return a=this,n=void 0,s=function*(){try{const{locals:{data:{message_code:i,result:a,message:n,status:o}}}=t,{body:s,query:l,headers:d}=e,_=i?Object.assign({},un(i)):{message:n},r=Buffer.byteLength(JSON.stringify(a))/1024<=200?a:"Data is to large to store",c={body:s,headers:d,query:l,response:Object.assign(Object.assign({},_),{result:r,status:200})},p=0;return vn.logToCloudWatch(e,t,"info",c,_,r,a,p,!1),void t.status(200).json(Object.assign(Object.assign({},_),{result:Object.assign({},a),status:o||200}))}catch(e){i(e)}},new((o=void 0)||(o=Promise))((function(e,t){function i(e){try{d(s.next(e))}catch(e){t(e)}}function l(e){try{d(s.throw(e))}catch(e){t(e)}}function d(t){var a;t.done?e(t.value):(a=t.value,a instanceof o?a:new o((function(e){e(a)}))).then(i,l)}d((s=s.apply(a,n||[])).next())}));var a,n,o,s}}},As=(0,o.Router)();As.get("/",((...e)=>rs.getAll(...e)),Ts.logger);const Ns=(0,o.Router)();Ns.post("/",((...e)=>_s.post(...e)),Ts.logger),Ns.get("/",((...e)=>_s.get(...e)),Ts.logger),Ns.put("/",((...e)=>_s.put(...e)),Ts.logger);const Cs=(0,o.Router)();Cs.get("/",((...e)=>hs.getAll(...e)),Ts.logger);const Rs=(0,o.Router)();Rs.get("/get-appointment-priority",((...e)=>Ds.getAppointmentPriority(...e)),Ts.logger);const Es=(0,o.Router)();Es.get("/get-appointment-status",((...e)=>ps.getAppointmentStatus(...e)),Ts.logger);const Ls=(0,o.Router)();Ls.get("/get-appointment-types",((...e)=>gs.getAppointmentTypes(...e)),Ts.logger);const ks=new class{constructor(){this.changeInAppointments=(e,t,i)=>{return a=this,n=void 0,s=function*(){var a;try{const{headers:{authorization:n},originalUrl:o}=e,{user_id:s,case_id:l}=e.body,d={headers:{Authorization:n}};let _={},r=[];return"/api/appointments/cancel-appointments"===o&&(r=t.locals.data.result.socketData.map((e=>e.case_id))),"/api/appointments/manually-update-status"===o&&(r=[t.locals.data.result.data.case_id]),"/api/appointments/create-with-cptCodes"===o&&(r=[null===(a=t.locals.data.result.data.appointments[0])||void 0===a?void 0:a.case_id]),s&&(_={user_id:s}),_.case_ids=l?[l]:r,this.__http.webhook(`${process.env.SOCKET_SERVER_URL}appointment/change-in-appointments`,_,d),void i()}catch(e){i(e)}},new((o=void 0)||(o=Promise))((function(e,t){function i(e){try{d(s.next(e))}catch(e){t(e)}}function l(e){try{d(s.throw(e))}catch(e){t(e)}}function d(t){var a;t.done?e(t.value):(a=t.value,a instanceof o?a:new o((function(e){e(a)}))).then(i,l)}d((s=s.apply(a,n||[])).next())}));var a,n,o,s},this.__http=new _n}},Ps=(0,o.Router)();Ps.get("/",((...e)=>ms.getAll(...e)),Ts.logger),Ps.get("/get-appointment-list-for-health-app",((...e)=>ms.getAppointmentListForHealthApp(...e)),Ts.logger),Ps.get("/get-appointment-cpt-codes",((...e)=>ms.getAppointmentCptCodes(...e)),Ts.logger),Ps.get("/get-appointment-by-id",((...e)=>ms.getAppointmentModelDataById(...e)),Ts.logger),Ps.get("/get-speciality-info",((...e)=>ms.getAppointmentInfoForSpeciality(...e)),Ts.logger),Ps.post("/",((...e)=>ms.post(...e)),ks.changeInAppointments,Ts.logger),Ps.post("/v1",((...e)=>ms.postV1(...e)),ks.changeInAppointments,Ts.logger),Ps.post("/get-count",((...e)=>ms.getCount(...e)),Ts.logger),Ps.post("/back-dated-appointment",((...e)=>ms.createBackDatedAppointments(...e)),ks.changeInAppointments,Ts.logger),Ps.post("/back-dated-appointment-v1",((...e)=>ms.createBackDatedAppointmentsV1(...e)),ks.changeInAppointments,Ts.logger),Ps.post("/info",((...e)=>ms.getinfo(...e)),Ts.logger),Ps.post("/suggest",((...e)=>ms.suggest(...e)),Ts.logger),Ps.post("/auto-resolve",((...e)=>ms.autoResolveAppointments(...e)),Ts.logger),Ps.post("/check-initial",((...e)=>ms.checkInitial(...e)),Ts.logger),Ps.post("/get-related-info",((...e)=>ms.getRelatedInfo(...e)),Ts.logger),Ps.post("/cancel-appointments",((...e)=>ms.cancelAppointments(...e)),ks.changeInAppointments,Ts.logger),Ps.post("/cancel-soft-patient-appointment",((...e)=>ms.cancelSoftPatientAppointments(...e)),ks.changeInAppointments,Ts.logger),Ps.post("/is-future-appointment",((...e)=>ms.isFutureAppointment(...e)),Ts.logger),Ps.post("/is-today-appointment",((...e)=>ms.isTodayAppointment(...e)),Ts.logger),Ps.post("/create-with-cptCodes",((...e)=>ms.createAppointmentWithCptCodes(...e)),ks.changeInAppointments,Ts.logger),Ps.post("/get-appointment-list",((...e)=>ms.getAppointmentList(...e)),Ts.logger),Ps.post("/get-appointment-list-v1",((...e)=>ms.getAppointmentListV1(...e)),Ts.logger),Ps.post("/get-appointment-list-v2",((...e)=>ms.getAppointmentListV2(...e)),Ts.logger),Ps.post("/get-doctor-appointments",((...e)=>ms.getDoctorAppointments(...e)),Ts.logger),Ps.post("/get-doctor-appointments-by-id",((...e)=>ms.getDoctorAppointmentsById(...e)),Ts.logger),Ps.post("/forward-appointments-fd",((...e)=>ms.forwardAppointmentsToFD(...e)),ks.changeInAppointments,Ts.logger),Ps.post("/get-patient-appointments",((...e)=>ms.getPatientAppointments(...e)),Ts.logger),Ps.post("/get-patient-appointments-v1",((...e)=>ms.getPatientAppointmentsV1(...e)),Ts.logger),Ps.post("/get-cancelled-appointments",((...e)=>ms.getCancelledAppointments(...e)),Ts.logger),Ps.post("/get-cancelled-appointments-v1",((...e)=>ms.getCancelledAppointmentsV1(...e)),Ts.logger),Ps.post("/resolve-doctor-appointments",((...e)=>ms.resolveAppointmentForDoctor(...e)),ks.changeInAppointments,Ts.logger),Ps.post("/get-speciality-appointments",((...e)=>ms.getSpecialityAppointments(...e)),Ts.logger),Ps.post("/get-appointment-list-by-case",((...e)=>ms.getAppointmentListByCase(...e)),Ts.logger),Ps.post("/get-next-and-last-appointment",((...e)=>ms.getNextAndLastAppointment(...e)),Ts.logger),Ps.post("/resolve-speciality-appointments",((...e)=>ms.resolveAppointmentForSpeciality(...e)),ks.changeInAppointments,Ts.logger),Ps.post("/get-today-appointment-of-patient",((...e)=>ms.getTodayAppointmentOfPatient(...e)),Ts.logger),Ps.post("/appointments-against-availablities",((...e)=>ms.getAppointmentAgainstAvailablity(...e)),Ts.logger),Ps.post("/get-all-doctor-speciality-appointments-v2",((...e)=>ms.getAllDoctorSpecialityAppointmentsV2(...e)),Ts.logger),Ps.post("/get-all-doctor-speciality-appointments-v1",((...e)=>ms.getAllDoctorSpecialityAppointmentsV2(...e)),Ts.logger),Ps.post("/get-all-doctor-speciality-appointments",((...e)=>ms.getAllDoctorSpecialityAppointments(...e)),Ts.logger),Ps.post("/get-all-pushed-appointment-to-front-desk",((...e)=>ms.getAllAppointmentPushedToFrontDesk(...e)),Ts.logger),Ps.post("/get-all-pushed-appointment-to-front-desk-v1",((...e)=>ms.getAllAppointmentPushedToFrontDeskV1(...e)),Ts.logger),Ps.post("/get-all-patient-appointments",((...e)=>ms.getAllPatientAppointments(...e)),Ts.logger),Ps.post("/get-all-patient-appointments-v1",((...e)=>ms.getAllPatientAppointmentsV1(...e)),Ts.logger),Ps.post("/remove-evaluation-time",((...e)=>ms.removeEvaluationTime(...e)),Ts.logger),Ps.post("/get-appointment-by-case",((...e)=>ms.checkAppointmentsByCase(...e)),Ts.logger),Ps.post("/activate",((...e)=>ms.activateAppointment(...e)),Ts.logger),Ps.post("/trigger-ios-action",((...e)=>ms.triggerAppointmentSocket(...e)),Ts.logger),Ps.post("/get-appointment-by-id",((...e)=>ms.getAppointmentById(...e)),Ts.logger),Ps.post("/get-patient-history",((...e)=>ms.getPatientHistory(...e)),Ts.logger),Ps.post("/get-patient-history-count",((...e)=>ms.getPatientHistoryCount(...e)),Ts.logger),Ps.post("/cancel-doctor-appointments",((...e)=>ms.cancelAppointmentsDeleteAssignments(...e)),ks.changeInAppointments,Ts.logger),Ps.post("/get-appointments",((...e)=>ms.getAppointments(...e)),Ts.logger),Ps.post("/create-app-session",((...e)=>ms.createAppSession(...e)),Ts.logger),Ps.put("/",((...e)=>ms.put(...e)),ks.changeInAppointments,Ts.logger),Ps.put("/v1",((...e)=>ms.putV1(...e)),ks.changeInAppointments,Ts.logger),Ps.put("/update-appointment-status",((...e)=>ms.updateAppointmentStatus(...e)),ks.changeInAppointments,Ts.logger),Ps.put("/update-appointment-for-ios",((...e)=>ms.updateAppointmentForIos(...e)),ks.changeInAppointments,Ts.logger),Ps.put("/update-appointment-and-visit-status",((...e)=>ms.updateAppointmentAndVisitStatus(...e)),ks.changeInAppointments,Ts.logger),Ps.put("/update-status-multiple-appointments",((...e)=>ms.updateStatusMultipleAppointments(...e)),ks.changeInAppointments,Ts.logger),Ps.put("/update-appointment-evaluation",((...e)=>ms.updateAppointmentEvaluation(...e)),ks.changeInAppointments,Ts.logger),Ps.put("/manually-update-status",((...e)=>ms.updateStatus(...e)),ks.changeInAppointments,Ts.logger),Ps.put("/update-appointment-doctor",((...e)=>ms.updateAppointmentDoctor(...e)),Ts.logger),Ps.delete("/",((...e)=>ms.deleteAppointments(...e)),ks.changeInAppointments,Ts.logger);const js=(0,o.Router)();js.get("/",((...e)=>ws.getAll(...e)),Ts.logger);const Bs=(0,o.Router)();Bs.post("/",((...e)=>fs.post(...e)),Ts.logger),Bs.post("/automate",((...e)=>fs.automate(...e)),Ts.logger),Bs.post("/automate-v1",((...e)=>fs.automateV1(...e)),Ts.logger),Bs.post("/get-appointments",((...e)=>fs.getAppointments(...e)),Ts.logger),Bs.post("/specific-appointments",((...e)=>fs.specificAppointments(...e)),Ts.logger),Bs.post("/get-availabilities",((...e)=>fs.getAvailabilities(...e)),Ts.logger),Bs.post("/pre-updation-check",((...e)=>fs.getPreCheckForUpdation(...e)),Ts.logger),Bs.post("/get-filtered-doctor",((...e)=>fs.getFilteredDoctor(...e)),Ts.logger),Bs.post("/get-doctor-assignments",((...e)=>fs.getDoctorAssignments(...e)),Ts.logger),Bs.post("/get-doctor-assignments-v1",((...e)=>fs.getDoctorAssignmentsV1(...e)),Ts.logger),Bs.post("/get-maunal-doctors-list",((...e)=>fs.getMaunalDoctorsList(...e)),Ts.logger),Bs.post("/get-maunal-doctors-list-v1",((...e)=>fs.getMaunalDoctorsListV1(...e)),Ts.logger),Bs.post("/get-free-slots-of-doctors",((...e)=>fs.getFreeSlotsOfDoctors(...e)),Ts.logger),Bs.post("/resolve-past-availabilties",((...e)=>fs.resolvePastAvailabilties(...e)),Ts.logger),Bs.post("/get-partial-available-doctors",((...e)=>fs.getPartialAvailableDoctor(...e)),Ts.logger),Bs.put("/",((...e)=>fs.put(...e)),Ts.logger),Bs.delete("/",((...e)=>fs.delete(...e)),ks.changeInAppointments,Ts.logger);const Us=(0,o.Router)();Us.get("/appointments",((...e)=>ys.getAppointments(...e)),Ts.logger),Us.post("/",((...e)=>ys.post(...e)),Ts.logger),Us.post("/v1",((...e)=>ys.postV1(...e)),Ts.logger),Us.post("/create-doctor-assignments",((...e)=>ys.createDoctorAssignments(...e)),Ts.logger),Us.post("/get-all",((...e)=>ys.getAll(...e)),Ts.logger),Us.post("/get-assignments",((...e)=>ys.getSpecialityAssignments(...e)),Ts.logger),Us.post("/pre-updation-check",((...e)=>ys.getPreCheckForUpdation(...e)),Ts.logger),Us.put("/",((...e)=>ys.update(...e)),ks.changeInAppointments,Ts.logger),Us.put("/update-doctor-assignment",((...e)=>ys.updateDoctorAssignment(...e)),ks.changeInAppointments,Ts.logger),Us.delete("/",((...e)=>ys.delete(...e)),Ts.logger);const qs=(0,o.Router)();qs.put("/set-to-default",((...e)=>us.setToDefault(...e)),Ts.logger),qs.put("/",((...e)=>us.update(...e)),Ts.logger);const Fs=(0,o.Router)();Fs.post("/get",((...e)=>Is.get(...e)),Ts.logger),Fs.post("/",((...e)=>Is.post(...e)),Ts.logger),Fs.put("/",((...e)=>Is.put(...e)),Ts.logger);const Ms=(0,o.Router)();Ms.get("/get-patient-info",((...e)=>bs.getPatient(...e)),Ts.logger),Ms.post("/get-walk_in_patients",((...e)=>bs.getWalkInPatients(...e)),Ts.logger);const $s=(0,o.Router)();$s.post("/specialities",((...e)=>Os.getSpecialities(...e)),Ts.logger),$s.post("/facilities",((...e)=>Os.getFacilities(...e)),Ts.logger),$s.post("/doctors",((...e)=>Os.getDoctors(...e)),Ts.logger);const Vs=(0,o.Router)();Vs.post("/get-all",((...e)=>Ss.getAll(...e)),Ts.logger),Vs.post("/detail",((...e)=>Ss.details(...e)),Ts.logger);const xs=(0,o.Router)();xs.post("/",((...e)=>vs.post(...e)),Ts.logger),xs.post("/appointments",((...e)=>vs.getAppointments(...e)),Ts.logger),xs.put("/",((...e)=>vs.put(...e)),ks.changeInAppointments,Ts.logger),xs.delete("/",((...e)=>vs.delete(...e)),Ts.logger);const Ks=(0,o.Router)();Ks.get("/get-doctor-detail",((...e)=>cs.getDoctorsDetail(...e)),Ts.logger),Ks.post("/get-doctors-info",((...e)=>cs.getDoctorsInfo(...e)),Ts.logger),Ks.post("/get-doctors-info-v1",((...e)=>cs.getDoctorsInfoV1(...e)),Ts.logger),Ks.post("/get-user-info-by-facilities",((...e)=>cs.getUserInfoByFacilities(...e)),Ts.logger),Ks.post("/get-user-info-by-specialities",((...e)=>cs.getUserInfoBySpecialities(...e)),Ts.logger),Ks.post("/get-user-info-by-specialities-v1",((...e)=>cs.getUserInfoBySpecialitiesV1(...e)),Ts.logger),Ks.post("/delete-all-assignment-and-appointment",((...e)=>cs.deleteAllAssignmentAndAppointment(...e)),ks.changeInAppointments,Ts.logger),Ks.post("/max-min-time-of-facility",((...e)=>cs.getMaxMinOfFacility(...e)),Ts.logger),Ks.put("/update-speciality-time-slots",((...e)=>cs.updateSpecialityTimeSlots(...e)),ks.changeInAppointments,Ts.logger);const zs=(0,o.Router)();zs.use("/action-preferences",Ns),zs.use("/action-preferences-types",As),zs.use("/users",Ks),zs.use("/unavailable-doctor-notification",Vs),zs.use("/color-codes",qs),zs.use("/appointments",Ps),zs.use("/available-specialities",Us),zs.use("/available-doctors",Bs),zs.use("/unavailable-doctors",xs),zs.use("/appointment-cancellation-comments",Cs),zs.use("/appointment-types",Ls),zs.use("/appointment-status",Es),zs.use("/appointment-priority",Rs),zs.use("/kiosk",Ms),zs.use("/doctor-instruction-for-facility",Fs),zs.use("/assign-provider-types",js),zs.use("/master",$s),zs.use("/health-checked",((e,t,i)=>{_a.authenticate().then((()=>t.status(200).send("Database connected successfully!"))).catch((e=>{t.status(500).send("Database authenticaion error...")}))})),e.config({path:".env"}),"production"===process.env.NODE_ENVR&&i(711),_a.authenticate().then((()=>console.log("%s Database connected successfully!",t.green("✓")))).catch((e=>{console.error("Database authenticaion error..."),console.log(e,"something went wrong"),process.exit()}));const Gs=o();Gs.use(a("12000000")),Gs.use((function(e,t,i){e.timedout||i()})),Gs.set("host",process.env.OPENSHIFT_NODEJS_IP||"0.0.0.0"),Gs.set("port",process.env.PORT||8081),Gs.set("env",process.env.NODE_ENVR||"development"),Gs.use(d("dev")),Gs.use(o.urlencoded({extended:!0})),Gs.use(o.json()),Gs.use(s()),Gs.use(_()),Gs.use(n()),Gs.use((function(e,t,i){t.locals.receptionTime=process.hrtime(),i()})),Gs.use("/api",zs),Gs.use(((e,t,i,a)=>{return n=void 0,o=void 0,l=function*(){const{body:a,query:n,headers:o,method:s,originalUrl:l}=t,d={body:a,headers:o,query:n,response:{message:e.errors||e.message||e.name||e,errors:e,status:406}};return"production"!==process.env.NODE_ENVR&&console.log("error",e),e.errors&&Array.isArray(e.errors)?(vn.logToCloudWatch(t,i,"validation-error",d),i.status(406).json({message:e.errors[0],errors:"production"===process.env.NODE_ENVR?null:e.errors})):(vn.logToCloudWatch(t,i,"error",d),i.status(e.status||406).json({message:e.message||e.name||e,errors:"production"===process.env.NODE_ENVR?null:e.errors}))},new((s=void 0)||(s=Promise))((function(e,t){function i(e){try{d(l.next(e))}catch(e){t(e)}}function a(e){try{d(l.throw(e))}catch(e){t(e)}}function d(t){var n;t.done?e(t.value):(n=t.value,n instanceof s?n:new s((function(e){e(n)}))).then(i,a)}d((l=l.apply(n,o||[])).next())}));var n,o,s,l})),l.createServer(Gs).listen(Gs.get("port"),(()=>{console.log("%s App is running at http://localhost:%d in %s mode",t.green("✓"),Gs.get("port"),Gs.get("env")),console.log("  Press CTRL-C to stop\n")}))})()})();